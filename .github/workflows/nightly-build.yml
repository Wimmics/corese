name: Nightly Build

on:
  push:
    branches:
      - development
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      short_commit: ${{ steps.vars.outputs.short_commit }}
      date: ${{ steps.date.outputs.date }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: development

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Build with Maven
      run: mvn clean install

    - name: Get short commit hash
      id: vars
      run: echo "::set-output name=short_commit::$(git rev-parse --short HEAD)"

    - name: Get date
      id: date
      run: echo "::set-output name=date::$(date +'%Y%m%d')"

    - name: Rename Artifacts
      run: |
        for file in $(find . -name '*.jar' | grep -v 'original'); do
          base=$(basename $file)
          new_base=$(echo $base | sed "s/4\.5\.1/${{ steps.vars.outputs.short_commit }}-nightly-${{ steps.date.outputs.date }}/")
          mv $file $(dirname $file)/$new_base
        done

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nightly-build
        path: |
          corese-core/target/corese-core-*-nightly-*.jar
          corese-command/target/corese-command-*-nightly-*.jar
          corese-gui/target/corese-gui-*-nightly-*.jar
          corese-jena/target/corese-jena-*-nightly-*.jar
          corese-rdf4j/target/corese-rdf4j-*-nightly-*.jar
          corese-server/target/corese-server-*-nightly-*.jar

  delete_previous_prerelease:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: development
        
    - name: Delete previous nightly tag
      if: ${{ needs.build.result == 'success' }}
      run: |
        latest_nightly_tag=$(gh release list --limit 1 --exclude-drafts --json tagName,isPrerelease -q '.[] | select(.isPrerelease) | .tagName')
        if [ -n "$latest_nightly_tag" ]; then
          gh release delete $latest_nightly_tag -y
          gh api --method DELETE "/repos/${{ github.repository }}/git/refs/tags/$latest_nightly_tag"
        else
          echo "No previous nightly tag found."
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create_prerelease:
    runs-on: ubuntu-latest
    needs: [build, delete_previous_prerelease]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: development

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: nightly-build
        path: ./artifacts

    - name: Create new prerelease
      if: ${{ needs.build.result == 'success' }}
      run: |
        tag_name="nightly-${{ needs.build.outputs.date }}-${{ needs.build.outputs.short_commit }}"
        gh release create $tag_name -p -t "Nightly Build ${{ needs.build.outputs.short_commit }}" -n "This is an automated nightly build. It is a development version and not stable." --target development
        gh release upload $tag_name ./artifacts/corese-core-*-nightly-*.jar ./artifacts/corese-command-*-nightly-*.jar ./artifacts/corese-gui-*-nightly-*.jar ./artifacts/corese-jena-*-nightly-*.jar ./artifacts/corese-rdf4j-*-nightly-*.jar ./artifacts/corese-server-*-nightly-*.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: [build, create_prerelease]
    steps:
    - name: Notify Success
      if: ${{ needs.build.result == 'success' }}
      run: echo "Nightly build completed successfully!"

    - name: Notify Failure
      if: ${{ needs.build.result != 'success' }}
      run: echo "Nightly build failed."
