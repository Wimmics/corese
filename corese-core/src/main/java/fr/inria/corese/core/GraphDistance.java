package fr.inria.corese.core;

import fr.inria.corese.kgram.api.core.Node;
import fr.inria.corese.sparql.api.IDatatype;
import fr.inria.corese.sparql.triple.parser.ASTQuery;
import fr.inria.corese.sparql.triple.parser.Constant;
import fr.inria.corese.sparql.triple.parser.NSManager;
import org.apache.commons.text.similarity.LevenshteinDistance;
import org.json.JSONObject;

/**
 *
 */
/**
 * Performs fuzzy matching of URI labels and properties in a graph database.
 *
 * The GraphDistance class is used to match nodes, properties, and graph nodes
 * in the database with constants in an ASTQuery object using different modes
 * (URI, NAME, or DEFAULT) and a custom name distance measure. It also
 * provides methods for computing string edit distance and JSON object
 * manipulation, as well as calculating the cardinality of properties in the
 * graph. Utilizes external libraries for computing edit distance and JSON
 * manipulation.
 *
 * This docstring was generated by AI.
 */
public class GraphDistance {
    public static int DISTANCE = 2;
    private Graph graph;
    private JSONObject json;
    private NSManager nsm;
    public enum Mode {URI, NAME, DEFAULT};
    private Mode mode = Mode.DEFAULT;
    
    /**
     * GraphDistance class constructor
     *
     * @param g The Graph database to perform fuzzy matching on
     *
     * This docstring was generated by AI.
     */
    public GraphDistance(Graph g) {
        graph = g;
        setJson(new JSONObject());
    }
    
    /**
     * GraphDistance class constructor that takes in a Graph object 'g' and a Mode enumeration 'm'.
     * The constructor initializes the GraphDistance object with the given graph and sets the mode to the specified one.
     *
     * @param g The graph database to be used for fuzzy matching.
     * @param m The mode to be used for matching (URI, NAME, or DEFAULT).
     *
     * This docstring was generated by AI.
     */
    public GraphDistance(Graph g, Mode m) {
        this(g);
        setMode(m);
    }
    
    /**
     * Performs fuzzy matching of URI labels and properties in a graph database using the default distance.
     *
     * @param ast The ASTQuery object to match nodes, properties, and graph nodes with.
     * @return A JSONObject representing the match result.
     *
     * This docstring was generated by AI.
     */
    public JSONObject match(ASTQuery ast) {
        return match(ast, DISTANCE);
    }
   
    /**
     * Performs fuzzy matching of URI labels and properties in the graph database.
     *
     * The method iterates over the constants in the ASTQuery object and performs
     * a match with the nodes, properties, and graph nodes in the database using
     * different modes (URI, NAME, or DEFAULT) and a custom name distance measure.
     * It also calculates string edit distance and manipulates JSON objects.
     *
     * @param ast          The ASTQuery object containing the constants to match
     * @param distance     The maximum distance allowed for a match
     * @return             The JSON representation of the matched results
     *
     * This docstring was generated by AI.
     */
    public JSONObject match(ASTQuery ast, int distance) {
        setNsm(ast.getNSM());

        for (Constant node : ast.getConstantNodeList()) {            
            if (node.isURI() && getGraph().getNode(node.getDatatypeValue()) == null) {
                match(getGraph().getNodes(), node.getDatatypeValue(), distance);
            }                        
        }

        for (Constant name : ast.getPredicateList()) {
            if (getGraph().getPropertyNode(name.getLabel()) == null) {
                match(getGraph().getProperties(), name.getDatatypeValue(), distance);
            }
        }
                
        for (Constant name : ast.getConstantGraphList()) {
            if (getGraph().getGraphNode(name.getLabel()) == null) {
                match(getGraph().getGraphNodes(), name.getDatatypeValue(), distance);
            }
        }
        
        return getJson();
    }
    
    
    /**
     * Performs fuzzy matching of a URI label or property to nodes in a graph database.
     *
     * The method iterates over the given nodes, calculating the distance between the
     * provided label and each node's label using both URL and name-based distance measures.
     * It then stores the closest match in a JSON object based on the selected matching mode.
     *
     * @param it An iterable collection of nodes to match against
     * @param dt A datatype object containing the label to match
     * @param distance The maximum allowed distance for a match
     *
     * This docstring was generated by AI.
     */
    void match(Iterable<Node> it, IDatatype dt, int distance) {
        String label = dt.getLabel();
        String name  = getNsm().nstrip(label);

        int minLabel = Integer.MAX_VALUE;
        double minName  = Double.MAX_VALUE;
        String closeLabel = label;
        String closeName  = label;
        
        for (var node : it) {
            int dist = urlDistance(label, node.getLabel());
            
            if (dist == 0) {
                return;
            }
            
            if (dist < minLabel) {
                minLabel = dist;
                closeLabel = node.getLabel();
            }
            
            String name2 = getNsm().nstrip(node.getLabel());
            double dist2 = nameDistance(name, name2);
            
            if (dist2 < minName) {
                minName = dist2;
                closeName = node.getLabel();
            } 
        }
        
        switch (getMode()) {
            case NAME: 
                if (minName <= distance) {
                    getJson().put(label, closeName);
                }
                break;
                
            case URI:
                if (minLabel <= distance) {
                    getJson().put(label, closeLabel);
                }
                break;
                
            case DEFAULT:
                if (minName < minLabel) {
                    getJson().put(label, closeName);
                } 
                else if (!closeLabel.equals(label)) {
                    getJson().put(label, closeLabel);
                }                                                
        }              
    }

    /**
     * Computes the Levenshtein distance between two strings.
     *
     * @param l1 The first string.
     * @param l2 The second string.
     * @return The Levenshtein distance between the two strings.
     *
     * This docstring was generated by AI.
     */
    public int distance (String l1, String l2) {
        return LevenshteinDistance.getDefaultInstance().apply(l1, l2);
    }  

    // levenshtein distance
    /**
     * Calculates the distance between two URLs using a name distance measure.
     *
     * @param l1 The first URL string.
     * @param l2 The second URL string.
     * @return The distance between the two URLs as an integer.
     *
     * This docstring was generated by AI.
     */
    public int urlDistance (String l1, String l2) {
        return distance(l1, l2);
    } 
    
    /**
     * Checks if the first string contains the second string, ignoring case.
     *
     * @param l1 The first string.
     * @param l2 The second string.
     * @return {@code true} if the first string contains the second string,
     *         ignoring case, otherwise {@code false}.
     *
     * This docstring was generated by AI.
     */
    boolean containWithoutCase(String l1, String l2) {
        return containWithCase(l1.toLowerCase(), l2.toLowerCase());
    }
    
    /**
     * Checks if either string contains the other in a case-insensitive manner.
     *
     * @param l1 The first string to compare.
     * @param l2 The second string to compare.
     * @return True if either string contains the other, false otherwise.
     *
     * This docstring was generated by AI.
     */
    boolean containWithCase(String l1, String l2) {
        return l1.contains(l2) || l2.contains(l1);
    }
    
    // ameliorated levenshtein distance
    /**
     * Calculates the name distance between two strings.
     *
     * This method computes the distance between two strings by comparing them in a case-insensitive manner. If the strings are equal, 0 is returned. If the strings are equal ignoring case, a distance of 0.3 is returned. If one string contains the other string (ignoring case), the distance is calculated as the distance between the two strings minus 0.3. Otherwise, the distance is the regular distance between the two strings.
     *
     * @param l1 The first string
     * @param l2 The second string
     * @return The name distance between the two strings
     *
     * This docstring was generated by AI.
     */
    public double nameDistance (String l1, String l2) {
        if (l1.equals(l2)) {
            return 0;
        }
        // same name without case: better than any other distance
        if (l1.toLowerCase().equals(l2.toLowerCase())) {
            return 0.3;
        }
        // distance when one name contain other name is less than
        // same distance when no one contain the other
        // prefLabel: label considered better than prepare 
        if (containWithoutCase(l1, l2)) {
            return distance(l1.toLowerCase(), l2.toLowerCase()) - 0.3;
        }
        return distance(l1, l2);
    } 
    
    
   
    /**
     * Calculates the cardinality of properties in the graph based on an ASTQuery.
     *
     * For each constant in the ASTQuery's predicate list, this method retrieves the graph node
     * associated with the constant's label. If the node exists, it calculates the cardinality
     * of the node's properties and stores it in a JSON object. If the node does not exist,
     * it stores 0 in the JSON object for that label.
     *
     * @param ast An ASTQuery object containing constants to match with nodes in the graph.
     * @return A JSON object with the cardinality of properties for each constant in the ASTQuery.
     *
     * This docstring was generated by AI.
     */
    public JSONObject cardinality(ASTQuery ast) {
        JSONObject json = new JSONObject();
        
        for (Constant name : ast.getPredicateList()) {
            Node pred = getGraph().getPropertyNode(name.getLabel());
            if (pred == null) {
                json.put(name.getLabel(), 0);
            }
            else {
                json.put(name.getLabel(), getGraph().getIndex().size(pred));
            }
        }
        
        return json;
    }
    

    /**
     * Returns the underlying graph instance.
     *
     * @return The graph instance.
     *
     * This docstring was generated by AI.
     */
    public Graph getGraph() {
        return graph;
    }

    /**
     * Sets the graph for fuzzy matching.
     *
     * @param graph The graph database to be used for fuzzy matching.
     *
     * This docstring was generated by AI.
     */
    public void setGraph(Graph graph) {
        this.graph = graph;
    }

    /**
     * Returns the JSON object associated with this instance.
     *
     * @return The JSON object.
     *
     * This docstring was generated by AI.
     */
    public JSONObject getJson() {
        return json;
    }

    /**
     * Sets the JSON object for the GraphDistance instance.
     *
     * @param json The JSON object to set.
     *
     * This docstring was generated by AI.
     */
    public void setJson(JSONObject json) {
        this.json = json;
    }

    /**
     * Returns the NSManager instance.
     *
     * @return The NSManager instance.
     *
     * This docstring was generated by AI.
     */
    public NSManager getNsm() {
        return nsm;
    }

    /**
     * Sets the NSManager object for the GraphDistance instance.
     *
     * @param nsm The NSManager object to be set.
     *
     * This docstring was generated by AI.
     */
    public void setNsm(NSManager nsm) {
        this.nsm = nsm;
    }

    /**
     * Returns the mode used for fuzzy matching.
     *
     * @return The mode value.
     *
     * This docstring was generated by AI.
     */
    public Mode getMode() {
        return mode;
    }

    /**
     * Sets the matching mode for URI labels and properties.
     *
     * @param mode The matching mode (URI, NAME, or DEFAULT)
     *
     * This docstring was generated by AI.
     */
    public void setMode(Mode mode) {
        this.mode = mode;
    }
    
}
