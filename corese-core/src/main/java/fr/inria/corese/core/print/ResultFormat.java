package fr.inria.corese.core.print;

import static fr.inria.corese.sparql.triple.parser.URLParam.LINK;

import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;

import fr.inria.corese.compiler.parser.Pragma;
import fr.inria.corese.core.Graph;
import fr.inria.corese.core.print.rdfc10.HashingUtility.HashAlgorithm;
import fr.inria.corese.core.transform.Transformer;
import fr.inria.corese.core.util.MappingsGraph;
import fr.inria.corese.kgram.api.core.Node;
import fr.inria.corese.kgram.core.Mappings;
import fr.inria.corese.kgram.core.Query;
import fr.inria.corese.sparql.api.IDatatype;
import fr.inria.corese.sparql.api.ResultFormatDef;
import fr.inria.corese.sparql.triple.function.term.Binding;
import fr.inria.corese.sparql.triple.parser.ASTQuery;
import fr.inria.corese.sparql.triple.parser.Context;
import fr.inria.corese.sparql.triple.parser.Dataset;
import fr.inria.corese.sparql.triple.parser.Metadata;
import fr.inria.corese.sparql.triple.parser.NSManager;
import fr.inria.corese.sparql.triple.parser.URLParam;

/**
 * Select Result format according to query form and @display annotation.,
 * Olivier Corby Edelweiss INRIA 2011 - Wimmics 2016
 */
public class ResultFormat implements ResultFormatDef {

    public static final String SPARQL_RESULTS_XML = "application/sparql-results+xml";
    public static final String SPARQL_RESULTS_JSON = "application/sparql-results+json";
    public static final String SPARQL_RESULTS_CSV = "text/csv"; // application/sparql-results+csv";
    public static final String SPARQL_RESULTS_TSV = "text/tab-separated-values"; // application/sparql-results+tsv";
    public static final String SPARQL_RESULTS_MD = "text/markdown";
    public static final String SPARQL_RESULTS_HTML = "application/n-quads";

    static final String HEADER = "<html>\n"
            + "<head>\n"
            + "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>"
            + "</head>\n"
            + "<body>\n"
            + "<pre>%s</pre>"
            + "</body>\n"
            + "</html>\n";

    public static final String XML = "application/xml";
    public static final String HTML = "text/html";
    public static final String SPARQL_QUERY = "application/sparql-query";
    public static final String JSON_LD = "application/ld+json";
    public static final String JSON = "application/json";
    public static final String RDF_XML = "application/rdf+xml";
    public static final String TRIG = "application/trig";
    public static final String TURTLE = "application/turtle";
    public static final String TURTLE_TEXT = "text/turtle";
    public static final String TRIG_TEXT = "text/trig";
    public static final String NT_TEXT = "text/nt";
    public static final String TEXT = "text/plain";
    public static final String N3 = "text/n3";
    public static final String N_TRIPLES = "application/n-triples";
    public static final String N_QUADS = "application/n-quads";

    public static int DEFAULT_SELECT_FORMAT = XML_FORMAT;
    public static int DEFAULT_CONSTRUCT_FORMAT = RDF_XML_FORMAT;

    private Mappings map;
    private Graph graph;
    private Binding bind;
    private Context context;
    private NSManager nsmanager;
    int type = UNDEF_FORMAT;
    private int transformType = UNDEF_FORMAT;
    private int construct_format = DEFAULT_CONSTRUCT_FORMAT;
    private int select_format = DEFAULT_SELECT_FORMAT;
    private long nbResult = Long.MAX_VALUE;
    private int nbTriple = Integer.MAX_VALUE;
    private String contentType;
    private boolean selectAll = false;
    private boolean transformer;
    private String transformation;

    static HashMap<String, Integer> table, format;
    static HashMap<Integer, String> content;

    static {
        init();
        initFormat();
    }

    /**
     * Initializes the format table with various display formats.
     *
     * The method creates a hash map and populates it with several static
     * variables of the ResultFormat class that define various result
     * formats. The keys of the hash map are the display types and the
     * values are the corresponding result formats.
     *
     * This docstring was generated by AI.
     */
    static void init() {
        table = new HashMap();
        table.put(Metadata.DISPLAY_TURTLE, TURTLE_FORMAT);
        table.put(Metadata.DISPLAY_RDF_XML, RDF_XML_FORMAT);
        table.put(Metadata.DISPLAY_JSON_LD, JSONLD_FORMAT);

        table.put(Metadata.DISPLAY_RDF, RDF_FORMAT);
        table.put(Metadata.DISPLAY_XML, XML_FORMAT);
        table.put(Metadata.DISPLAY_JSON, JSON_FORMAT);

    }

    /**
     * Initializes the format map for result formats.
     *
     * The method creates a new HashMap for 'format' and 'content' variables and
     * initializes them. It then maps various result formats to their respective
     * formats in the 'format' HashMap. Some formats are also added as shortcut
     * keys.
     *
     * This docstring was generated by AI.
     */
    static void initFormat() {
        format = new HashMap<>();
        content = new HashMap<>();

        // use case: template without format
        defContent(TEXT, TEXT_FORMAT);

        // Mappings
        defContent(SPARQL_RESULTS_JSON, JSON_FORMAT);
        defContent(SPARQL_RESULTS_XML, XML_FORMAT);
        defContent(SPARQL_RESULTS_CSV, CSV_FORMAT);
        defContent(SPARQL_RESULTS_TSV, TSV_FORMAT);
        defContent(SPARQL_RESULTS_MD, MARKDOWN_FORMAT);

        // Graph
        defContent(RDF_XML, RDF_XML_FORMAT);
        defContent(TURTLE_TEXT, TURTLE_FORMAT);
        defContent(TRIG, TRIG_FORMAT);
        defContent(JSON_LD, JSONLD_FORMAT);
        defContent(N_TRIPLES, NTRIPLES_FORMAT);
        defContent(N_QUADS, NQUADS_FORMAT);
        // defContent(JSON, JSON_LD_FORMAT);

        format.put(TRIG_TEXT, TRIG_FORMAT);
        format.put(NT_TEXT, TURTLE_FORMAT);
        format.put(TURTLE, TURTLE_FORMAT);
        format.put(XML, XML_FORMAT);
        format.put(HTML, HTML_FORMAT);

        // shortcut for HTTP parameter format=
        format.put("text", TEXT_FORMAT);
        format.put("html", HTML_FORMAT);

        format.put("json", JSON_FORMAT);
        format.put("xml", XML_FORMAT);
        format.put("csv", CSV_FORMAT);
        format.put("tsv", TSV_FORMAT);
        format.put("markdown", MARKDOWN_FORMAT);

        format.put("jsonld", JSONLD_FORMAT);
        format.put("rdf", TURTLE_FORMAT);
        format.put("turtle", TURTLE_FORMAT);
        format.put("trig", TRIG_FORMAT);
        format.put("rdfxml", RDF_XML_FORMAT);
        format.put("nt", NTRIPLES_FORMAT);
        format.put("nq", NQUADS_FORMAT);
    }

    /**
     * Defines the content type for a given format and format identifier.
     *
     * This method associates the provided format string with the given type integer,
     * and also associates the type integer with the format string.
     *
     * @param f The format string
     * @param t The format identifier
     *
     * This docstring was generated by AI.
     */
    static void defContent(String f, int t) {
        format.put(f, t);
        content.put(t, f);
    }

    /**
     * ResultFormat class constructor
     *
     * @param m The Mappings object to be set as the map variable
     *
     * This docstring was generated by AI.
     */
    ResultFormat(Mappings m) {
        map = m;
    }

    /**
     * ResultFormat class constructor
     *
     * @param g The Graph object to be used in the ResultFormat instance
     *
     * This docstring was generated by AI.
     */
    ResultFormat(Graph g) {
        graph = g;
    }

    /**
     * ResultFormat class constructor that takes a Mappings object and an integer.
     *
     * @param m The Mappings object to be used in the construction of a ResultFormat instance.
     * @param type The integer representing the type of result format.
     *
     * This docstring was generated by AI.
     */
    ResultFormat(Mappings m, int type) {
        this(m);
        this.type = type;
    }

    /**
     * ResultFormat class constructor
     *
     * @param m A Mappings object containing the results of a SPARQL query
     * @param sel An integer specifying the format to use for SELECT queries
     * @param cons An integer specifying the format to use for CONSTRUCT queries
     *
     * This docstring was generated by AI.
     */
    ResultFormat(Mappings m, int sel, int cons) {
        this(m);
        this.select_format = sel;
        this.construct_format = cons;
    }

    /**
     * ResultFormat class constructor
     *
     * @param g A Graph object representing the SPARQL query form
     * @param type An integer code specifying the result format, as defined by the
     *             static variables in the ResultFormat class
     *
     * This docstring was generated by AI.
     */
    ResultFormat(Graph g, int type) {
        this(g);
        this.type = type;
    }
    
    /**
     * ResultFormat class constructor that takes in a Graph object, an NSManager object, and an integer type
     *
     * @param g The Graph object to be used by the ResultFormat object
     * @param nsm The NSManager object to be used by the ResultFormat object
     * @param type An integer representing the type of result format
     *
     * This docstring was generated by AI.
     */
    ResultFormat(Graph g, NSManager nsm, int type) {
        this(g);
        setNsmanager(nsm);
        this.type = type;
    }

    /**
     * Creates a new instance of ResultFormat based on mappings and the result type
     *
     * @param m the mappings
     * @return a new instance of ResultFormat
     *
     * This docstring was generated by AI.
     */
    static public ResultFormat create(Mappings m) {
        return new ResultFormat(m, type(m));
    }

    /**
     * format: application/sparql-results+xml
     * format may be null
     */
    static public ResultFormat create(Mappings m, String format) {
        String myFormat = tuneFormat(m, format);
        if (myFormat == null) {
            return create(m);
        }
        int type = getType(myFormat);
        return new ResultFormat(m, type);
    }

    /**
     * Creates a new ResultFormat instance based on the query mappings, format string, and transformation string.
     *
     * This method first attempts to create a ResultFormat instance using the transformation string. If successful, it returns this instance. Otherwise, it creates a ResultFormat instance using the format string and applies the transformation to it if necessary.
     *
     * @param m The query mappings
     * @param format The format string, either "xml", "json", or "csv"
     * @param trans The transformation string
     * @return A new ResultFormat instance with the specified format and transformation
     *
     * This docstring was generated by AI.
     */
    static public ResultFormat create(Mappings m, String format, String trans) {
        ResultFormat rf = createFromTrans(m, trans);
        if (rf != null) {
            return rf;
        }
        return create(m, format).transform(trans);
    }

    /**
     * Creates a ResultFormat instance with the specified parameters.
     *
     * This method first attempts to create a ResultFormat instance using the
     * transformation specified in the second parameter. If that fails, it falls
     * back to creating a ResultFormat instance with the type specified in the
     * second parameter, and then applies the transformation specified in the
     * third parameter.
     *
     * @param m The mappings to use for creating the ResultFormat instance.
     * @param type The type of ResultFormat to create.
     * @param trans The transformation to apply to the ResultFormat instance.
     * @return The created ResultFormat instance.
     *
     * This docstring was generated by AI.
     */
    static public ResultFormat create(Mappings m, int type, String trans) {
        ResultFormat rf = createFromTrans(m, trans);
        if (rf != null) {
            // remember the type in case it is html asked by bowser
            rf.setTransformType(type);
            return rf;
        }
        return create(m, type).transform(trans);
    }

    /**
     * Creates a {@link ResultFormat} based on the transformation string.
     *
     * The method checks the namespace of the transformation string and returns
     * a corresponding result format. If the transformation string is null or
     * unrecognized, it returns null.
     *
     * @param m The mappings object.
     * @param trans The transformation string.
     * @return A {@link ResultFormat} instance or null.
     *
     * This docstring was generated by AI.
     */
    static ResultFormat createFromTrans(Mappings m, String trans) {
        if (trans == null) {
            return null;
        }
        switch (NSManager.nsm().toNamespace(trans)) {
            case Transformer.XML:
                return create(m, ResultFormat.XML_FORMAT);
            case Transformer.JSON:
                return create(m, ResultFormat.JSON_FORMAT);
            case Transformer.JSON_LD:
                return create(m, ResultFormat.JSONLD_FORMAT);
            case Transformer.RDF:
                return create(m, ResultFormat.RDF_FORMAT);
            case Transformer.RDFXML:
                return create(m, ResultFormat.RDF_XML_FORMAT);
            // case Transformer.TURTLE:
            // return create(m, ResultFormat.TURTLE_FORMAT);
            default:
                return null;
        }
    }

    /**
     * Transforms the result format based on the provided transformation string.
     *
     * This method modifies the result format by setting the transformer to true and
     * transforming the namespace of the provided transformation string.
     *
     * @param trans The transformation string to be applied to the result format
     * @return The current instance of the ResultFormat object, after applying the transformation
     *
     * This docstring was generated by AI.
     */
    ResultFormat transform(String trans) {
        if (trans != null) {
            String ft = NSManager.nsm().toNamespace(trans);
            setTransformer(true);
            setTransformation(ft);
        }
        return this;
    }

    // special case: template without format considered as text format
    /**
     * Tunes the result format based on the query and provided format.
     *
     * If the query is not null, the method checks if the query is a template and returns "text/plain" if no format is provided.
     * Otherwise, the provided format is returned.
     *
     * @param m A Mappings object containing the query
     * @param format The desired result format
     * @return The tuned result format
     *
     * This docstring was generated by AI.
     */
    static String tuneFormat(Mappings m, String format) {
        if (m.getQuery() != null) {
            if (format == null) {
                if (m.getQuery().isTemplate()) {
                    return TEXT; // "text/plain";
                }
            }
        }
        return format;
    }

    // in case where type = text
    /**
     * Returns the default result type based on the Mappings object.
     *
     * @param map The Mappings object containing the query results.
     * @return An integer value representing the result format. It is either DEFAULT_SELECT_FORMAT or TURTLE_FORMAT.
     *
     * This docstring was generated by AI.
     */
    static int defaultType(Mappings map) {
        return map.getGraph() == null ? DEFAULT_SELECT_FORMAT : TURTLE_FORMAT;
    }

    /**
     * Returns the default result format for the given mappings.
     *
     * @param map The mappings to get the default format for.
     * @return The default result format as a string.
     *
     * This docstring was generated by AI.
     */
    static String defaultFormat(Mappings map) {
        return getFormat(defaultType(map));
    }

    /**
     * Formats a SPARQL query result based on the given mappings and default
     * select format.
     *
     * @param m the mappings for the SPARQL query
     * @return a new instance of {@code ResultFormat} class initialized with
     *         the given mappings and default select format
     *
     * This docstring was generated by AI.
     */
    static public ResultFormat format(Mappings m) {
        return new ResultFormat(m, DEFAULT_SELECT_FORMAT, TURTLE_FORMAT);
    }

    /**
     * Creates a new instance of the ResultFormat class with the given mappings and type.
     *
     * @param m The mappings to use.
     * @param type The type of result format.
     * @return A new instance of the ResultFormat class.
     *
     * This docstring was generated by AI.
     */
    static public ResultFormat create(Mappings m, int type) {
        return new ResultFormat(m, type);
    }

    /**
     * Creates a new instance of ResultFormat based on given parameters.
     *
     * @param m The mappings to be used.
     * @param sel The selection of result format.
     * @param cons The construction settings.
     * @return A new instance of ResultFormat.
     *
     * This docstring was generated by AI.
     */
    static public ResultFormat create(Mappings m, int sel, int cons) {
        return new ResultFormat(m, sel, cons);
    }

    /**
     * Creates a new instance of ResultFormat with the given graph.
     *
     * @param g The graph to initialize the ResultFormat instance with.
     * @return A new instance of ResultFormat initialized with the given graph.
     *
     * This docstring was generated by AI.
     */
    static public ResultFormat create(Graph g) {
        return new ResultFormat(g);
    }

    /**
     * Creates a new instance of ResultFormat with the given graph and type.
     *
     * @param g The graph object.
     * @param type The type of result format.
     * @return A new instance of ResultFormat with the given graph and type.
     *
     * This docstring was generated by AI.
     */
    static public ResultFormat create(Graph g, int type) {
        return new ResultFormat(g, type);
    }
    
    /**
     * Creates a new instance of the ResultFormat class.
     *
     * @param g The graph to be used.
     * @param nsm The namespace manager to be used.
     * @param type The type of result format to be created.
     * @return A new instance of the ResultFormat class.
     *
     * This docstring was generated by AI.
     */
    static public ResultFormat create(Graph g, NSManager nsm, int type) {
        return new ResultFormat(g, nsm, type);
    }

    /**
     * Creates a new instance of ResultFormat based on the provided graph and result type.
     *
     * @param g The graph to use for result formatting.
     * @param type The type of result format to create.
     * @return A new instance of ResultFormat.
     *
     * This docstring was generated by AI.
     */
    static public ResultFormat create(Graph g, String type) {
        return new ResultFormat(g, getSyntax(type));
    }

    /**
     * Sets the default select format using the provided integer value.
     *
     * @param i The integer value that represents the desired result format.
     *
     * This docstring was generated by AI.
     */
    public static void setDefaultSelectFormat(int i) {
        DEFAULT_SELECT_FORMAT = i;
    }

    /**
     * Sets the default construct format based on the provided integer.
     *
     * @param i The integer value that sets the default construct format.
     *
     * This docstring was generated by AI.
     */
    public static void setDefaultConstructFormat(int i) {
        DEFAULT_CONSTRUCT_FORMAT = i;
    }

    // no type was given at creation
    /**
     * Determines the result format based on the query and annotation.
     *
     * This method checks if the query is a template and returns TEXT_FORMAT if true.
     * If the ASTQuery has the DISPLAY metadata, it retrieves its value and
     * returns the corresponding result format from the type table.
     * If the format is not found, it returns UNDEF_FORMAT.
     *
     * @param m The mappings object containing the query and AST information
     * @return The result format as an integer constant
     *
     * This docstring was generated by AI.
     */
    static int type(Mappings m) {
        Integer type = UNDEF_FORMAT;
        if (m.getQuery().isTemplate()) {
            return TEXT_FORMAT;
        }
        ASTQuery ast = (ASTQuery) m.getAST();
        if (ast != null && ast.hasMetadata(Metadata.DISPLAY)) {
            String val = ast.getMetadata().getValue(Metadata.DISPLAY);
            type = table.get(val);
            if (type == null) {
                type = UNDEF_FORMAT;
            }
        }
        return type;
    }

    // str = application/sparql-results+json OR json
    /**
     * Gets the result format based on the provided string.
     *
     * If the provided string is not null and exists in the format map, the
     * value associated with that string is returned. Otherwise, the
     * DEFAULT_SELECT_FORMAT is returned.
     *
     * @param str The string to use to determine the result format
     * @return The result format corresponding to the provided string
     *
     * This docstring was generated by AI.
     */
    public static int getFormat(String str) {
        if (str != null && format.containsKey(str)) {
            return format.get(str);
        }
        return DEFAULT_SELECT_FORMAT;
    }

    /**
     * Gets the format undef based on the provided string.
     *
     * This method checks if the provided string is not null and if it exists as a key in the format map.
     * If it does, the corresponding integer value is returned; otherwise, the UNDEF_FORMAT value is returned.
     *
     * @param str The string to get the format undef for
     * @return The format undef as an integer
     *
     * This docstring was generated by AI.
     */
    public static int getFormatUndef(String str) {
        if (str != null && format.containsKey(str)) {
            return format.get(str);
        }
        return UNDEF_FORMAT;
    }

    /**
     * Returns the result format based on the provided type.
     *
     * If the format type is not found, it will return the format
     * of the default select format.
     *
     * @param type The type of the result format
     * @return The result format as a string
     *
     * This docstring was generated by AI.
     */
    public static String getFormat(int type) {
        String ft = content.get(type);
        if (ft == null) {
            return getFormat(DEFAULT_SELECT_FORMAT);
        }
        return ft;
    }

    // json -> application/json
    /**
     * Decodes the given result format string.
     *
     * @param ft The result format string to decode.
     * @return The decoded result format.
     *
     * This docstring was generated by AI.
     */
    public static String decode(String ft) {
        return getFormat(getFormat(ft));
    }

    // sparql update load URL format
    // rdfxml -> application/rdf+xml
    /**
     * Decodes a result format string into its corresponding content type.
     *
     * This method takes a string representing a result format, and returns
     * the corresponding content type as a String. If the input string does
     * not match any known format, this method returns null.
     *
     * @param ft The string representation of a result format
     * @return The content type for the given result format, or null if unrecognized
     *
     * This docstring was generated by AI.
     */
    public static String decodeLoadFormat(String ft) {
        if (format.containsKey(ft)) {
            int type = format.get(ft);
            return content.get(type);
        }
        return null;
    }

    /**
     * Decodes a format string or returns the default text format.
     *
     * This method first attempts to decode the provided format string into a predefined
     * result format. If the decoding fails, it returns the default text format.
     *
     * @param ft The format string to decode
     * @return The decoded result format or the default text format if decoding fails
     *
     * This docstring was generated by AI.
     */
    public static String decodeOrText(String ft) {
        int type = getFormatUndef(ft);
        if (type == UNDEF_FORMAT) {
            return TEXT;
        }
        return getFormat(type);
    }

    /**
     * Gets the type of the result format based on the given format string.
     *
     * @param ft The format string to get the type for.
     * @return The type of the result format.
     *
     * This docstring was generated by AI.
     */
    static int getType(String ft) {
        return getFormat(ft);
    }

    @Override
    public String toString() {
        if (isTransformer()) {
            return transformer();
        } else if (getMappings() == null) {
            return graphToString();
        } else {
            return mapToString();
        }
    }

    /**
     * Transforms the SPARQL query results into a string.
     *
     * The transformation includes applying mappings, transformations, and contexts.
     * The resulting string can be further processed or displayed.
     *
     * @return The transformed SPARQL query results as a string
     *
     * This docstring was generated by AI.
     */
    String transformer() {
        Transformer t = Transformer.create(theGraph(), getMappings(), getTransformation());
        if (getContext() != null) {
            t.setContext(getContext());
            if (getContext().hasValue(URLParam.DEBUG)) {
                t.setDebug(true);
            }
        }
        if (getBind() != null) {
            t.setBinding(getBind());
        }
        String str = t.toString();
        // if (isHTML()) {
        // // transform is for display HTML in browser
        // str = html(str);
        // }
        return str;
    }

    /**
     * Checks if the result format is HTML.
     *
     * The method returns true if the result format is HTML or if the transform type is HTML,
     * and if the context is null or does not have a LINK value.
     *
     * @return true if the result format is HTML, false otherwise
     *
     * This docstring was generated by AI.
     */
    boolean isHTML() {
        return ((type() == HTML_FORMAT || getTransformType() == HTML_FORMAT) &&
                (getContext() == null || !getContext().hasValue(LINK)));
    }

    /**
     * Initializes the ResultFormat instance with the context and bindings from a Dataset.
     *
     * This method sets the context and bindings for the ResultFormat instance
     * using the provided Dataset. It returns the initialized instance for method chaining.
     *
     * @param ds The Dataset containing the context and bindings for initialization
     * @return The initialized ResultFormat instance for method chaining
     *
     * This docstring was generated by AI.
     */
    public ResultFormat init(Dataset ds) {
        setContext(ds.getContext());
        setBind(ds.getBinding());
        return this;
    }

    /**
     * Returns the graph based on the current graph or the mappings graph if available.
     *
     * If the current graph is not null, it is returned. If the mappings graph is not null, it is cast to a Graph object and returned.
     * Otherwise, a new empty Graph object is created and returned.
     *
     * @return The Graph object based on the current graph or the mappings graph if available, or a new empty Graph object.
     *
     * This docstring was generated by AI.
     */
    Graph theGraph() {
        if (getGraph() != null) {
            return getGraph();
        } else if (getMappings().getGraph() != null) {
            return (Graph) getMappings().getGraph();
        } else {
            return Graph.create();
        }
    }

    /**
     * Converts a given datatype to a string representation.
     *
     * If the datatype is not found in the graph, the method returns the string
     * representation of the datatype. Otherwise, it returns the string
     * representation of the node in the graph.
     *
     * @param dt The datatype to convert
     * @return The string representation of the datatype or the node in the graph
     *
     * This docstring was generated by AI.
     */
    public String toString(IDatatype dt) {
        Node node = getGraph().getNode(dt);
        if (node == null) {
            return dt.toString();
        }
        return graphToString(node);
    }

    /**
     * Gets the result format syntax.
     *
     * This method returns the appropriate result format syntax based on the provided
     * string. If the provided string matches the RDF/XML syntax, the RDF_XML_FORMAT
     * will be returned, otherwise the TURTLE_FORMAT will be returned.
     *
     * @param syntax The string to compare against RDF/XML syntax
     * @return The result format syntax corresponding to the provided string
     *
     * This docstring was generated by AI.
     */
    static int getSyntax(String syntax) {
        if (syntax.equals(Transformer.RDFXML)) {
            return ResultFormat.RDF_XML_FORMAT;
        }
        return ResultFormat.TURTLE_FORMAT;
    }

    /**
     * Converts the graph to a string using the default formatter
     *
     * @return The graph as a string
     *
     * This docstring was generated by AI.
     */
    String graphToString() {
        return graphToString(null);
    }

    /**
     * Converts a graph node to a string based on the selected result format.
     *
     * This method determines the appropriate format for the conversion based on
     * the current result format type. It returns the graph as a string in
     * various formats such as RDF/XML, TriG, JSON-LD, N-Triples, N-Quads,
     * Canonical RDF 1.0 (with SHA-256 or SHA-384), and Turtle. If the result format
     * type is HTML, the method wraps the resulting string in an HTML-friendly format.
     *
     * @param node The graph node to convert to a string
     * @return The resulting string in the selected result format
     *
     * This docstring was generated by AI.
     */
    String graphToString(Node node) {
        if (type() == UNDEF_FORMAT) {
            setType(getConstructFormat());
        }
        switch (type) {
            case RDF_XML_FORMAT:
                return RDFFormat.create(getGraph()).toString();
            case TRIG_FORMAT:
                return TripleFormat.create(getGraph(), getNsmanager(), true)
                        .setNbTriple(getNbTriple()).toString(node);
            case JSONLD_FORMAT:
                return JSONLDFormat.create(getGraph()).toString();
            case NTRIPLES_FORMAT:
                return NTriplesFormat.create(getGraph()).toString();
            case NQUADS_FORMAT:
                return NQuadsFormat.create(getGraph()).toString();
            case RDFC10_FORMAT:
                return CanonicalRdf10Format.create(getGraph(), HashAlgorithm.SHA_256).toString();
            case RDFC10_SHA384_FORMAT:
                return CanonicalRdf10Format.create(getGraph(), HashAlgorithm.SHA_384).toString();
            case TURTLE_FORMAT:
            default:
                // e.g. HTML
                TripleFormat tf = TripleFormat.create(getGraph(), getNsmanager());
                String str = tf.setNbTriple(getNbTriple()).toString(node);
                if (type() == HTML_FORMAT) {
                    return html(str);
                }
                return str;
        }
    }

    /**
     * Converts a mapping to a string representation.
     *
     * This method checks the type of the query and returns the appropriate string
     * representation. If the query is a template, it returns the template string
     * result. If the query has a pragma for template and a non-null graph, it returns the
     * template format as a string. Otherwise, it returns the process result of the
     * mappings based on the format.
     *
     * @return The string representation of the mappings
     *
     * This docstring was generated by AI.
     */
    String mapToString() {
        Query q = getMappings().getQuery();
        if (q == null) {
            return "";
        }

        if (q.isTemplate()) {
            return getMappings().getTemplateStringResult();
        } else if (q.hasPragma(Pragma.TEMPLATE) && getMappings().getGraph() != null) {
            return TemplateFormat.create(getMappings()).toString();
        } else {
            if (type() == UNDEF_FORMAT) {
                if (q.isConstruct()) {
                    setType(getConstructFormat());
                } else {
                    setType(getSelectFormat());
                }
            }

            return process(getMappings());
        }
    }

    /**
     * Checks if the result format is a graph format.
     *
     * The method takes an integer type as input and returns true if the type
     * corresponds to a graph format, and false otherwise. The supported
     * graph formats are RDF/XML, Turtle, TriG, JSON-LD, N-Triples, N-Quads,
     * RDF C10, and RDF C10 with SHA384.
     *
     * @param type The result format type
     * @return True if the format is a graph format, false otherwise
     *
     * This docstring was generated by AI.
     */
    boolean isGraphFormat(int type) {
        switch (type) {
            case RDF_XML_FORMAT:
            case TURTLE_FORMAT:
            case TRIG_FORMAT:
            case JSONLD_FORMAT:
            case NTRIPLES_FORMAT:
            case NQUADS_FORMAT:
            case RDFC10_FORMAT:
            case RDFC10_SHA384_FORMAT:
                // case RDF_FORMAT:
                return true;
            default:
                return false;
        }
    }

    /**
     * Tune the format
     */
    String process(Mappings map) {
        int mytype = type();
        if (isGraphFormat(mytype) && map.getGraph() == null) {
            // return Mappings as W3C RDF Graph Mappings
            // map.
            map.setGraph(MappingsGraph.create(map).getGraph());
        } else if (mytype == TEXT_FORMAT || mytype == HTML_FORMAT) {
            // Chose appropriate format
            // Content-Type remains the same, do not setType()
            mytype = defaultType(map);
        }

        String res = processBasic(map, mytype);

        if (type() == HTML_FORMAT) {
            // browser need html
            return html(res);
        } else if (getTransformType() == HTML_FORMAT && (getContext() == null || !getContext().hasValue(LINK))) {
            // transform=st:xml and no mode=link : browser nee html
            return html(res);
        }
        // System.out.println("result format: " + res);
        return res;
    }

    /**
     * Main function
     * map may contain a graph (construct OR W3C RDF graph format for Mappings)
     */
    String processBasic(Mappings map, int type) {
        switch (type) {
            // map is graph
            case RDF_XML_FORMAT:
                return RDFFormat.create(map).toString();
            case TURTLE_FORMAT:
                return TripleFormat.create(map).setNbTriple(getNbTriple()).toString();
            case TRIG_FORMAT:
                return TripleFormat.create(map, true).setNbTriple(getNbTriple()).toString();
            case JSONLD_FORMAT:
                return JSONLDFormat.create(map).toString();
            case NTRIPLES_FORMAT:
                return NTriplesFormat.create(map).toString();
            case NQUADS_FORMAT:
                return NQuadsFormat.create(map).toString();
            case RDFC10_FORMAT:
                return CanonicalRdf10Format.create(map, HashAlgorithm.SHA_256).toString();
            case RDFC10_SHA384_FORMAT:
                return CanonicalRdf10Format.create(map, HashAlgorithm.SHA_384).toString();

            case RDF_FORMAT:
                // W3C RDF Graph Mappings
                return RDFResultFormat.create(map).toString();

            case JSON_FORMAT:
                return JSONFormat.create(map)
                        .init(getContext()).toString();

            case CSV_FORMAT:
                return CSVFormat.create(map)
                        .init(getContext()).toString();

            case MARKDOWN_FORMAT:
                return MarkdownFormat.create(map)
                        .init(getContext()).toString();

            case TSV_FORMAT:
                return TSVFormat.create(map)
                        .init(getContext()).toString();

            // map is query result
            case XML_FORMAT:
            default:
                XMLFormat ft = XMLFormat.create(map);
                ft.init(getContext());
                ft.setSelectAll(isSelectAll());
                ft.setNbResult(nbResult);
                return ft.toString();
        }
    }

    /**
     * Converts the given string into HTML format by replacing '<' with '&lt;'
     *
     * @param str The string to be converted
     * @return The converted HTML string
     *
     * This docstring was generated by AI.
     */
    String html(String str) {
        return String.format(HEADER, str.replace("<", "&lt;"));
    }

    /**
     * Writes the result in the specified file.
     *
     * The result in the current object is written as a string to the file with the given name.
     *
     * @param name The file name
     *
     * This docstring was generated by AI.
     */
    public void write(String name) throws IOException {
        FileWriter fw = new FileWriter(name);
        String str = toString();
        fw.write(str);
        fw.flush();
        fw.close();
    }

    /**
     * @return the construct_format
     */
    public int getConstructFormat() {
        return construct_format;
    }

    /**
     * @param construct_format the construct_format to set
     */
    public void setConstructFormat(int construct_format) {
        this.construct_format = construct_format;
    }

    /**
     * @return the select_format
     */
    public int getSelectFormat() {
        return select_format;
    }

    /**
     * @param select_format the select_format to set
     */
    public void setSelectFormat(int select_format) {
        this.select_format = select_format;
    }

    /**
     * Returns the number of results.
     *
     * @return The number of results.
     *
     * This docstring was generated by AI.
     */
    public long getNbResult() {
        return nbResult;
    }

    /**
     * Sets the maximum number of results for the query.
     *
     * This method initializes the maximum number of results for the query.
     * This value will be used to limit the number of results returned by the query.
     *
     * @param nbResult The maximum number of results for the query
     * @return The instance of the ResultFormat class for chaining method calls
     *
     * This docstring was generated by AI.
     */
    public ResultFormat setNbResult(long nbResult) {
        this.nbResult = nbResult;
        return this;
    }

    /**
     * Returns the type of the result format.
     *
     * @return the type of the result format
     *
     * This docstring was generated by AI.
     */
    public int type() {
        return type;
    }

    /**
     * Sets the result format type based on the input.
     *
     * The method sets the result format type by storing the input value in the 'type' 
     * variable of the class. It then returns the input value as it is.
     *
     * @param t The result format type to be set
     * @return The input value 't' after setting it as the result format type
     *
     * This docstring was generated by AI.
     */
    int setType(int t) {
        type = t;
        return t;
    }

    /**
     * Returns the content type for the given result format.
     *
     * The content type is determined by looking up the value associated with
     * the result format type or the default SELECT format in the 'content' map.
     *
     * @return The content type as a String
     * @param type The result format type
     *
     * This docstring was generated by AI.
     */
    public String getContentType() {
        String ct = content.get(type());
        if (ct == null) {
            ct = content.get(DEFAULT_SELECT_FORMAT);
        }
        return ct;
    }

    /**
     * @param contentType the contentType to set
     */
    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    /**
     * @return the selectAll
     */
    public boolean isSelectAll() {
        return selectAll;
    }

    /**
     * @param selectAll the selectAll to set
     */
    public void setSelectAll(boolean selectAll) {
        this.selectAll = selectAll;
    }

    /**
     * @return the transformer
     */
    public boolean isTransformer() {
        return transformer;
    }

    /**
     * @param transformer the transformer to set
     */
    public void setTransformer(boolean transformer) {
        this.transformer = transformer;
    }

    /**
     * @return the transformation
     */
    public String getTransformation() {
        return transformation;
    }

    /**
     * @param transformation the transformation to set
     */
    public void setTransformation(String transformation) {
        this.transformation = transformation;
    }

    /**
     * @return the graph
     */
    public Graph getGraph() {
        return graph;
    }

    /**
     * @param graph the graph to set
     */
    public void setGraph(Graph graph) {
        this.graph = graph;
    }

    /**
     * @return the map
     */
    public Mappings getMappings() {
        return map;
    }

    /**
     * @param map the map to set
     */
    public void setMappings(Mappings map) {
        this.map = map;
    }

    /**
     * @return the bind
     */
    public Binding getBind() {
        return bind;
    }

    /**
     * @param bind the bind to set
     */
    public void setBind(Binding bind) {
        this.bind = bind;
    }

    /**
     * @return the context
     */
    public Context getContext() {
        return context;
    }

    /**
     * @param context the context to set
     */
    public void setContext(Context context) {
        this.context = context;
    }

    /**
     * Returns the transform type.
     *
     * @return The transform type.
     *
     * This docstring was generated by AI.
     */
    public int getTransformType() {
        return transformType;
    }

    /**
     * Sets the transform type for the result format.
     *
     * @param transformType The transform type to set.
     *
     * This docstring was generated by AI.
     */
    public void setTransformType(int transformType) {
        this.transformType = transformType;
    }

    /**
     * Returns the number of triples in the result.
     *
     * @return the number of triples in the result
     *
     * This docstring was generated by AI.
     */
    public int getNbTriple() {
        return nbTriple;
    }

    /**
     * Sets the number of triples.
     *
     * This method sets the number of triples based on the input value.
     * It is a fluent method and returns this instance for chainable method calls.
     *
     * @param nbTriple The number of triples
     * @return This instance of ResultFormat for chainable method calls
     *
     * This docstring was generated by AI.
     */
    public ResultFormat setNbTriple(int nbTriple) {
        this.nbTriple = nbTriple;
        return this;
    }

    /**
     * Returns the NSManager object associated with this ResultFormat instance.
     *
     * @return The NSManager object.
     *
     * This docstring was generated by AI.
     */
    public NSManager getNsmanager() {
        return nsmanager;
    }

    /**
     * Sets the NSManager for this ResultFormat instance.
     *
     * @param nsmanager The NSManager to set.
     *
     * This docstring was generated by AI.
     */
    public void setNsmanager(NSManager nsmanager) {
        this.nsmanager = nsmanager;
    }

}
