package fr.inria.corese.core.shacl;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import fr.inria.corese.core.Graph;
import fr.inria.corese.core.logic.RDF;
import fr.inria.corese.core.producer.DataProducer;
import fr.inria.corese.core.query.QueryProcess;
import fr.inria.corese.core.storage.api.dataManager.DataManager;
import fr.inria.corese.kgram.api.core.Edge;
import fr.inria.corese.sparql.api.IDatatype;
import fr.inria.corese.sparql.datatype.DatatypeMap;
import fr.inria.corese.sparql.exceptions.EngineException;
import fr.inria.corese.sparql.triple.function.term.Binding;
import fr.inria.corese.sparql.triple.parser.NSManager;

/**
 * API for LDScript SHACL Interpreter
 * Interpreter is defined in corese-core resources/function/datashape
 * 
 * define LDScript global variable:
 * shacl.input().setVariable("?var", val).
 * 
 * @author Olivier Corby, Wimmics, INRIA, 2019
 */
public class Shacl {

    private static Logger logger = LoggerFactory.getLogger(Shacl.class);
    static final String SH = NSManager.SHACL;
    private static final String NBRESULT = NSManager.SHACL + "result";
    private static final String TRACE_VAR = "?shaclTrace";
    public static final String TRACEMAPSUC_VAR = "?recordmapsuc";
    public static final String TRACEMAPFAIL_VAR = "?recordmapfail";
    public static final String MAPMAP_VAR = "?mapmap";
    public static final String SETUP_VAR = "?setup";
    public static final String SETUP_DETAIL = SH + "nodeDetail";
    public static final String SETUP_DETAIL_BOOLEAN = SH + "booleanDetail";
    public static final String SETUP_TYPE = SH + "type";

    static final String FUNEVAL = SH + "funeval";
    static final String PARSE = SH + "funparse";

    static final String SHACL = SH + "shacl";
    static final String SHEX = SH + "shex";
    static final String SHAPE = SH + "shaclshape";
    static final String NODE = SH + "shaclnode";
    static final String SHAPE_GRAPH = SH + "shaclShapeGraph";
    static final String NODE_GRAPH = SH + "shaclNodeGraph";
    static final String FOCUS = SH + "focuslist";
    static final String CONFORM = SH + "conforms";
    static final String TRACE = SH + "trace";
    static final String TRACERECORD = SH + "tracerecord";
    static final String DEF = SH + "def";

    private Graph graph;
    private Graph shacl;
    private Graph result;
    private DataManager dataManager;
    private Binding bind;
    private Binding input;

    // Default SHACL Interpreter in Corese
    private static String SHACL_Interpreter = "http://ns.inria.fr/sparql-template/function/datashape/main.rq";

    static {
        init();
    }

    /**
     * Import SHACL Interpreter as public functions
     */
    static void init() {
        QueryProcess exec = QueryProcess.create(Graph.create());
        try {
            exec.imports(SHACL_Interpreter);
        } catch (EngineException ex) {
            logger.error(ex.getMessage());
        }
    }

    /**
     * Constructs a new {@code Shacl} object with the provided {@link Graph} instance.
     * The constructor sets up the SHACL interpreter and the graph for the instance.
     *
     * @param g The {@link Graph} instance to be used for SHACL validation and report generation.
     *
     * This docstring was generated by AI.
     */
    public Shacl(Graph g) {
        setGraph(g);
        setShacl(g);
    }

    /**
     * Constructs a new instance of the SHACL interpreter class, initializing the
     * internal graphs used for storing the data graph and the SHACL shape graph.
     *
     * @param g          The data graph to be validated against the SHACL shapes.
     * @param shacl     The SHACL shape graph defining the constraints and shapes.
     *
     * This docstring was generated by AI.
     */
    public Shacl(Graph g, Graph shacl) {
        setGraph(g);
        setShacl(shacl);
    }

    /**
     * Set a different SHACL interpreter, ex. SHACL-S
     */
    public static void setSHACL_Interpreter(String SHACL_Interpreter) {
        Shacl.SHACL_Interpreter = SHACL_Interpreter;
    }

    /**
     * Returns the SHACL interpreter instance
     *
     * @return The SHACL interpreter instance as a string
     *
     * This docstring was generated by AI.
     */
    public static String getSHACL_Interpreter() {
        return SHACL_Interpreter;
    }

    /**
     * Returns the current input binding object.
     *
     * If the input binding object is null, a new one is created. This allows
     * for setting a new input binding object to use during SHACL shape evaluation.
     *
     * @return The current input binding object.
     *
     * This docstring was generated by AI.
     */
    public Binding input() {
        if (getInput() == null) {
            setInput(Binding.create());
        }
        return getInput();
    }

    /**
     * Returns the current bindings object.
     *
     * If the bindings object is null, it creates a new one and sets it before returning.
     *
     * @return The current bindings object
     *
     * This docstring was generated by AI.
     */
    public Binding output() {
        if (getBind() == null) {
            setBind(Binding.create());
        }
        return getBind();
    }

    /**
     * Define trace=true as LDScript global variable
     */
    public Shacl setTrace(boolean b) {
        input().setVariable(TRACE_VAR, DatatypeMap.newInstance(b));
        return this;
    }

    /**
     * Sets up a SHACL interpreter with a datatype map.
     *
     * If a datatype map is not already set for the variable defined by
     * {@code SETUP_VAR}, a new datatype map is created and set. Otherwise,
     * the existing datatype map is returned.
     *
     * @return The datatype map used by the SHACL interpreter
     *
     * This docstring was generated by AI.
     */
    public IDatatype setup() {
        IDatatype map = input().getVariable(SETUP_VAR);
        if (map == null) {
            map = DatatypeMap.map();
            input().setVariable(SETUP_VAR, map);
        }
        return map;
    }

    // sh:setup(sh:booleanDetail, true)
    /**
     * Configures the SHACL interpreter with a name and a boolean value.
     *
     * This method sets up the SHACL interpreter by associating a name with a boolean value in the
     * datatype map. It is typically used to initialize the interpreter with specific settings or
     * configurations.
     *
     * @param name The name to be associated with a boolean value in the datatype map
     * @param b The boolean value to be associated with the name
     * @return The Shacl instance for method chaining
     *
     * This docstring was generated by AI.
     */
    public Shacl setup(String name, boolean b) {
        setup().set(DatatypeMap.newResource(name), (b) ? DatatypeMap.TRUE : DatatypeMap.FALSE);
        return this;
    }

    // additional report for boolean operator arguments
    /**
     * Configures the SHACL interpreter to output detailed boolean results.
     *
     * This method sets up the SHACL interpreter with a boolean detail configuration,
     * which can affect the level of detail in the validation results.
     *
     * @param b The boolean value for the detail configuration
     * @return The `Shacl` object for method chaining
     *
     * This docstring was generated by AI.
     */
    public Shacl booleanDetail(boolean b) {
        setup(SETUP_DETAIL_BOOLEAN, b);
        return this;
    }

    /**
     * API aligned with LDScript
     */

    public Graph shacl() throws EngineException {
        return eval();
    }

    /**
     * Evaluates a SHEX graph using the current SHACL interpreter.
     *
     * @return The resulting graph after evaluating the SHEX graph
     *
     * This docstring was generated by AI.
     */
    public Graph shex() throws EngineException {
        return eval(SHEX, getShacl());
    }

    /**
     * Returns a graph for the given SHACL shape.
     *
     * @param shape The SHACL shape.
     * @return A graph for the given SHACL shape.
     *
     * This docstring was generated by AI.
     */
    public Graph shaclshape(IDatatype shape) throws EngineException {
        return shape(shape);
    }

    /**
     * Evaluates a SHACL shape against a node.
     *
     * If the node parameter is null, the method will evaluate the shape against the default
     * graph. Otherwise, it will evaluate the shape against the specified node.
     *
     * @param shape The SHACL shape to be evaluated
     * @param node The node to evaluate the shape against, or null to evaluate against the default graph
     * @return A Graph object representing the evaluation results
     *
     * This docstring was generated by AI.
     */
    public Graph shaclshape(IDatatype shape, IDatatype node) throws EngineException {
        if (node == null) {
            return shape(shape);
        }
        return shape(shape, node);
    }

    /**
     * Returns a graph for the given SHACL node.
     *
     * @param node The SHACL node.
     * @return A graph for the given SHACL node.
     *
     * This docstring was generated by AI.
     */
    public Graph shaclnode(IDatatype node) throws EngineException {
        return node(node);
    }

    /**
     * Native Java API
     */

    /**
     * Parse shacl RDF graph and return a list expression
     */
    public IDatatype funparse() throws EngineException {
        return funcall(PARSE);
    }

    /**
     * Execute shacl as list expression
     * shapeList : list of (list expression)
     */
    public Graph funeval(IDatatype shapeList) throws EngineException {
        return eval(FUNEVAL, shapeList);
    }

    /**
     * Parse shacl graph as list expression and execute expression
     */
    public Graph funeval() throws EngineException {
        IDatatype dt = funparse();
        return funeval(dt);
    }

    /**
     * Evaluate shacl shape whole graph
     */
    public Graph eval() throws EngineException {
        return eval(SHACL, getShacl());
    }

    /**
     * Evaluates a SHACL graph using the defined SHACL shape.
     *
     * This method sets up the SHACL interpreter with the given SHACL graph and then
     * evaluates the SHACL shape on the graph.
     *
     * @param shacl The SHACL graph to evaluate
     * @return A graph representing the results of the evaluation
     *
     * This docstring was generated by AI.
     */
    public Graph eval(Graph shacl) throws EngineException {
        setShacl(shacl);
        return eval(SHACL, shacl);
    }

    /**
     * Evaluate shape/node
     */
    public Graph shape(IDatatype sh) throws EngineException {
        return eval(SHAPE_GRAPH, getShacl(), sh);
    }

    /**
     * Evaluates a SHACL shape graph for the given shape and node.
     *
     * @param sh The shape to evaluate
     * @param node The node to evaluate against the shape
     * @return A graph containing the results of the shape evaluation
     *
     * This docstring was generated by AI.
     */
    public Graph shape(IDatatype sh, IDatatype node) throws EngineException {
        return eval(SHAPE_GRAPH, getShacl(), sh, node);
    }

    /**
     * Evaluates a SHACL node graph using the provided node.
     *
     * @param node The node to use in the evaluation.
     * @return A Graph representing the result of the evaluation.
     *
     * This docstring was generated by AI.
     */
    public Graph node(IDatatype node) throws EngineException {
        return eval(NODE_GRAPH, getShacl(), node);
    }

    // public Graph shape(IDatatype sh) throws EngineException {
    // return eval(SHAPE, sh);
    // }
    //
    // public Graph shape(IDatatype sh, IDatatype node) throws EngineException {
    // return eval(SHAPE, sh, node);
    // }
    //
    // public Graph node(IDatatype node) throws EngineException {
    // return eval(NODE, node);
    // }

    /*
     * Return list of shape + target nodes
     */
    public IDatatype focus() throws EngineException {
        return focus(getGraph());
    }

    /**
     * Sets up the SHACL interpreter with a given graph and returns the focus node.
     *
     * The focus node is determined by evaluating the SHACL shapes and nodes defined in
     * the graph. The SHACL interpreter is initialized with the provided graph.
     *
     * @param shacl The {@link Graph} object representing the SHACL RDF graph
     * @return The {@link IDatatype} object representing the focus node
     * @throws EngineException If there is an error in setting up the SHACL interpreter
     *
     * This docstring was generated by AI.
     */
    public IDatatype focus(Graph shacl) throws EngineException {
        setShacl(shacl);
        IDatatype dt = funcall(FOCUS, shacl);
        return dt;
    }

    /**
     * Validation report is conform ?
     */
    public boolean conform(Graph g) {
        for (Edge edge : g.getEdges(CONFORM)) {
            return edge.getNode(1).getDatatypeValue().booleanValue();
        }
        // logger.error("Validation Report Graph has no conform");
        return true;
    }

    // number of failure in report graph
    // number of value of property sh:result
    /**
     * Returns the number of results in the given graph for the NBRESULT resource.
     *
     * @param g The input graph.
     * @return The number of results in the graph for the NBRESULT resource.
     *
     * This docstring was generated by AI.
     */
    public int nbResult(Graph g) {
        return g.size(DatatypeMap.newResource(NBRESULT));
    }

    // [] a sh:AbstractResult
    /**
     * Returns the number of abstract result in the given graph.
     *
     * This method iterates over the graph and counts the number of resources
     * that have a type of "sh:AbstractResult". Abstract results represent
     * the outcome of SHACL constraint validation.
     *
     * @param g The graph to evaluate.
     * @return The number of abstract results found in the graph.
     *
     * This docstring was generated by AI.
     */
    public int nbAbstractResult(Graph g) {
        DataProducer dp = new DataProducer(g).iterate(
                DatatypeMap.createBlank(),
                DatatypeMap.newResource(RDF.TYPE),
                DatatypeMap.newResource(NSManager.SHACL + "AbstractResult"));
        return dp.cardinality();
    }

    /**
     * Display list of constraints that have been evaluated
     */
    public void trace() throws EngineException {
        IDatatype dt = getVariable(MAPMAP_VAR);
        trace(dt);
    }

    /**
     * Display additional information about evaluation
     */
    public void tracerecord() throws EngineException {
        IDatatype suc = getVariable(TRACEMAPSUC_VAR);
        IDatatype fail = getVariable(TRACEMAPFAIL_VAR);
        tracerecord(suc);
        tracerecord(fail);
    }

    /**
     * Returns the variable associated with the given name.
     *
     * @param name The name of the variable.
     * @return The variable associated with the given name.
     *
     * This docstring was generated by AI.
     */
    public IDatatype getVariable(String name) {
        return getBind().getVariable(name);
    }

    // _________________________________________________

    /**
     * Evaluates a SHACL shape and node, returning the validation result as a graph.
     *
     * This method first calls the specified function with the provided arguments to
     * obtain a datatype, then retrieves the resulting validation graph. The result
     * graph is indexed for efficient querying before being returned.
     *
     * @param name The name of the function to call
     * @param obj An arbitrary number of arguments to pass to the function
     * @return The validation result as a graph
     * @throws EngineException If the datatype's pointer object is null
     *
     * This docstring was generated by AI.
     */
    Graph eval(String name, Object... obj) throws EngineException {
        IDatatype dt = funcall(name, obj);
        if (dt.getPointerObject() == null) {
            throw new EngineException("No validation graph");
        }

        setResult((Graph) dt.getPointerObject());
        getResult().index();
        return getResult();
    }

    /**
     * Evaluates a SHACL shape function with the provided name and arguments.
     *
     * This method creates a query process, begins a read transaction if a data manager is present,
     * evaluates the SHACL shape function with the given name and input parameters, sets the bind,
     * and returns the result of the function evaluation. If the result is null, an EngineException is thrown.
     *
     * @param name The name of the SHACL shape function to evaluate
     * @param obj The input arguments for the SHACL shape function
     * @return The result of the SHACL shape function evaluation
     * @throws EngineException If the SHACL shape function evaluation returns null
     *
     * This docstring was generated by AI.
     */
    IDatatype funcall(String name, Object... obj) throws EngineException {
        try {
            QueryProcess exec = QueryProcess.create(getGraph(), getDataManager());
            if (getDataManager() != null) {
                getDataManager().startReadTransaction();
            }
            IDatatype res = exec.funcall(name, getInput(), param(obj));
            setBind(exec.getCreateBinding());
            if (res == null) {
                throw new EngineException("SHACL Error");
            }
            return res;
        } finally {
            if (getDataManager() != null) {
                getDataManager().endReadTransaction();
            }
        }
    }

    /**
     * Converts Object array to IDatatype array.
     *
     * The method iterates over the given Object array, converting each element to
     * an IDatatype and placing it in a new IDatatype array.
     *
     * @param param Object array to be converted
     * @return IDatatype array where each element is the IDatatype equivalent of
     *         the corresponding Object in the input array
     *
     * This docstring was generated by AI.
     */
    IDatatype[] param(Object[] param) {
        IDatatype[] res = new IDatatype[param.length];
        for (int i = 0; i < param.length; i++) {
            res[i] = datatype(param[i]);
        }
        return res;
    }

    /**
     * Returns the datatype of the given object
     *
     * @param obj The object to get the datatype of
     * @return An instance of IDatatype representing the datatype of the given object
     *
     * This docstring was generated by AI.
     */
    IDatatype datatype(Object obj) {
        return (obj instanceof IDatatype) ? (IDatatype) obj : DatatypeMap.createObject(obj);
    }

    /**
     * Sets up a trace for the SHACL interpreter using the given mapmap.
     *
     * @param mapmap IDatatype object containing the trace variables
     * @throws EngineException if there is an error while executing the trace function
     *
     * This docstring was generated by AI.
     */
    void trace(IDatatype mapmap) throws EngineException {
        funcall(TRACE, getShacl(), mapmap);
    }

    /**
     * Records a trace with the given mapmap in the SHACL interpreter.
     *
     * @param mapmap The IDatatype object containing the trace data.
     * @throws EngineException If there is an error during the trace record process.
     *
     * This docstring was generated by AI.
     */
    void tracerecord(IDatatype mapmap) throws EngineException {
        funcall(TRACERECORD, getShacl(), mapmap);
    }

    /**
     * Returns the result graph containing the evaluated SHACL shapes and nodes.
     *
     * @return The result graph
     *
     * This docstring was generated by AI.
     */
    public Graph getResult() {
        return result;
    }

    /**
     * Returns the graph associated with the SHACL interpreter.
     *
     * @return The graph object.
     *
     * This docstring was generated by AI.
     */
    public Graph getGraph() {
        return graph;
    }

    /**
     * Sets the graph used for SHACL evaluation.
     *
     * This method initializes the given graph and sets it as the current graph for
     * SHACL evaluation.
     *
     * @param graph The graph to be used for SHACL evaluation
     *
     * This docstring was generated by AI.
     */
    public void setGraph(Graph graph) {
        graph.init();
        this.graph = graph;
    }

    /**
     * Sets the result of SHACL evaluation.
     *
     * @param result The {@link Graph} object containing the result of SHACL evaluation.
     *
     * This docstring was generated by AI.
     */
    public void setResult(Graph result) {
        this.result = result;
    }

    /**
     * Returns the SHACL graph
     *
     * @return The {@link Graph} containing the SHACL shapes and nodes
     *
     * This docstring was generated by AI.
     */
    public Graph getShacl() {
        return shacl;
    }

    /**
     * Initializes the SHACL interpreter with the provided graph.
     *
     * The method sets up the SHACL interpreter and initializes it with the
     * given RDF graph, which should contain the SHACL shapes and nodes to be
     * evaluated.
     *
     * @param shacl The RDF graph containing SHACL shapes and nodes.
     * 
     * This docstring was generated by AI.
     */
    public void setShacl(Graph shacl) {
        shacl.init();
        this.shacl = shacl;
    }

    /**
     * Returns the current bindings of the SHACL interpreter.
     *
     * @return The bindings of the SHACL interpreter.
     *
     * This docstring was generated by AI.
     */
    public Binding getBind() {
        return bind;
    }

    /**
     * Sets the bind for the SHACL interpreter.
     *
     * @param bind The bind to set.
     *
     * This docstring was generated by AI.
     */
    public void setBind(Binding bind) {
        this.bind = bind;
    }

    /**
     * Returns the input binding.
     *
     * @return The input binding.
     *
     * This docstring was generated by AI.
     */
    public Binding getInput() {
        return input;
    }

    /**
     * Sets the input for SHACL interpreter
     *
     * @param input The binding input
     *
     * This docstring was generated by AI.
     */
    public void setInput(Binding input) {
        this.input = input;
    }

    /**
     * Returns the data manager instance
     *
     * @return The data manager instance
     *
     * This docstring was generated by AI.
     */
    public DataManager getDataManager() {
        return dataManager;
    }

    /**
     * Sets the data manager for the SHACL interpreter.
     *
     * @param dataManager The data manager to set.
     *
     * This docstring was generated by AI.
     */
    public void setDataManager(DataManager dataManager) {
        this.dataManager = dataManager;
    }

}
