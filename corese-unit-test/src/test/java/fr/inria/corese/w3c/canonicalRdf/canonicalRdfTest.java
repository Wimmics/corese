package fr.inria.corese.w3c.canonicalRdf;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import fr.inria.corese.core.Graph;
import fr.inria.corese.core.load.Load;
import fr.inria.corese.core.load.LoadException;
import fr.inria.corese.core.print.CanonicalRdf10Format;
import fr.inria.corese.core.print.rdfc10.CanonicalRdf10.CanonicalizationException;
import fr.inria.corese.core.print.rdfc10.HashingUtility.HashAlgorithm;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import java.util.Scanner;
import org.junit.AssumptionViolatedException;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;
import static org.junit.Assert.assertEquals;

/**
 * Auto-generated JUnit test file for the W3C test suite: https://w3c.github.io/rdf-canon/tests/manifest.ttl
 * This file was automatically generated by JUnitTestFileGenerator.java.
 * Generation date: 2024-04-11, Time: 16:06:27 Europe/Paris
 */
public class canonicalRdfTest {

    private static final String TEST_REPORT_FILE = "/home/rceres/Documents/projects/Corese/code/corese/corese-unit-test/src/test/java/fr/inria/corese/w3c/canonicalRdf/testReport.csv";
    private static final String MANIFEST_URI = "https://w3c.github.io/rdf-canon/tests/manifest";
    private static final String EARL = "http://www.w3.org/ns/earl#";

    /**
     * Writes the test report to the file testReport.csv.
     *
     * @param testName The name of the test.
     * @param success  The status of the test.
     */
    private void writeTestReport(String testName, String success) {
        try {
            Path testReportPath = Paths.get(TEST_REPORT_FILE);
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssXXX");
            Files.write(testReportPath, (MANIFEST_URI + "#" + testName + "," + dtf.format(ZonedDateTime.now()) + "," + EARL + success + "\n").getBytes(), StandardOpenOption.APPEND);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Rule
    public TestWatcher watcher = new TestWatcher() {

        @Override
        protected void failed(Throwable e, Description description) {
            writeTestReport(description.getMethodName(), "failed");
        }

        @Override
        protected void succeeded(Description description) {
            writeTestReport(description.getMethodName(), "passed");
        }

        @Override
        protected void skipped(AssumptionViolatedException e, Description description) {
            writeTestReport(description.getMethodName(), "untested");
        }
    };

        // Create and clear the test report file
        @BeforeClass
        public static void createTestReportFile() {
            try {
                Path testReportPath = Paths.get(TEST_REPORT_FILE);
                Files.write(testReportPath, "".getBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    // simple id
    @Test
    public void test001c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test001-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test001-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // duplicate property iri values
    @Test
    public void test002c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test002-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test002-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // bnode
    @Test
    public void test003c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test003-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test003-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // bnode (map test)
    @Test
    public void test003m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test003-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test003-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // bnode plus embed w/subject
    @Test
    public void test004c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test004-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test004-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // bnode plus embed w/subject (map test)
    @Test
    public void test004m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test004-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test004-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // bnode embed
    @Test
    public void test005c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test005-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test005-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // bnode embed (map test)
    @Test
    public void test005m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test005-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test005-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // multiple rdf types
    @Test
    public void test006c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test006-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test006-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // single subject complex
    @Test
    public void test008c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test008-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test008-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // multiple subjects - complex
    @Test
    public void test009c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test009-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test009-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // type
    @Test
    public void test010c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test010-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test010-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // type-coerced type
    @Test
    public void test011c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test011-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test011-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // type-coerced type, cycle
    @Test
    public void test013c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test013-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test013-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // check types
    @Test
    public void test014c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test014-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test014-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - dual link - embed
    @Test
    public void test016c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test016-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test016-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - dual link - embed (map test)
    @Test
    public void test016m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test016-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test016-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // blank node - dual link - non-embed
    @Test
    public void test017c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test017-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test017-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - dual link - non-embed (map test)
    @Test
    public void test017m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test017-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test017-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // blank node - self link
    @Test
    public void test018c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test018-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test018-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - self link (map test)
    @Test
    public void test018m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test018-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test018-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // blank node - disjoint self links
    @Test
    public void test019c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test019-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test019-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - diamond
    @Test
    public void test020c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test020-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test020-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - diamond (map test)
    @Test
    public void test020m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test020-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test020-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // blank node - circle of 2
    @Test
    public void test021c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test021-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test021-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - double circle of 2
    @Test
    public void test022c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test022-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test022-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - circle of 3
    @Test
    public void test023c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test023-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test023-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - double circle of 3 (0-1-2)
    @Test
    public void test024c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test024-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test024-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - double circle of 3 (0-2-1)
    @Test
    public void test025c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test025-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test025-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - double circle of 3 (1-0-2)
    @Test
    public void test026c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test026-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test026-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - double circle of 3 (1-2-0)
    @Test
    public void test027c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test027-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test027-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - double circle of 3 (2-1-0)
    @Test
    public void test028c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test028-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test028-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - double circle of 3 (2-0-1)
    @Test
    public void test029c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test029-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test029-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - point at circle of 3
    @Test
    public void test030c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test030-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test030-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - point at circle of 3 (map test)
    @Test
    public void test030m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test030-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test030-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // disjoint identical subgraphs (1)
    @Test
    public void test033c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test033-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test033-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // disjoint identical subgraphs (2)
    @Test
    public void test034c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test034-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test034-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // reordered w/strings (1)
    @Test
    public void test035c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test035-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test035-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // reordered w/strings (2)
    @Test
    public void test036c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test036-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test036-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // reordered 4 bnodes, reordered 2 properties (1)
    @Test
    public void test038c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test038-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test038-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // reordered 4 bnodes, reordered 2 properties (2)
    @Test
    public void test039c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test039-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test039-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // reordered 6 bnodes (1)
    @Test
    public void test040c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test040-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test040-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // literal with language
    @Test
    public void test043c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test043-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test043-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // poison – evil (1)
    // A poison graph which is computable given defined limits.
    @Test
    public void test044c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test044-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test044-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // poison – evil (2)
    // A poison graph which is computable given defined limits.
    @Test
    public void test045c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test045-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test045-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // poison – evil (3)
    // A poison graph which is computable given defined limits.
    @Test
    public void test046c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test046-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test046-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // deep diff (1)
    @Test
    public void test047c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test047-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test047-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // deep diff (1) (map test)
    @Test
    public void test047m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test047-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test047-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // deep diff (2)
    @Test
    public void test048c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test048-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test048-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // deep diff (2) (map test)
    @Test
    public void test048m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test048-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test048-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // @list
    // RDF Collections using rdf:first/rest ladders.
    @Test
    public void test053c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test053-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test053-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // @list (map test)
    // RDF Collections using rdf:first/rest ladders.
    @Test
    public void test053m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test053-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test053-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // t-graph
    @Test
    public void test054c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test054-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test054-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // simple reorder (1)
    @Test
    public void test055c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test055-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test055-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // simple reorder (1) (map test)
    @Test
    public void test055m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test055-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test055-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // simple reorder (2)
    @Test
    public void test056c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test056-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test056-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // simple reorder (2) (map test)
    @Test
    public void test056m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test056-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test056-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // unnamed graph
    @Test
    public void test057c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test057-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test057-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // unnamed graph (map test)
    @Test
    public void test057m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test057-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test057-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // unnamed graph with blank node objects
    @Test
    public void test058c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test058-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test058-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // n-quads parsing
    @Test
    public void test059c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test059-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test059-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // n-quads escaping
    @Test
    public void test060c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test060-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test060-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // n-quads escaping (map test)
    @Test
    public void test060m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test060-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test060-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // same literal value with multiple languages
    @Test
    public void test061c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test061-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test061-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // same literal value with multiple datatypes
    @Test
    public void test062c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test062-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test062-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - diamond (with _:b)
    // This duplicates #test020, but uses _:b as a blank node prefix
    @Test
    public void test063c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test063-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test063-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - diamond (with _:b) (map test)
    // This duplicates #test020, but uses _:b as a blank node prefix
    @Test
    public void test063m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test063-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test063-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // blank node - double circle of 3 (0-1-2, reversed)
    @Test
    public void test064c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test064-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test064-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - double circle of 3 (0-2-1, reversed)
    @Test
    public void test065c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test065-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test065-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - double circle of 3 (1-0-2, reversed)
    @Test
    public void test066c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test066-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test066-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - double circle of 3 (1-2-0, reversed)
    @Test
    public void test067c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test067-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test067-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - double circle of 3 (2-1-0, reversed)
    @Test
    public void test068c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test068-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test068-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - double circle of 3 (2-0-1, reversed)
    @Test
    public void test069c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test069-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test069-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // dataset - isomorphic default and iri named
    // Isomorphic graphs in default and IRI named graph
    @Test
    public void test070c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test070-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test070-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // dataset - isomorphic default and iri named (map test)
    // Isomorphic graphs in default and IRI named graph
    @Test
    public void test070m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test070-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test070-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // dataset - isomorphic default and node named
    // Isomorphic graphs in default and blank node named graph
    @Test
    public void test071c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test071-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test071-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // dataset - isomorphic default and node named (map test)
    // Isomorphic graphs in default and blank node named graph
    @Test
    public void test071m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test071-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test071-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // dataset - shared blank nodes
    // Blank nodes shared in default and named graph
    @Test
    public void test072c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test072-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test072-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // dataset - shared blank nodes (map test)
    // Blank nodes shared in default and named graph
    @Test
    public void test072m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test072-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test072-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // dataset - referencing graph name
    // Default graph with blank node shared with graph name
    @Test
    public void test073c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test073-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test073-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // dataset - referencing graph name (map test)
    // Default graph with blank node shared with graph name
    @Test
    public void test073m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test073-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test073-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // poison - Clique Graph (negative test)
    // A 10-node Clique of blank node resources all inter-related.
    @Test(expected = CanonicalizationException.class)
    public void test074c() throws IOException, LoadException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test074-in.nq");

        // Attempt to create canonical RDF 1.0 format, expecting a failure
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        // This line should trigger the CanonicalizationException
        rdfc10.toString();
    }

    // blank node - diamond (uses SHA-384)
    // Same as test020 except for using SHA-384
    @Test
    public void test075c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test075-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph, HashAlgorithm.SHA_384);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test075-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // blank node - diamond (uses SHA-384) (map test)
    // Same as test020 except for using SHA-384
    @Test
    public void test075m() throws LoadException, IOException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.setRenameBlankNode(false);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test075-in.nq");

        // Create canonical RDF 1.0 format and get map of issued identifiers
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph, HashAlgorithm.SHA_384);
        Map<String, String> result = rdfc10.getIssuedIdentifiersMap();

        // Load map from result json file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test075-rdfc10map.json");
        Map<String, String> expect = new ObjectMapper().readValue(url, new TypeReference<Map<String, String>>(){});

        // Compare the two maps
        assertEquals(expect, result);
    }

    // duplicate ground triple in input
    // The duplicate triples must be removed
    @Test
    public void test076c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test076-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test076-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

    // duplicate triple with blank node in input
    // The duplicate triples must be removed
    @Test
    public void test077c() throws IOException, LoadException, URISyntaxException {
        // Create graph and load action file
        Graph graph = Graph.create();
        Load ld = Load.create(graph);
        ld.parse("https://w3c.github.io/rdf-canon/tests/rdfc10/test077-in.nq");

        // Create canonical RDF 1.0 format and convert graph to string
        CanonicalRdf10Format rdfc10 = CanonicalRdf10Format.create(graph);
        String result = rdfc10.toString();

        // Load expected result file
        URL url = new URL("https://w3c.github.io/rdf-canon/tests/rdfc10/test077-rdfc10.nq");
        Scanner scanner = new Scanner(url.openStream(), "UTF-8");
        scanner.useDelimiter("\\A");
        String expected = scanner.hasNext() ? scanner.next() : "";
        scanner.close();

        assertEquals(expected, result);
    }

}