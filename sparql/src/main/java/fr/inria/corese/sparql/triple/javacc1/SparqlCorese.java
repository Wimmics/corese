/* SparqlCorese.java */
/* Generated By:JavaCC: Do not edit this line. SparqlCorese.java */
        package fr.inria.corese.sparql.triple.javacc1;

        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;

        import java.util.List;
        import java.util.ArrayList;
        import java.util.Vector;
        import fr.inria.corese.sparql.triple.cst.RDFS;
        import fr.inria.corese.sparql.triple.parser.*;
        import fr.inria.corese.sparql.triple.function.script.*;
        import fr.inria.corese.sparql.triple.update.*;
        import fr.inria.corese.sparql.triple.api.Creator;
        import fr.inria.corese.sparql.api.IDatatype;
        import fr.inria.corese.sparql.datatype.DatatypeMap;


  /**
  * <p>Title: Corese</p>
  * <p>Description: A Semantic Search Engine</p>
  * <p>Copyright: Copyright INRIA (c) 2006</p>
  * <p>Company: INRIA</p>
  * <p>Project: Acacia</p>
  * <br>
  * This file defines the SPARQL/Corese grammar; it's from it, that we create 
  * the 7 others classes, thanks to the JavaCC technology.
  * <br>
  * @author Virginie Bottollier
  */
  public class SparqlCorese implements SparqlCoreseConstants {

    /** An instanciation of the class Parser */
    //Parser parser;
    /** An instanciation of the class ASTQuery (a graph representing the query) */
    ASTQuery astq, gast;
    ASTUpdate astu;
    ASTTemplate astt;
    Basic prolog;
    Creator create;
    ParserHandler handler;

    /** should we say to the user when he uses something deprecated? (option, sort, or, source, as...) */
    boolean printDeprecated = true;

        /** logger from log4j */
        //private static Logger logger = LogManager.getLogger(SparqlCorese.class);
        private static Logger logger = LoggerFactory.getLogger(SparqlCorese.class);

    /** To show some printings */
    boolean show = false;
    /** To show some printings about the part of the parser which deals with Expression */
    boolean debug2 = show && false;
    static final String THIS = "?this";

        public void setASTQuery(ASTQuery aq) {
                astq = aq;
                gast = aq;
        }

        public void set(Creator c){
            create = c;
            if (handler != null) {
                handler.setCreator(c);
            }
        }

        public void setHandler(ParserHandler h) {
            handler = h;
            handler.setParser(this);
        }

        public ParserHandler getHandler() {
            return handler;
        }

        /**
	* @param s1 = the string deprecated
	* @param s2 = how to replace s1
	*/
        public void deprecated(String s1, String s2) {
                if (printDeprecated) {
                        logger.debug("*** \""+s1+"\" is deprecated, you should use \""+s2+"\" instead");
                }
        }

  // Method for converting Unicode escape sequences \\uxxxx and \\Uxxxxxxxx
  String convertUnicodeSequences(String str) {
      StringBuilder sb = new StringBuilder();
      for (int i = 0; i < str.length(); i++) {
          char ch = str.charAt(i);
          // Checks whether the current character is a backslash and whether there is another character before it
          if (ch == '\\' && i + 1 < str.length()) {
              // Checks whether it is a literal escape sequence (preceded by a backslash)
              if (i > 0 && str.charAt(i - 1) == '\\') {
                  sb.append(ch);
                  continue;
              }

              char nextCh = str.charAt(i + 1);
              if (nextCh == 'u' && i + 5 < str.length()) { // Manage \\uxxxx
                  int code = Integer.parseInt(str.substring(i + 2, i + 6), 16);
                  sb.append(Character.toChars(code));
                  i += 5; // Skip escape sequence

              } else if (nextCh == 'U' && i + 9 < str.length()) { // Manage \\Uxxxxxxxx
                  int code = Integer.parseInt(str.substring(i + 2, i + 10), 16);
                  for (char c : Character.toChars(code)) {
                      sb.append(c);
                  }
                  i += 9; // Skip escape sequence
              } else {
                  sb.append(ch); // If this is not an escape sequence, add the character as is
              }
          } else {
              // Handles the case where a literal backslash is immediately followed by another character (not 'u' or 'U')
              if (ch == '\\' && i > 0 && str.charAt(i - 1) == '\\') {
                  // Do nothing here to avoid adding the literal backslash a second time
              } else {
                  sb.append(ch);
              }
          }
      }
      return sb.toString();
  }


        public ParseException createStopException() {
            return new ParseException("stop");
        }

    /**
     * @throws JavaccParseException
     * @throws TokenMgrError
     * @return
     */
    public ASTQuery parse() throws JavaccParseException, TokenMgrError {
        Exp ex;
        astu = ASTUpdate.create();
        try {
                ex = Start();
        } catch (ParseException e) {
                throw new JavaccParseException(e);
        }
        catch (Error e) {
            throw new JavaccParseException(e);
        }
        if (show)
                for (int i = 0; i<ex.size();i++) {
                        logger.debug("sparql-parser - ex.get("+i+"): "+ex.get(i));
                }

        astq.setBody(ex);
        return astq;
    }


    public ASTQuery load() throws JavaccParseException, TokenMgrError {
        astu = ASTUpdate.create();
        try {
          Exp exp = LoadPattern();
          astq.setBody(exp);
        }
        catch(ParseException e) {
            if (e.getMessage().equals("stop")) {
                throw new JavaccParseException();
            }
            throw new JavaccParseException(e);
        }
        return astq;
    }

    public ASTQuery nquad() throws JavaccParseException, TokenMgrError {
        astu = ASTUpdate.create();
        try {
          Exp exp = nquadPattern();
          astq.setBody(exp);
        }
        catch(ParseException e) {
            throw new JavaccParseException(e);
        }
        return astq;
    }

    boolean isLoad() {
        return create != null;
    }

    void defNamespace(String p, String ns){
        astq.defNamespace(p, ns);
        astu.defNamespace(p, ns);
    }

    void defBase(String s){
        astq.defBase(s);
        astu.defBase(s);
    }

    Metadata metadata(Metadata global, Metadata local) {
        if (local == null) {
            return global;
        }
        else {
            local.setMetadata(global);
            return local;
        }
    }

  final public Exp Start() throws ParseException {Exp stack;
stack = new And();
    stack = Query();
    jj_consume_token(0);
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public Exp Rule() throws ParseException {Exp stack;
stack = new And();
    Prolog();
    stack = GroupGraphPattern();
    jj_consume_token(0);
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public Exp Query() throws ParseException {Exp stack; Metadata global=null, la = null;
stack = BasicGraphPattern.create();
    Prolog();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATPATH:
    case LANGTAG:
    case SELECT:
    case DESCRIBE:
    case CONSTRUCT:
    case RULE:
    case ASK:
    case TEMPLATE:
    case LOAD:
    case CLEAR:
    case DROP:
    case CREATE:
    case ADD:
    case MOVE:
    case COPY:
    case INSERT:
    case DELETE:
    case WITH:
    case FUNCTION:
    case PACKAGE:
    case LBRACE:{
      la = Annotate();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELECT:
      case DESCRIBE:
      case CONSTRUCT:
      case RULE:
      case ASK:
      case TEMPLATE:
      case LOAD:
      case CLEAR:
      case DROP:
      case CREATE:
      case ADD:
      case MOVE:
      case COPY:
      case INSERT:
      case DELETE:
      case WITH:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SELECT:{
astq.setAnnotation(la);
          stack = SelectQuery(la);
          break;
          }
        case CONSTRUCT:
        case RULE:{
          stack = ConstructQuery(la);
          break;
          }
        case DESCRIBE:{
          stack = DescribeQuery(la);
          break;
          }
        case ASK:{
          stack = AskQuery(la);
          break;
          }
        case LOAD:
        case CLEAR:
        case DROP:
        case CREATE:
        case ADD:
        case MOVE:
        case COPY:
        case INSERT:
        case DELETE:
        case WITH:{
          UpdateQuery(la);
          break;
          }
        case TEMPLATE:{
          stack = TemplateQuery(la);
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Defun();
        break;
        }
      case FUNCTION:
      case PACKAGE:
      case LBRACE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:{
          Function(global, la);
          break;
          }
        case PACKAGE:
        case LBRACE:{
          Package(la);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Defun();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public void Defun() throws ParseException {Metadata global = null, la = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATPATH:
      case LANGTAG:
      case FUNCTION:
      case PACKAGE:
      case LBRACE:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      la = Annotate();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCTION:{
        Function(global, la);
        break;
        }
      case PACKAGE:
      case LBRACE:{
        Package(la);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public Exp nquadPattern() throws ParseException {Exp stack; Atom subject, predicate, object, graph=null;
stack = BasicGraphPattern.create();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ABASE:
    case BASE:{
      BaseDecl();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case APREFIX:
    case PREFIX:{
      PrefixDecl();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case ANON:
      case LTLT:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
graph = null;
      subject = nquadTerm(stack);
      predicate = GraphTerm(stack);
      object = nquadTerm(stack);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case ANON:{
        graph = GraphTerm(stack);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(DOT);
handler.createNquad(subject, predicate, object, graph);
    }
    jj_consume_token(0);
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public Atom nquadTerm(Exp stack) throws ParseException {Atom at;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case ANON:{
      at = GraphTerm(stack);
      break;
      }
    case LTLT:{
      at = StarTriple(stack);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return at;}
    throw new Error("Missing return statement in function");
}

  final public Exp LoadPattern() throws ParseException {Exp stack;
stack = BasicGraphPattern.create();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case ABASE:
      case APREFIX:
      case ATLIST:
      case ATPATH:
      case BASE:
      case PREFIX:
      case GRAPH:
      case TRUE:
      case FALSE:
      case TUPLE:
      case TRIPLE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
      case LTLT:
      case AT:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABASE:
      case BASE:{
        BaseDecl();
        break;
        }
      case APREFIX:
      case PREFIX:{
        PrefixDecl();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        if (jj_2_1(2)) {
          TriplesSameSubject(stack);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DOT:{
            jj_consume_token(DOT);
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            ;
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case Q_IRIref:
          case QNAME_NS:
          case QNAME:
          case BLANK_NODE_LABEL:
          case VAR1:
          case VAR2:
          case GRAPH:
          case ANON:
          case VAR3:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case GRAPH:{
              jj_consume_token(GRAPH);
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              ;
            }
            BasicGraphGraphPattern(stack);
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    jj_consume_token(0);
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public Exp LoadPattern2() throws ParseException {Exp stack;
    Prolog();
    stack = BodyQuadPattern();
    jj_consume_token(0);
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public void Prolog() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABASE:
      case APREFIX:
      case BASE:
      case PREFIX:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABASE:
      case BASE:{
        BaseDecl();
        break;
        }
      case APREFIX:
      case PREFIX:{
        PrefixDecl();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void BaseDecl() throws ParseException {Token t; String s; Triple triple;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BASE:{
      jj_consume_token(BASE);
      break;
      }
    case ABASE:{
      jj_consume_token(ABASE);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    s = Q_IRI_ref();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      jj_consume_token(DOT);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
defBase(s);
}

  final public void PrefixDecl() throws ParseException {Token t1, t2; String s; Triple triple;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PREFIX:{
      jj_consume_token(PREFIX);
      break;
      }
    case APREFIX:{
      jj_consume_token(APREFIX);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t2 = jj_consume_token(QNAME_NS);
    s = Q_IRI_ref();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      jj_consume_token(DOT);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
defNamespace(t2.image, s);
}

// *******************************************************************

// Update
  final public 
void UpdateQuery(Metadata la) throws ParseException {
astq.setResultForm(ASTQuery.QT_UPDATE);
                astq.set(astu);
                astu.defProlog();
    UpdateQuery1();
astq.setAnnotation(la) ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRAGMA:{
      Pragma();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
}

  final public void UpdateQuery1() throws ParseException {
    UpdateQuery2();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABASE:
      case APREFIX:
      case BASE:
      case PREFIX:
      case LOAD:
      case CLEAR:
      case DROP:
      case CREATE:
      case ADD:
      case MOVE:
      case COPY:
      case INSERT:
      case DELETE:
      case WITH:{
        Prolog();
astu.defProlog();
        UpdateQuery1();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
}

  final public void UpdateQuery2() throws ParseException {Exp stack; Basic ope;
        Constant graph, uri, target;
        boolean silent, defaut, named, all;
astq.reset();
stack = BasicGraphPattern.create();
                graph = null; uri = null; target = null;
                silent = false;
                defaut = false;
                all = false;
                ope = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LOAD:{
      jj_consume_token(LOAD);
ope = Basic.create(Update.LOAD);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SILENT:{
        jj_consume_token(SILENT);
ope.setSilent(true);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      uri = IRIrefConst();
ope.setURI(uri);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTO:{
        jj_consume_token(INTO);
        jj_consume_token(GRAPH);
        graph = IRIrefConst();
ope.setTarget(graph);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      break;
      }
    case CLEAR:
    case DROP:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLEAR:{
        jj_consume_token(CLEAR);
ope = Basic.create(Update.CLEAR);
        break;
        }
      case DROP:{
        jj_consume_token(DROP);
ope = Basic.create(Update.DROP);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SILENT:{
        jj_consume_token(SILENT);
ope.setSilent(true);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GRAPH:{
        jj_consume_token(GRAPH);
        graph = IRIrefConst();
ope.setGraph(graph);
        break;
        }
      case DEFAUT:{
        jj_consume_token(DEFAUT);
ope.setDefault(true);
        break;
        }
      case NAMED:{
        jj_consume_token(NAMED);
ope.setNamed(true);
        break;
        }
      case ALL:{
        jj_consume_token(ALL);
ope.setAll(true);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case CREATE:{
      jj_consume_token(CREATE);
ope = Basic.create(Update.CREATE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SILENT:{
        jj_consume_token(SILENT);
ope.setSilent(true);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(GRAPH);
      graph = IRIrefConst();
ope.setGraph(graph);
      break;
      }
    case ADD:
    case MOVE:
    case COPY:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:{
        jj_consume_token(ADD);
ope = Basic.create(Update.ADD);
        break;
        }
      case MOVE:{
        jj_consume_token(MOVE);
ope = Basic.create(Update.MOVE);
        break;
        }
      case COPY:{
        jj_consume_token(COPY);
ope = Basic.create(Update.COPY);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SILENT:{
        jj_consume_token(SILENT);
ope.setSilent(true);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case GRAPH:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GRAPH:{
          jj_consume_token(GRAPH);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        graph = IRIrefConst();
ope.setGraph(graph);
        break;
        }
      case DEFAUT:{
        jj_consume_token(DEFAUT);
ope.setDefault(true);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(TO);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case GRAPH:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GRAPH:{
          jj_consume_token(GRAPH);
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        graph = IRIrefConst();
ope.setTarget(graph);
        break;
        }
      case DEFAUT:{
        jj_consume_token(DEFAUT);
ope.setDefault(true);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      if (jj_2_2(2)) {
        DeleteInsertData();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INSERT:
        case DELETE:
        case WITH:{
          DeleteInsertWhere();
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
if (ope!=null) astu.add(ope);
}

  final public void DeleteInsertData() throws ParseException {Exp exp; Composite ope, upd;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSERT:{
      jj_consume_token(INSERT);
      jj_consume_token(DATA);
astq.setInsertData(true);
      exp = QuadPattern();
astq.setInsertData(false);
                 ope = Composite.create(Update.INSERT, exp);
      break;
      }
    case DELETE:{
      jj_consume_token(DELETE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DATA:{
        jj_consume_token(DATA);
handler.enterDeleteData();
        exp = QuadPattern();
handler.leaveDeleteData();
ope = Composite.create(Update.DELETE, exp);
        break;
        }
      case WHERE:{
        jj_consume_token(WHERE);
handler.enterWhere();
        exp = QuadPattern();
handler.leaveWhere();
upd = Composite.create(Update.COMPOSITE); upd.setBody(exp);
                                ope = Composite.create(Update.DELETE);    ope.setPattern(exp);
                                upd.add(ope);
                                ope = upd;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
astu.add(ope);
}

// create an AST as a whole
  final public 
void DeleteInsertWhere() throws ParseException {Exp exp; Composite upd, ope; Constant uri; Values values;
upd = Composite.create(Update.COMPOSITE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITH:{
      jj_consume_token(WITH);
      uri = IRIrefConst();
upd.setWith(uri);
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DELETE:{
      jj_consume_token(DELETE);
handler.enterDelete();
      exp = QuadPattern();
handler.leaveDelete();
ope = Composite.create(Update.DELETE); ope.setPattern(exp); upd.add(ope);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSERT:{
        jj_consume_token(INSERT);
        exp = QuadPattern();
ope = Composite.create(Update.INSERT); ope.setPattern(exp); upd.add(ope);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      break;
      }
    case INSERT:{
      jj_consume_token(INSERT);
      exp = QuadPattern();
ope = Composite.create(Update.INSERT); ope.setPattern(exp); upd.add(ope);
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case USING:{
        ;
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        break label_5;
      }
      jj_consume_token(USING);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:{
        uri = IRIrefConst();
upd.addUsing(uri);
        break;
        }
      case NAMED:{
        jj_consume_token(NAMED);
        uri = IRIrefConst();
upd.addNamed(uri);
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(WHERE);
handler.enterWhere();
    exp = GroupGraphPattern();
handler.leaveWhere();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALUES:{
      values = Values();
upd.setValues(values);
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      ;
    }
upd.setBody(exp); astu.add(upd);
}

  final public Exp QuadPattern() throws ParseException {Exp stack;
    jj_consume_token(LBRACE);
    stack = BodyQuadPattern();
    jj_consume_token(RBRACE);
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public Exp BodyQuadPattern() throws ParseException {Exp stack;
stack = BasicGraphPattern.create();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case ATLIST:
    case ATPATH:
    case TRUE:
    case FALSE:
    case TUPLE:
    case TRIPLE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case LBRACKET:
    case ANON:
    case LTLT:
    case AT:
    case VAR3:{
      BlockOfTriples(stack);
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GRAPH:{
        ;
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        break label_6;
      }
      GraphGraphPattern(stack);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case ATLIST:
      case ATPATH:
      case TRUE:
      case FALSE:
      case TUPLE:
      case TRIPLE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
      case LTLT:
      case AT:
      case VAR3:{
        BlockOfTriples(stack);
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        ;
      }
    }
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

// *********************** End Update ********************************************************
  final public 


Exp TemplateQuery(Metadata la) throws ParseException {Exp stack;
stack = BasicGraphPattern.create();
    Template(stack);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FROM:{
        ;
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        break label_7;
      }
      DatasetClause();
    }
    stack = WhereClause();
    SolutionModifier();
astq.setTemplate(true);
    astq.setAnnotation(la);
    {if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public void Template(Exp stack) throws ParseException {String str; Variable var; Constant cst; Expression exp, sep; ExpressionList list;
   List<Variable> varList;
    jj_consume_token(TEMPLATE);
cst = null; astt = astq.defineTemplate();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:{
      cst = IRIrefConst();
astq.setName(cst);
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      var = Var();
astq.defArg(var);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[52] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        var = Var();
astq.defArg(var);
      }
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      cst = IRIrefConst();
astq.defProfile(cst);
      jj_consume_token(RBRACKET);
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case NOT:
      case TRY:
      case THROW:
      case STOP:
      case LET:
      case LETDYN:
      case SET:
      case STATIC:
      case FOR:
      case LOOP:
      case IF:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case TRUE:
      case FALSE:
      case GROUP:
      case FORMAT:
      case BOX:
      case IBOX:
      case SBOX:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:
      case FUNCTION:
      case LAMBDA:
      case QUERY:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case ANON:
      case LTLT:
      case AT:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        break label_9;
      }
      exp = texp(stack);
astt.addTemplate(exp);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      jj_consume_token(SEPARATOR);
      jj_consume_token(EQ);
      sep = PrimaryExpression(stack);
astt.setSeparator(sep);
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
}

  final public Expression texp(Exp stack) throws ParseException {Expression exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AT:{
      exp = XML(stack);
      break;
      }
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case NOT:
    case TRY:
    case THROW:
    case STOP:
    case LET:
    case LETDYN:
    case SET:
    case STATIC:
    case FOR:
    case LOOP:
    case IF:
    case EXIST:
    case ERROR:
    case RETURN:
    case AGGREGATE:
    case UNNEST:
    case MAP:
    case MAPLIST:
    case MAPFIND:
    case MAPFINDLIST:
    case MAPMERGE:
    case MAPEVERY:
    case MAPANY:
    case FUNCALL:
    case EVAL:
    case METHOD:
    case APPLY:
    case REDUCE:
    case SELF:
    case BOUND:
    case COALESCE:
    case SAMETERM:
    case STR:
    case STRDT:
    case STRLANG:
    case BNODE:
    case URI:
    case IRI:
    case UUID:
    case STRUUID:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case CONTAINS:
    case STRSTARTS:
    case STRENDS:
    case STRLEN:
    case SUBSTR:
    case UCASE:
    case LCASE:
    case STRBEFORE:
    case STRAFTER:
    case ENCODE_FOR_URI:
    case CONCAT:
    case REPLACE:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case IS_NUMERIC:
    case IS_EXTENSION:
    case IS_SAFE:
    case IS_UNDEFINED:
    case IS_WELLFORMED:
    case REGEX:
    case RAND:
    case ROUND:
    case FLOOR:
    case CEIL:
    case POWER:
    case ABS:
    case NOW:
    case YEAR:
    case MONTH:
    case DAY:
    case HOURS:
    case MINUTES:
    case SECONDS:
    case TIMEZONE:
    case TZ:
    case MD5:
    case SHA1:
    case SHA256:
    case SHA384:
    case SHA512:
    case GROUP_CONCAT:
    case SUM:
    case SAMPLE:
    case AVG:
    case MIN:
    case MAX:
    case TRUE:
    case FALSE:
    case COUNT:
    case TRIPLE:
    case SUBJECT:
    case PREDICATE:
    case OBJECT:
    case IS_TRIPLE:
    case SPARQL_COMPARE:
    case XPATH:
    case FUNCTION:
    case LAMBDA:
    case QUERY:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case ANON:
    case LTLT:
    case VAR3:{
      exp = PrimaryExpression(stack);
      break;
      }
    case GROUP:
    case FORMAT:
    case BOX:
    case IBOX:
    case SBOX:{
      exp = TemplateExpression(stack);
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

  final public Expression TemplateExpression(Exp stack) throws ParseException {Expression exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOX:
    case IBOX:
    case SBOX:{
      exp = box(stack);
      break;
      }
    case GROUP:{
      exp = group(stack);
      break;
      }
    case FORMAT:{
      exp = format(stack);
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

  final public Expression group(Exp stack) throws ParseException {Expression box, exp, sep; ExpressionList list;
    jj_consume_token(GROUP);
list = new ExpressionList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DISTINCT:{
      jj_consume_token(DISTINCT);
list.setDistinct(true);
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case NOT:
      case TRY:
      case THROW:
      case STOP:
      case LET:
      case LETDYN:
      case SET:
      case STATIC:
      case FOR:
      case LOOP:
      case IF:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case TRUE:
      case FALSE:
      case GROUP:
      case FORMAT:
      case BOX:
      case IBOX:
      case SBOX:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:
      case FUNCTION:
      case LAMBDA:
      case QUERY:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case ANON:
      case LTLT:
      case AT:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        break label_10;
      }
      exp = texp(stack);
list.add(exp);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      jj_consume_token(SEPARATOR);
      jj_consume_token(EQ);
      sep = PrimaryExpression(stack);
list.setExpSeparator(sep);
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
exp = astt.createGroup(list);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

  final public Expression format(Exp stack) throws ParseException {Expression box, exp, sep; ExpressionList list; Token t;
    jj_consume_token(FORMAT);
list = new ExpressionList();
    jj_consume_token(LBRACE);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case NOT:
      case TRY:
      case THROW:
      case STOP:
      case LET:
      case LETDYN:
      case SET:
      case STATIC:
      case FOR:
      case LOOP:
      case IF:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case TRUE:
      case FALSE:
      case GROUP:
      case FORMAT:
      case BOX:
      case IBOX:
      case SBOX:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:
      case FUNCTION:
      case LAMBDA:
      case QUERY:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case ANON:
      case LTLT:
      case AT:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        break label_11;
      }
      exp = texp(stack);
list.add(exp);
    }
    jj_consume_token(RBRACE);
box = astt.createFormat(list);
        {if ("" != null) return box;}
    throw new Error("Missing return statement in function");
}

  final public Expression box(Exp stack) throws ParseException {Expression box, exp, sep; ExpressionList list; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOX:{
      t = jj_consume_token(BOX);
      break;
      }
    case IBOX:{
      t = jj_consume_token(IBOX);
      break;
      }
    case SBOX:{
      t = jj_consume_token(SBOX);
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
list = new ExpressionList();
    jj_consume_token(LBRACE);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case NOT:
      case TRY:
      case THROW:
      case STOP:
      case LET:
      case LETDYN:
      case SET:
      case STATIC:
      case FOR:
      case LOOP:
      case IF:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case TRUE:
      case FALSE:
      case GROUP:
      case FORMAT:
      case BOX:
      case IBOX:
      case SBOX:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:
      case FUNCTION:
      case LAMBDA:
      case QUERY:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case ANON:
      case LTLT:
      case AT:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        break label_12;
      }
      exp = texp(stack);
list.add(exp);
    }
    jj_consume_token(RBRACE);
box = astt.createBox(list, t.image );
        {if ("" != null) return box;}
    throw new Error("Missing return statement in function");
}

  final public Expression XML(Exp stack) throws ParseException {Expression box, exp, val, sep; ExpressionList list, attr; Token t; Constant uri = null, str;
    ArrayList<ExpressionList> lattr = null;
    jj_consume_token(AT);
    uri = IRIrefConst();
list = new ExpressionList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
lattr = new  ArrayList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        label_13:
        while (true) {
          jj_consume_token(LPAREN);
          str = RDFLiteral();
          val = PrimaryExpression(stack);
attr = new  ExpressionList(); attr.add(str); attr.add(val);
                      lattr.add(attr);
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAREN:{
            ;
            break;
            }
          default:
            jj_la1[65] = jj_gen;
            break label_13;
          }
        }
        break;
        }
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:{
        str = RDFLiteral();
        val = PrimaryExpression(stack);
attr = new  ExpressionList(); attr.add(str); attr.add(val);
                      lattr.add(attr);
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[67] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case NOT:
      case TRY:
      case THROW:
      case STOP:
      case LET:
      case LETDYN:
      case SET:
      case STATIC:
      case FOR:
      case LOOP:
      case IF:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case TRUE:
      case FALSE:
      case GROUP:
      case FORMAT:
      case BOX:
      case IBOX:
      case SBOX:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:
      case FUNCTION:
      case LAMBDA:
      case QUERY:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case ANON:
      case LTLT:
      case AT:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        break label_14;
      }
      exp = texp(stack);
list.add(exp);
    }
    jj_consume_token(RBRACE);
box = astt.createXML(uri, lattr, list);
        {if ("" != null) return box;}
    throw new Error("Missing return statement in function");
}

// ********************** END PP Template ******************************


// ---- Query type clauses
  final public 
Exp SelectQuery(Metadata la) throws ParseException {Exp stack;
    jj_consume_token(SELECT);
    OneMoreListMerge();
    GroupCountSortDisplayVar();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FROM:{
        ;
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        break label_15;
      }
      DatasetClause();
    }
    stack = WhereClause();
    SolutionModifier();
astq.setResultForm(ASTQuery.QT_SELECT);
    {if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public Exp ConstructQuery(Metadata la) throws ParseException {Exp stack1, stack2; boolean isRule = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RULE:{
      jj_consume_token(RULE);
isRule = true;
      break;
      }
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    jj_consume_token(CONSTRUCT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      // with a construct pattern
        stack1 = ConstructTemplate();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELECT:{
        jj_consume_token(SELECT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR1:
        case VAR2:
        case LPAREN:
        case STAR:
        case VAR3:{
          SelectVar();
          break;
          }
        default:
          jj_la1[71] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FROM:{
          ;
          break;
          }
        default:
          jj_la1[73] = jj_gen;
          break label_16;
        }
        DatasetClause();
      }
      stack2 = WhereClause();
      SolutionModifier();
astq.setConstruct(stack1);
  astq.setAnnotation(la);
  astq.setRule(astq.isRule() || isRule);
  {if ("" != null) return stack2;}
      break;
      }
    case FROM:
    case WHERE:{
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FROM:{
          ;
          break;
          }
        default:
          jj_la1[74] = jj_gen;
          break label_17;
        }
        DatasetClause();
      }
      jj_consume_token(WHERE);
handler.enterWhere();
      stack2 = ConstructTemplate2();
handler.leaveWhere();
      SolutionModifier();
astq.duplicateConstruct(stack2);
        astq.setAnnotation(la);
        {if ("" != null) return stack2;}
      break;
      }
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Exp DescribeQuery(Metadata la) throws ParseException {Exp stack; Variable v; String s; Atom at;
stack = new And();
    jj_consume_token(DESCRIBE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case VAR1:
    case VAR2:
    case VAR3:{
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR1:
        case VAR2:
        case VAR3:{
          at = Var();
astq.setDescribe(at);
          break;
          }
        case Q_IRIref:
        case QNAME_NS:
        case QNAME:{
          at = IRIrefConst();
astq.setDescribe(at);
          break;
          }
        default:
          jj_la1[76] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_3(2)) {
          ;
        } else {
          break label_18;
        }
      }
      break;
      }
    case STAR:{
      jj_consume_token(STAR);
astq.setDescribeAll(true);
      break;
      }
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_19:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_19;
      }
      DatasetClause();
    }
    if (jj_2_5(2)) {
      stack = WhereClause();
    } else {
      ;
    }
    SolutionModifier();
astq.setResultForm(ASTQuery.QT_DESCRIBE);
    astq.setAnnotation(la);
    {if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public Exp AskQuery(Metadata la) throws ParseException {Exp stack; Values values;
    jj_consume_token(ASK);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FROM:{
        ;
        break;
        }
      default:
        jj_la1[78] = jj_gen;
        break label_20;
      }
      DatasetClause();
    }
    stack = WhereClause();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALUES:{
      values = Values();
astq.setValues(values);
      break;
      }
    default:
      jj_la1[79] = jj_gen;
      ;
    }
astq.setResultForm(ASTQuery.QT_ASK);
        astq.setAnnotation(la);
        {if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public Exp DeleteQuery() throws ParseException {Exp stack;
    jj_consume_token(DELETE);
    jj_consume_token(STAR);
    stack = WhereClause();
astq.setDelete(true);
                astq.setResultForm(ASTQuery.QT_DELETE);
                {if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

// ----

// one more list merge in any order and without list and merge being together
  final public 
void OneMoreListMerge() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_MORE:{
      More();
      break;
      }
    default:
      jj_la1[80] = jj_gen;
      ;
    }
}

  final public void More() throws ParseException {
    jj_consume_token(S_MORE);
astq.setMore(true);
}

  final public void GroupCountSortDisplayVar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DISTINCT:
    case REDUCED:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DISTINCT:{
        jj_consume_token(DISTINCT);
astq.setDistinct(true);
        break;
        }
      case REDUCED:{
        jj_consume_token(REDUCED);
astq.setReduced(true);
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SORTED:{
        jj_consume_token(SORTED);
astq.setStrictDistinct(false);
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:
    case VAR2:
    case LPAREN:
    case STAR:
    case VAR3:{
      SelectVar();
      break;
      }
    default:
      jj_la1[84] = jj_gen;
      ;
    }
}

// ***************** BEGIN SPARQL1.1
  final public 
void SelectVar() throws ParseException {Variable e1; Expression e2; Exp stack;
stack = BasicGraphPattern.create();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:
    case VAR2:
    case LPAREN:
    case VAR3:{
      label_21:
      while (true) {
        if (jj_2_6(2)) {
          e1 = Var();
astq.defSelect(e1, null);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAREN:{
            SelectExp(stack);
            break;
            }
          default:
            jj_la1[85] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR1:
        case VAR2:
        case LPAREN:
        case VAR3:{
          ;
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          break label_21;
        }
      }
      break;
      }
    case STAR:{
      jj_consume_token(STAR);
astq.setSelectAll(true);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          ;
          break;
          }
        default:
          jj_la1[87] = jj_gen;
          break label_22;
        }
        SelectExp(stack);
      }
      break;
      }
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void SelectExp(Exp stack) throws ParseException {
    jj_consume_token(LPAREN);
    FunVar(stack);
    jj_consume_token(RPAREN);
}

  final public void FunVar(Exp stack) throws ParseException {Expression e2; Variable e1; Variable var;
    e2 = Expression(stack);
    jj_consume_token(AS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:
    case VAR2:
    case VAR3:{
      var = Var();
astq.defSelect(var, e2);
      break;
      }
    case LPAREN:{
var = astq.metaVariable();
      jj_consume_token(LPAREN);
      e1 = Var();
var.addVariable(e1);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[89] = jj_gen;
          break label_23;
        }
        jj_consume_token(COMMA);
        e1 = Var();
var.addVariable(e1);
      }
      jj_consume_token(RPAREN);
astq.defSelect(var, e2);
      break;
      }
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// ********************* END SPARQL 1.1
  final public 


void DatasetClause() throws ParseException {Constant s;
    jj_consume_token(FROM);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:{
      s = IRIrefConst();
astq.setFrom(s);
      break;
      }
    case NAMED:{
      jj_consume_token(NAMED);
      s = IRIrefConst();
astq.setNamed(s);
      break;
      }
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public Exp WhereClause() throws ParseException {Exp stack;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      jj_consume_token(WHERE);
astq.setWhere(true);
      break;
      }
    default:
      jj_la1[92] = jj_gen;
      ;
    }
handler.enterWhere();
    stack = GroupGraphPattern();
handler.leaveWhere();
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public void SolutionModifier() throws ParseException {Values values;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RELAX:{
      Relax();
      break;
      }
    default:
      jj_la1[93] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORDER:
    case GROUP:
    case HAVING:{
      OrderGroup();
      break;
      }
    default:
      jj_la1[94] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIMIT:
    case OFFSET:{
      LimitOffset();
      break;
      }
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALUES:{
      values = Values();
astq.setValues(values);
      break;
      }
    default:
      jj_la1[96] = jj_gen;
      ;
    }
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRAGMA:{
        ;
        break;
        }
      default:
        jj_la1[97] = jj_gen;
        break label_24;
      }
      Pragma();
    }
}

  final public Values Values() throws ParseException {Variable var; Constant val; ArrayList<Variable> list = null; ArrayList<Constant>  value; Values values = null;
    Expression exp;  Exp stack;
list = new ArrayList<Variable>();
         values = Values.create();
         stack = BasicGraphPattern.create();
    jj_consume_token(VALUES);
handler.setInsideValues(true);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR1:
        case VAR2:
        case VAR3:{
          ;
          break;
          }
        default:
          jj_la1[98] = jj_gen;
          break label_25;
        }
        var = Var();
list.add(var);
      }
values.setVariables(list);
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case THROW:
      case STOP:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:{
        // unnest(exp)
                            exp = BuiltInCall(stack);
values.addExp(exp);
        break;
        }
      default:
        jj_la1[101] = jj_gen;
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAREN:{
            ;
            break;
            }
          default:
            jj_la1[99] = jj_gen;
            break label_26;
          }
          jj_consume_token(LPAREN);
value = new ArrayList<Constant>();
          label_27:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case Q_IRIref:
            case QNAME_NS:
            case QNAME:
            case TRUE:
            case FALSE:
            case UNDEF:
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case LTLT:{
              ;
              break;
              }
            default:
              jj_la1[100] = jj_gen;
              break label_27;
            }
            val = Value();
value.add(val);
          }
values.addValues(value);
          jj_consume_token(RPAREN);
        }
      }
      jj_consume_token(RBRACE);
      break;
      }
    case VAR1:
    case VAR2:
    case VAR3:{
      var = Var();
list.add(var); values.setVariables(list);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case THROW:
      case STOP:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:{
        exp = BuiltInCall(stack);
values.addExp(exp);
        break;
        }
      default:
        jj_la1[103] = jj_gen;
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case Q_IRIref:
          case QNAME_NS:
          case QNAME:
          case TRUE:
          case FALSE:
          case UNDEF:
          case INTEGER:
          case DECIMAL:
          case DOUBLE:
          case STRING_LITERAL1:
          case STRING_LITERAL2:
          case STRING_LITERAL_LONG1:
          case STRING_LITERAL_LONG2:
          case LTLT:{
            ;
            break;
            }
          default:
            jj_la1[102] = jj_gen;
            break label_28;
          }
value   = new ArrayList<Constant>();
          val = Value();
value.add(val);
values.addValues(value);
        }
      }
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
handler.setInsideValues(false); {if ("" != null) return astq.complete(values);}
    throw new Error("Missing return statement in function");
}

  final public Constant Value() throws ParseException {Constant cst = null; String s; Token t1; Exp exp; Atom triple;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:{
      s = Q_IRI_ref();
cst = astq.createURI(s);
      break;
      }
    case QNAME:{
      t1 = jj_consume_token(QNAME);
cst = astq.createQName(t1.image);
      break;
      }
    case QNAME_NS:{
      t1 = jj_consume_token(QNAME_NS);
cst = astq.createQName(t1.image);
      break;
      }
    case UNDEF:{
      t1 = jj_consume_token(UNDEF);
cst = null;
      break;
      }
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:{
      cst = RDFLiteral();
      break;
      }
    case INTEGER:
    case DECIMAL:
    case DOUBLE:{
      cst = NumericLiteral();
      break;
      }
    case TRUE:
    case FALSE:{
      cst = BooleanLiteral();
      break;
      }
    case LTLT:{
exp = BasicGraphPattern.create();
      triple = StarTriple(exp);
cst = triple.getConstant();
      break;
      }
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return cst;}
    throw new Error("Missing return statement in function");
}

  final public void Pragma() throws ParseException {Exp exp; String uri;
uri = null;
    jj_consume_token(PRAGMA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:{
      uri = IRIref();
      break;
      }
    default:
      jj_la1[106] = jj_gen;
      ;
    }
    exp = GroupGraphPattern();
astq.setPragma(uri, exp);
}

  final public void Relax() throws ParseException {Token t1;
    jj_consume_token(RELAX);
    jj_consume_token(BY);
    t1 = jj_consume_token(QNAME);
astq.setDistance(t1.image);
}

  final public void LimitOffset() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIMIT:{
      ProjLimitClause();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OFFSET:{
        OffsetClause();
        break;
        }
      default:
        jj_la1[107] = jj_gen;
        ;
      }
      break;
      }
    case OFFSET:{
      OffsetClause();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LIMIT:{
        ProjLimitClause();
        break;
        }
      default:
        jj_la1[108] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[109] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void OrderGroup() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GROUP:{
      GroupClause();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDER:{
        OrderClause();
        break;
        }
      default:
        jj_la1[110] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HAVING:{
        Having();
        break;
        }
      default:
        jj_la1[111] = jj_gen;
        ;
      }
      break;
      }
    case ORDER:{
      OrderClause();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GROUP:{
        GroupClause();
        break;
        }
      default:
        jj_la1[112] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HAVING:{
        Having();
        break;
        }
      default:
        jj_la1[113] = jj_gen;
        ;
      }
      break;
      }
    case HAVING:{
      Having();
      break;
      }
    default:
      jj_la1[114] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void GroupClause() throws ParseException {Variable var; Expression exp; Exp stack;
stack = new And();
                var = null;
    jj_consume_token(GROUP);
    jj_consume_token(BY);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        exp = Expression(stack);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AS:{
          jj_consume_token(AS);
          var = Var();
          break;
          }
        default:
          jj_la1[115] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
        }
      case VAR1:
      case VAR2:
      case VAR3:{
        exp = Var();
        break;
        }
      case NOT:
      case THROW:
      case STOP:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:{
        exp = BuiltInCall(stack);
        break;
        }
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:{
        exp = FunctionCall(stack);
        break;
        }
      case TRY:
      case LET:
      case LETDYN:
      case SET:
      case STATIC:
      case FOR:
      case LOOP:
      case IF:
      case FUNCTION:
      case LAMBDA:
      case QUERY:{
        exp = FunctionCorese(stack);
        break;
        }
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
astq.setGroup(exp, var);
      if (jj_2_7(2)) {
        ;
      } else {
        break label_29;
      }
    }
}

  final public void Having() throws ParseException {Exp stack;
stack = new And();
    jj_consume_token(HAVING);
    Filter(stack);
astq.setHaving(stack);
}

  final public void OrderClause() throws ParseException {
    jj_consume_token(ORDER);
    jj_consume_token(BY);
    label_30:
    while (true) {
      OrderCondition();
      if (jj_2_8(2)) {
        ;
      } else {
        break label_30;
      }
    }
}

  final public void OrderCondition() throws ParseException {boolean reverse; Token t; String sortby; Variable v; Expression a; Term tm; Exp stack;
reverse = false;
                stack = new And();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:
    case VAR2:
    case VAR3:{
      v = Var();
astq.setSort(v, reverse);
      break;
      }
    case NOT:
    case THROW:
    case STOP:
    case EXIST:
    case ERROR:
    case RETURN:
    case AGGREGATE:
    case UNNEST:
    case MAP:
    case MAPLIST:
    case MAPFIND:
    case MAPFINDLIST:
    case MAPMERGE:
    case MAPEVERY:
    case MAPANY:
    case FUNCALL:
    case EVAL:
    case METHOD:
    case APPLY:
    case REDUCE:
    case SELF:
    case BOUND:
    case COALESCE:
    case SAMETERM:
    case STR:
    case STRDT:
    case STRLANG:
    case BNODE:
    case URI:
    case IRI:
    case UUID:
    case STRUUID:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case CONTAINS:
    case STRSTARTS:
    case STRENDS:
    case STRLEN:
    case SUBSTR:
    case UCASE:
    case LCASE:
    case STRBEFORE:
    case STRAFTER:
    case ENCODE_FOR_URI:
    case CONCAT:
    case REPLACE:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case IS_NUMERIC:
    case IS_EXTENSION:
    case IS_SAFE:
    case IS_UNDEFINED:
    case IS_WELLFORMED:
    case REGEX:
    case RAND:
    case ROUND:
    case FLOOR:
    case CEIL:
    case POWER:
    case ABS:
    case NOW:
    case YEAR:
    case MONTH:
    case DAY:
    case HOURS:
    case MINUTES:
    case SECONDS:
    case TIMEZONE:
    case TZ:
    case MD5:
    case SHA1:
    case SHA256:
    case SHA384:
    case SHA512:
    case GROUP_CONCAT:
    case SUM:
    case SAMPLE:
    case AVG:
    case MIN:
    case MAX:
    case COUNT:
    case TRIPLE:
    case SUBJECT:
    case PREDICATE:
    case OBJECT:
    case IS_TRIPLE:
    case SPARQL_COMPARE:
    case XPATH:{
      a = BuiltInCall(stack);
astq.setSort(a, reverse);
      break;
      }
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:{
      tm = FunctionCall(stack);
astq.setSort(tm, reverse);
      break;
      }
    default:
      jj_la1[119] = jj_gen;
      if (jj_2_9(2)) {
        tm = FunctionCorese(stack);
astq.setSort(tm, reverse);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASC:
        case DESC:
        case LPAREN:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ASC:
          case DESC:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ASC:{
              jj_consume_token(ASC);
              break;
              }
            case DESC:{
              jj_consume_token(DESC);
reverse = true;
              break;
              }
            default:
              jj_la1[117] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[118] = jj_gen;
            ;
          }
          a = BrackettedExpression(stack);
astq.setSort(a, reverse);
          break;
          }
        default:
          jj_la1[120] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  final public void ProjLimitClause() throws ParseException {Token t;
    LimitClause();
}

  final public void LimitClause() throws ParseException {Token t;
    jj_consume_token(LIMIT);
    t = jj_consume_token(INTEGER);
astq.setMaxResult(Integer.parseInt(t.image));
}

  final public void OffsetClause() throws ParseException {Token t;
    jj_consume_token(OFFSET);
    t = jj_consume_token(INTEGER);
astq.setOffset(Integer.parseInt(t.image));
}

// **** General Graph Pattern ********************************************
  final public 


Exp GroupGraphPattern() throws ParseException {Exp stack; Metadata meta = null;
stack = BasicGraphPattern.create();
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECT:{
      SubQuery(meta, stack);
      break;
      }
    default:
      jj_la1[121] = jj_gen;
      GraphPattern(stack);
    }
    jj_consume_token(RBRACE);
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public void GraphPattern(Exp stack) throws ParseException {
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case ATLIST:
      case ATPATH:
      case GRAPH:
      case SERVICE:
      case OPTIONAL:
      case MINUSP:
      case SCOPE:
      case EXIST:
      case FILTER:
      case TRUE:
      case FALSE:
      case VALUES:
      case BIND:
      case TUPLE:
      case TRIPLE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case ANON:
      case LTLT:
      case AT:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[122] = jj_gen;
        break label_31;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case ATLIST:
      case ATPATH:
      case TRUE:
      case FALSE:
      case TUPLE:
      case TRIPLE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
      case LTLT:
      case AT:
      case VAR3:{
        TriplesSameSubject(stack);
        break;
        }
      case FILTER:{
        Constraint(stack);
        break;
        }
      case GRAPH:
      case SERVICE:
      case OPTIONAL:
      case MINUSP:
      case SCOPE:
      case EXIST:
      case VALUES:
      case BIND:
      case LBRACE:{
        GraphPatternNotTriples(stack);
        break;
        }
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        break;
        }
      default:
        jj_la1[124] = jj_gen;
        ;
      }
    }
}

  final public void FilteredBasicGraphPattern(Exp stack) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case ATLIST:
    case ATPATH:
    case TRUE:
    case FALSE:
    case TUPLE:
    case TRIPLE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case LBRACKET:
    case ANON:
    case LTLT:
    case AT:
    case VAR3:{
      BlockOfTriples(stack);
      break;
      }
    default:
      jj_la1[125] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FILTER:{
      Constraint(stack);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        break;
        }
      default:
        jj_la1[126] = jj_gen;
        ;
      }
      FilteredBasicGraphPattern(stack);
      break;
      }
    default:
      jj_la1[127] = jj_gen;
      ;
    }
}

  final public void BlockOfTriples(Exp stack) throws ParseException {boolean b1, b2;
    label_32:
    while (true) {
      TriplesSameSubject(stack);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        break;
        }
      default:
        jj_la1[128] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case ATLIST:
      case ATPATH:
      case TRUE:
      case FALSE:
      case TUPLE:
      case TRIPLE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
      case LTLT:
      case AT:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[129] = jj_gen;
        break label_32;
      }
    }
}

  final public void GraphPatternNotTriples(Exp stack) throws ParseException {ASTQuery ast; Values values;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTIONAL:{
      OptionalGraphPattern(stack);
      break;
      }
    case MINUSP:{
      MinusGraphPattern(stack);
      break;
      }
    default:
      jj_la1[130] = jj_gen;
      if (jj_2_10(2)) {
        GroupOrUnionGraphPattern(stack);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GRAPH:{
          GraphGraphPattern(stack);
          break;
          }
        case SERVICE:{
          ServicePattern(stack);
          break;
          }
        case SCOPE:{
          ScopeGraphPattern(stack);
          break;
          }
        case EXIST:{
          ExistGraphPattern(stack);
          break;
          }
        case BIND:{
          Bind(stack);
          break;
          }
        case VALUES:{
          values = Values();
stack.add(values);
          break;
          }
        default:
          jj_la1[131] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  final public void SubQuery(Metadata meta, Exp stack) throws ParseException {ASTQuery ast; Query q; Exp exp;
ast = astq; astq = gast.subCreate();
    exp = SelectQuery(meta);
astq.setBody(exp); q = Query.create(astq); stack.add(q); astq = ast;
}

  final public Exp SubQueryExp(Metadata meta) throws ParseException {Exp exp;
exp = BasicGraphPattern.create();
    SubQuery(meta, exp);
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

  final public Exp ServiceExp() throws ParseException {Exp exp, res; ASTQuery tmp; Query q;
exp = BasicGraphPattern.create();
    ServicePattern(exp);
tmp = gast.subCreate();
      tmp.setBody(exp);
      tmp.setSelectAll(true);
      q = Query.create(tmp);
      res = BasicGraphPattern.create();
      res.add(q);
      {if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public Exp SubConstruct(Metadata meta) throws ParseException {ASTQuery ast; Query q; Exp exp;
ast = astq; astq = gast.subCreate();
    exp = ConstructQuery(meta);
astq.setBody(exp); q = Query.create(astq); astq = ast; {if ("" != null) return q;}
    throw new Error("Missing return statement in function");
}

  final public Exp SubUpdate(Metadata meta) throws ParseException {ASTQuery ast; ASTUpdate up, save; Query q; Exp exp;
ast = astq; save = astu; astu = astu.subCreate(); astq = gast.subCreate(); astq.set(astu);
   astq.shareForUpdate(gast);
   astq.setBody(BasicGraphPattern.create());
    UpdateQuery(meta);
q = Query.create(astq); astq = ast; astu = save; {if ("" != null) return q;}
    throw new Error("Missing return statement in function");
}

  final public void Bind(Exp stack) throws ParseException {Expression exp; Exp q; Variable var, vv;
    jj_consume_token(BIND);
    jj_consume_token(LPAREN);
    exp = Expression(stack);
    jj_consume_token(AS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:
    case VAR2:
    case VAR3:{
      var = Var();
      break;
      }
    case LPAREN:{
var = astq.metaVariable();
      jj_consume_token(LPAREN);
      vv = Var();
var.addVariable(vv);
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[132] = jj_gen;
          break label_33;
        }
        jj_consume_token(COMMA);
        vv = Var();
var.addVariable(vv);
      }
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
q = astq.createBind(exp, var); stack.add(q);
}

// ---- Definitions of each pattern element
  final public 
void OptionalGraphPattern(Exp stack) throws ParseException {Exp e;
    jj_consume_token(OPTIONAL);
    e = GroupGraphPattern();
e= Optional.create(e);
                stack.add(e);
}

  final public void MinusGraphPattern(Exp stack) throws ParseException {Exp e;
    jj_consume_token(MINUSP);
    e = GroupGraphPattern();
e = Minus.create(e);
                stack.add(e);
}

  final public void ExistGraphPattern(Exp stack) throws ParseException {Exp e;
    jj_consume_token(EXIST);
    e = GroupGraphPattern();
e= Exist.create(e);
                stack.add(e);
}

  final public void ScopeGraphPattern(Exp stack) throws ParseException {Exp e;
    jj_consume_token(SCOPE);
    e = GroupGraphPattern();
e= Scope.create(e);
                stack.add(e);
}

  final public void GraphGraphPattern(Exp stack) throws ParseException {
    jj_consume_token(GRAPH);
    BasicGraphGraphPattern(stack);
}

  final public void BasicGraphGraphPattern(Exp stack) throws ParseException {Atom src; Exp e; Source st;
          boolean state = false, leaf = false, rec = false;
    //src = VarOrIRIref(stack) 
            src = VarOrBlankNodeOrIRIref(stack);
handler.graphPattern(src);
    e = GroupGraphPattern();
st =  Source.create(src, e);
                if (state) {
                        st.setState(true);
                        if (leaf) st.setLeaf(true);
                }
                if (rec){
                        st.setRec(true);
                }
                stack.add(st);
handler.endGraphPattern(src);
}

  final public void ServicePattern(Exp stack) throws ParseException {Atom src; Exp e; Service st; boolean silent; ArrayList<Atom> list;
silent = false; list = new ArrayList<Atom>() ;
    jj_consume_token(SERVICE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SILENT:{
      jj_consume_token(SILENT);
silent = true;
      break;
      }
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    label_34:
    while (true) {
      src = VarOrIRIref(stack);
handler.enterService(astq, src); list.add(src);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case VAR1:
      case VAR2:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[135] = jj_gen;
        break label_34;
      }
    }
    e = GroupGraphPattern();
st =  Service.create(list, e, silent);
                stack.add(st);
                handler.leaveService(astq);
}

// G (union G)* can be a single group pattern
// or a group pattern as part of an union.
  final public void GroupOrUnionGraphPattern(Exp stack) throws ParseException {Exp temp, res;
    res = GroupGraphPattern();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNION:{
        ;
        break;
        }
      default:
        jj_la1[136] = jj_gen;
        break label_35;
      }
      jj_consume_token(UNION);
temp = res;
                res =  Union.create();
                res.add(temp);
      temp = GroupGraphPattern();
res.add(temp);
    }
stack.add(res);
}

  final public void Constraint(Exp stack) throws ParseException {
    jj_consume_token(FILTER);
    Filter(stack);
}

  final public void Filter(Exp stack) throws ParseException {Expression expression1; Exp filter;
    expression1 = FilterExp(stack);
if (expression1 != null ) {
                filter = astq.checkCreateFilter(expression1);
                stack.add(filter);
            }
}

  final public Expression FilterExp(Exp stack) throws ParseException {Expression exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      exp = BrackettedExpression(stack);
      break;
      }
    case NOT:
    case THROW:
    case STOP:
    case EXIST:
    case ERROR:
    case RETURN:
    case AGGREGATE:
    case UNNEST:
    case MAP:
    case MAPLIST:
    case MAPFIND:
    case MAPFINDLIST:
    case MAPMERGE:
    case MAPEVERY:
    case MAPANY:
    case FUNCALL:
    case EVAL:
    case METHOD:
    case APPLY:
    case REDUCE:
    case SELF:
    case BOUND:
    case COALESCE:
    case SAMETERM:
    case STR:
    case STRDT:
    case STRLANG:
    case BNODE:
    case URI:
    case IRI:
    case UUID:
    case STRUUID:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case CONTAINS:
    case STRSTARTS:
    case STRENDS:
    case STRLEN:
    case SUBSTR:
    case UCASE:
    case LCASE:
    case STRBEFORE:
    case STRAFTER:
    case ENCODE_FOR_URI:
    case CONCAT:
    case REPLACE:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case IS_NUMERIC:
    case IS_EXTENSION:
    case IS_SAFE:
    case IS_UNDEFINED:
    case IS_WELLFORMED:
    case REGEX:
    case RAND:
    case ROUND:
    case FLOOR:
    case CEIL:
    case POWER:
    case ABS:
    case NOW:
    case YEAR:
    case MONTH:
    case DAY:
    case HOURS:
    case MINUTES:
    case SECONDS:
    case TIMEZONE:
    case TZ:
    case MD5:
    case SHA1:
    case SHA256:
    case SHA384:
    case SHA512:
    case GROUP_CONCAT:
    case SUM:
    case SAMPLE:
    case AVG:
    case MIN:
    case MAX:
    case COUNT:
    case TRIPLE:
    case SUBJECT:
    case PREDICATE:
    case OBJECT:
    case IS_TRIPLE:
    case SPARQL_COMPARE:
    case XPATH:{
      exp = BuiltInCall(stack);
      break;
      }
    case TRY:
    case LET:
    case LETDYN:
    case SET:
    case STATIC:
    case FOR:
    case LOOP:
    case IF:
    case FUNCTION:
    case LAMBDA:
    case QUERY:{
      exp = FunctionCorese(stack);
      break;
      }
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:{
      exp = FunctionCall(stack);
      break;
      }
    default:
      jj_la1[137] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

// -------- Construct patterns
  final public 
Exp ConstructTemplate() throws ParseException {Exp stack;
    jj_consume_token(LBRACE);
stack = BasicGraphPattern.create();
    ConstructTriples(stack);
    jj_consume_token(RBRACE);
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public void ConstructTriples(Exp stack) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case ATLIST:
    case ATPATH:
    case GRAPH:
    case TRUE:
    case FALSE:
    case TUPLE:
    case TRIPLE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case LBRACKET:
    case ANON:
    case LTLT:
    case AT:
    case VAR3:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case ATLIST:
      case ATPATH:
      case TRUE:
      case FALSE:
      case TUPLE:
      case TRIPLE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
      case LTLT:
      case AT:
      case VAR3:{
        TriplesSameSubject(stack);
        break;
        }
      case GRAPH:{
        GraphGraphPattern(stack);
        break;
        }
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        break;
        }
      default:
        jj_la1[139] = jj_gen;
        ;
      }
      ConstructTriples(stack);
      break;
      }
    default:
      jj_la1[140] = jj_gen;
      ;
    }
}

  final public Exp ConstructTemplate2() throws ParseException {Exp stack;
    jj_consume_token(LBRACE);
stack = BasicGraphPattern.create();
    ConstructTriples2(stack);
    jj_consume_token(RBRACE);
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public void ConstructTriples2(Exp stack) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case ATLIST:
    case ATPATH:
    case TRUE:
    case FALSE:
    case TUPLE:
    case TRIPLE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case LBRACKET:
    case ANON:
    case LTLT:
    case AT:
    case VAR3:{
      TriplesSameSubject(stack);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        break;
        }
      default:
        jj_la1[141] = jj_gen;
        ;
      }
      ConstructTriples2(stack);
      break;
      }
    default:
      jj_la1[142] = jj_gen;
      ;
    }
}

// -------- Triple lists with property and object lists
  final public void TriplesSameSubject(Exp stack) throws ParseException {Expression expression1;
    if (jj_2_11(2)) {
      expression1 = VarOrTerm(stack);
      stack = PropertyListNotEmpty(expression1, stack);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATLIST:
      case ATPATH:
      case LPAREN:
      case LBRACKET:
      case AT:{
        expression1 = TriplesNode(stack);
        stack = PropertyList(expression1, stack);
        break;
        }
      case LTLT:{
        stack = RDFstar(stack);
        break;
        }
      case TUPLE:
      case TRIPLE:{
        stack = tuple(stack);
        break;
        }
      default:
        jj_la1[143] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

// << s p o >> q v .
  final public Exp RDFstar(Exp stack) throws ParseException {Atom ref;
    ref = StarTriple(stack);
    stack = PropertyListNotEmpty(ref, stack);
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

// return Constant with:
// dt=bnode triple reference isTriple() == true
// when sparql: triple = triple(s p o)
// when load:   triple = null, edge created in graph directly
  final public Atom StarTriple(Exp stack) throws ParseException {Atom sub, obj, ref, pred;  Triple t;
    jj_consume_token(LTLT);
    sub = StarTerm(stack);
    pred = Verb();
    obj = StarTerm(stack);
ref = handler.createNestedTripleStar(astq, stack, sub, pred, obj, null);
    jj_consume_token(GTGT);
{if ("" != null) return ref;}
    throw new Error("Missing return statement in function");
}

  final public Atom StarTerm(Exp stack) throws ParseException {Atom term;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case ANON:
    case VAR3:{
      //term = GraphNode(stack)
              term = VarOrTerm(stack);
      break;
      }
    case LTLT:{
      term = StarTriple(stack);
      break;
      }
    default:
      jj_la1[144] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

// tuple(p s o v) triple(s p o v)
  final public Exp tuple(Exp stack) throws ParseException {Atom subject, object, term; Variable var; ArrayList<Atom> list; Atom prop; Triple triple;
  boolean arity = false, isTriple = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TUPLE:{
      jj_consume_token(TUPLE);
isTriple = false;
      break;
      }
    case TRIPLE:{
      jj_consume_token(TRIPLE);
      break;
      }
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    prop = Verb();
    subject = GraphNode(stack);
    object = GraphNode(stack);
if (isTriple) { term = prop; prop = subject; subject = term; }
list = new ArrayList<Atom>(); list.add(subject); list.add(object);
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case ATLIST:
      case ATPATH:
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
      case AT:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[146] = jj_gen;
        break label_36;
      }
      term = GraphNode(stack);
list.add(term);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BAR:{
      jj_consume_token(BAR);
      var = Var();
var.setMatchNodeList(true) ; list.add(var);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BAR:{
        jj_consume_token(BAR);
var.setMatchCardinality(true) ;
        break;
        }
      default:
        jj_la1[147] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[148] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      jj_consume_token(DOT);
arity = true;
      break;
      }
    default:
      jj_la1[149] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
triple = handler.createTriple(astq, prop, list, arity);
            if (triple != null) { stack.add(triple); }
            {if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public Exp PropertyList(Expression expression1, Exp stack) throws ParseException {
    if (jj_2_12(2)) {
      stack = PropertyListNotEmpty(expression1, stack);
    } else {
      ;
    }
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public Exp PropertyListNotEmpty(Expression e1, Exp stack) throws ParseException {ExpressionList list; Atom p;  Triple triple; int n;
    stack = PropertyListNotEmptyElem(e1, stack);
    label_37:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_37;
      }
      jj_consume_token(SEMICOLON);
      stack = PropertyListNotEmptyElem(e1, stack);
    }
    if (jj_2_14(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
{if ("" != null) return stack;}
    throw new Error("Missing return statement in function");
}

  final public Exp PropertyListNotEmptyElem(Expression e1, Exp stack) throws ParseException {ExpressionList list; Atom p;  Triple triple; int n;
    p = Verb();
n = stack.size();
    // ObjectList() may fill the stack beyond n in case of [prop ?val] 
      // hence we store the index n to add the triple at n	
      list = ObjectList(stack);
stack = handler.createTriples(astq, stack, e1, p, list, n);
    {if ("" != null) return stack ;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionList ObjectList(Exp stack) throws ParseException {Expression expression1; ExpressionList v;
v = new ExpressionList();
    expression1 = PropertyValue(stack);
v.add(expression1);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[150] = jj_gen;
        break label_38;
      }
      jj_consume_token(COMMA);
      expression1 = PropertyValue(stack);
v.add(expression1);
    }
{if ("" != null) return v;}
    throw new Error("Missing return statement in function");
}

  final public Atom PropertyValue(Exp stack) throws ParseException {Atom value; Atom tripleRef = null; Exp newStack;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case ATLIST:
    case ATPATH:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case LBRACKET:
    case ANON:
    case AT:
    case VAR3:{
      value = GraphNode(stack);
      break;
      }
    case LTLT:{
      value = StarTriple(stack);
      break;
      }
    default:
      jj_la1[151] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_15(2)) {
newStack = new And().setStack(true);
      //tripleRef = AssertedAnnotation(stack)
              tripleRef = AssertedAnnotation(newStack);
value.setTripleReference(tripleRef);
          // value = o in s p o with o.reference = t and o.annotation = (t q v)
          value.setAnnotation(newStack);
    } else {
      ;
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
}

// s p o  {| q v |}
// parse {| q v |} with t as subject
// create t q v triples in a fresh stack
  final public Atom AssertedAnnotation(Exp stack) throws ParseException {Exp exp; Atom tripleRef = null;
    jj_consume_token(LBRACE);
    jj_consume_token(BAR);
tripleRef = handler.createTripleReference(astq);
    // annotation triples inserted in stack
              stack = PropertyListNotEmpty(tripleRef, stack);
    jj_consume_token(BAR);
    jj_consume_token(RBRACE);
{if ("" != null) return tripleRef;}
    throw new Error("Missing return statement in function");
}

  final public Atom Verb() throws ParseException {Atom atom;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case VAR1:
    case VAR2:
    case XPATH:
    case BEGIN_WITH:
    case LPAREN:
    case BANG:
    case VAR3:{
      atom = PropertyVarOrIRIref();
      break;
      }
    case KW_A:{
      jj_consume_token(KW_A);
atom = astq.createQName(RDFS.qrdftype);
      break;
      }
    default:
      jj_la1[152] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return atom;}
    throw new Error("Missing return statement in function");
}

  final public Atom PropertyVarOrIRIref() throws ParseException {Atom atom; Token t1; Variable var; Constant cst; String temp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case XPATH:
    case BEGIN_WITH:
    case LPAREN:
    case BANG:{
      atom = StdProperty();
      break;
      }
    case VAR1:
    case VAR2:
    case VAR3:{
      atom = Var();
      break;
      }
    default:
      jj_la1[153] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return atom;}
    throw new Error("Missing return statement in function");
}

  final public Atom StdProperty() throws ParseException {Variable var; Constant cst;  Expression exp;
    exp = RegExp();
cst = astq.createProperty(exp);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON2:{
      jj_consume_token(COLON2);
      var = Var();
cst.setVar(var);
      break;
      }
    default:
      jj_la1[154] = jj_gen;
      ;
    }
{if ("" != null) return cst;}
    throw new Error("Missing return statement in function");
}

  final public Expression RegExp() throws ParseException {Token t; String s; Expression exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case XPATH:{
      t = jj_consume_token(XPATH);
      jj_consume_token(LPAREN);
      s = String();
      jj_consume_token(RPAREN);
exp = astq.createFunction(t.image, astq.createConstant(s, null, null));
      break;
      }
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BEGIN_WITH:
    case LPAREN:
    case BANG:{
      exp = AddRegExp();
      break;
      }
    default:
      jj_la1[155] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

  final public Expression AddRegExp() throws ParseException {Token t; Expression exp1, exp2;
    exp1 = MultRegExp();
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_OR:
      case BAR:{
        ;
        break;
        }
      default:
        jj_la1[156] = jj_gen;
        break label_39;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BAR:{
        t = jj_consume_token(BAR);
        exp2 = MultRegExp();
exp1 = astq.createAltExpression(exp1, exp2);
        break;
        }
      case SC_OR:{
        t = jj_consume_token(SC_OR);
        exp2 = MultRegExp();
exp1 = astq.createParaExpression(exp1, exp2);
        break;
        }
      default:
        jj_la1[157] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return exp1;}
    throw new Error("Missing return statement in function");
}

  final public Expression MultRegExp() throws ParseException {Token t; Expression exp1, exp2;
    exp1 = UnaryRegExp();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SLASH:{
        ;
        break;
        }
      default:
        jj_la1[158] = jj_gen;
        break label_40;
      }
      t = jj_consume_token(SLASH);
      exp2 = UnaryRegExp();
exp1 = astq.createSeqExpression(exp1, exp2);
    }
{if ("" != null) return exp1;}
    throw new Error("Missing return statement in function");
}

  final public Expression UnaryRegExp() throws ParseException {Token t, t1, t2; Expression exp; Token ope; String s1, s2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BANG:{
      t = jj_consume_token(BANG);
      exp = PrimaryRegExp();
exp = astq.createOperator(t.image, exp);
      break;
      }
    case BEGIN_WITH:{
      t = jj_consume_token(BEGIN_WITH);
      exp = PrimaryRegExp();
exp = astq.createOperator(t.image, exp);
      break;
      }
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case LPAREN:{
      exp = PrimaryRegExp();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:
      case PLUS:
      case STAR:
      case QM:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case STAR:
        case QM:{
          ope = OpeRegExp();
exp = astq.createOperator(ope.image, exp);
          break;
          }
        case LBRACE:{
          jj_consume_token(LBRACE);
s1 = null; s2 = null;
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER:{
            t1 = jj_consume_token(INTEGER);
s1 = t1.image; s2 = s1;
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              jj_consume_token(COMMA);
s2 = null;
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case INTEGER:{
                t2 = jj_consume_token(INTEGER);
s2 = t2.image;
                break;
                }
              default:
                jj_la1[159] = jj_gen;
                ;
              }
              break;
              }
            default:
              jj_la1[160] = jj_gen;
              ;
            }
            break;
            }
          case COMMA:{
            jj_consume_token(COMMA);
            t2 = jj_consume_token(INTEGER);
s2 = t2.image;
            break;
            }
          default:
            jj_la1[161] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(RBRACE);
exp = astq.createOperator(s1, s2, exp);
          break;
          }
        default:
          jj_la1[162] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[163] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

  final public Token OpeRegExp() throws ParseException {Token ope;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAR:{
      ope = jj_consume_token(STAR);
      break;
      }
    case PLUS:{
      ope = jj_consume_token(PLUS);
      break;
      }
    case QM:{
      ope = jj_consume_token(QM);
      break;
      }
    default:
      jj_la1[165] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ope;}
    throw new Error("Missing return statement in function");
}

  final public Expression PrimaryRegExp() throws ParseException {Token w; Expression exp, test, subject; Exp stack; String t; Constant cst;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:{
      exp = IRIrefConst();
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      exp = AddRegExp();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[166] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_16(2)) {
      jj_consume_token(AT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        w = jj_consume_token(INTEGER);
exp.setWeight(w.image);
        break;
        }
      case LBRACKET:{
stack = BasicGraphPattern.create(); subject = astq.createVariable(THIS);
        jj_consume_token(LBRACKET);
        stack = PropertyListNotEmpty(subject, stack);
        jj_consume_token(RBRACKET);
exp = astq.createRegexTest(exp, stack);
        break;
        }
      case LBRACE:{
        // { ?this a foaf:Person }
                          stack = GroupGraphPattern();
exp = astq.createRegexTest(exp, stack);
        break;
        }
      default:
        jj_la1[167] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

  final public Token Soper() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:{
      t = jj_consume_token(EQ);
      break;
      }
    case NE:{
      t = jj_consume_token(NE);
      break;
      }
    case LT:{
      t = jj_consume_token(LT);
      break;
      }
    case GT:{
      t = jj_consume_token(GT);
      break;
      }
    case LE:{
      t = jj_consume_token(LE);
      break;
      }
    case GE:{
      t = jj_consume_token(GE);
      break;
      }
    case EQ2:{
      t = jj_consume_token(EQ2);
      break;
      }
    case NE2:{
      t = jj_consume_token(NE2);
      break;
      }
    case TILDE:{
      t = jj_consume_token(TILDE);
      break;
      }
    case BEGIN_WITH:{
      t = jj_consume_token(BEGIN_WITH);
      break;
      }
    default:
      jj_la1[168] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public Token Toper() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SPEC:{
      //t = <STRICT_SPEC> | 
          t = jj_consume_token(SPEC);
      break;
      }
    case SAME:{
      t = jj_consume_token(SAME);
      break;
      }
    case GENERALISATION:{
      t = jj_consume_token(GENERALISATION);
      break;
      }
    case STRICT_GENERALISATION:{
      t = jj_consume_token(STRICT_GENERALISATION);
      break;
      }
    default:
      jj_la1[169] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

// -------- Triple expansions

// Anything that can stand in a node slot and which is
// a number of triples
  final public 
Atom TriplesNode(Exp stack) throws ParseException {Atom expression1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATLIST:
    case ATPATH:
    case LPAREN:
    case AT:{
      expression1 = Collection(stack);
      break;
      }
    case LBRACKET:{
      expression1 = BlankNodePropertyList(stack);
      break;
      }
    default:
      jj_la1[170] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Atom BlankNodePropertyList(Exp stack) throws ParseException {Atom expression1;
// [ :p ?y ]
        expression1 = astq.newBlankNode();
    jj_consume_token(LBRACKET);
    stack = PropertyListNotEmpty(expression1, stack);
    jj_consume_token(RBRACKET);
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

// ------- RDF collections
/**
* see: http://www.w3.org/TR/rdf-sparql-query/#collections
*
* exemple 1: The collection ( 1 ?x 2 3 ) generates 8 triples:
* _:b0 rdf:first 1		_:b0 rdf:rest _:b1
* _:b1 rdf:first ?x		_:b1 rdf:rest _:b2
* _:b2 rdf:first 2		_:b2 rdf:rest _:b3
* _:b3 rdf:first 3		_:b3 rdf:rest rdf:nil
*
* exemple 2: The collection ( ?x [ :p 'v' ] ( 3 ) ) generates 9 triples:
* _:b0 rdf:first x		_:b0 rdf:rest _:b1
* _:b1 rdf:first _:b2	_:b1 rdf:rest _:b3		_:b2 :p 'v'
* _:b3 rdf:first _:b4	_:b3 rdf:rest rdf:nil	_:b4 rdf:first 3	_:b4 rdf:rest rdf:nil
*
*/
  final public Atom Collection(Exp stack) throws ParseException {ArrayList<Atom> list;
  Atom node, head;
  Exp exp;
  RDFList rlist;
  int arobase = ASTQuery.L_DEFAULT, save = ASTQuery.L_LIST;
list = new ArrayList<Atom>();
                save = astq.getListType();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATLIST:
    case ATPATH:
    case AT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATLIST:{
        jj_consume_token(ATLIST);
arobase = ASTQuery.L_LIST; astq.setListType(arobase);
        break;
        }
      case ATPATH:
      case AT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AT:{
          jj_consume_token(AT);
          break;
          }
        case ATPATH:{
          jj_consume_token(ATPATH);
          break;
          }
        default:
          jj_la1[171] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
arobase = ASTQuery.L_PATH; astq.setListType(arobase);
        break;
        }
      default:
        jj_la1[172] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[173] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case ATLIST:
      case ATPATH:
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
      case AT:
      case VAR3:{
        node = GraphNode(stack);
        break;
        }
      case LTLT:{
        node = StarTriple(stack);
        break;
        }
      default:
        jj_la1[174] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
list.add(node);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case ATLIST:
      case ATPATH:
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
      case LTLT:
      case AT:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[175] = jj_gen;
        break label_41;
      }
    }
    jj_consume_token(RPAREN);
head = handler.list(astq, stack, list, arobase);
            astq.setListType(save);
            {if ("" != null) return head;}
    throw new Error("Missing return statement in function");
}

// -------- Nodes in a graph pattern or template
  final public 
Atom GraphNode(Exp stack) throws ParseException {Atom expression1;
    if (jj_2_17(2)) {
      expression1 = VarOrTerm(stack);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATLIST:
      case ATPATH:
      case LPAREN:
      case LBRACKET:
      case AT:{
        expression1 = TriplesNode(stack);
        break;
        }
      default:
        jj_la1[176] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Atom VarOrTerm(Exp stack) throws ParseException {Atom expression1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:
    case VAR2:
    case VAR3:{
      expression1 = Var();
      break;
      }
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case ANON:{
      expression1 = GraphTerm(stack);
      break;
      }
    default:
      jj_la1[177] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Atom VarOrBlankNodeOrIRIref(Exp stack) throws ParseException {Atom a; String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:
    case VAR2:
    case VAR3:{
      a = Var();
s = a.getName();
      break;
      }
    case BLANK_NODE_LABEL:
    case ANON:{
      a = BlankNode(stack);
s = a.getName();
      break;
      }
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:{
      a = IRIrefConst();
      break;
      }
    default:
      jj_la1[178] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

  final public Atom VarOrIRIref(Exp stack) throws ParseException {Atom a; String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:
    case VAR2:
    case VAR3:{
      a = Var();
      break;
      }
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:{
      a = IRIrefConst();
      break;
      }
    default:
      jj_la1[179] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

  final public Variable Var() throws ParseException {Token t1; Variable res; String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:{
      t1 = jj_consume_token(VAR1);
s = t1.image;
      break;
      }
    case VAR2:{
      t1 = jj_consume_token(VAR2);
s = "?"+(t1.image).substring(1,(t1.image).length());
      break;
      }
    case VAR3:{
      t1 = jj_consume_token(VAR3);
s = "?"+(t1.image); handler.checkVariable(t1);
      break;
      }
    default:
      jj_la1[180] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
res = ASTQuery.createVariable(s, astq);
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public Atom GraphTerm(Exp stack) throws ParseException {Constant cst; String s; Token t1; Variable var; Atom a;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:{
        s = Q_IRI_ref();
cst = astq.createURI(s);
        break;
        }
      case QNAME:{
        t1 = jj_consume_token(QNAME);
cst = astq.createQName(t1.image);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLON2:{
          jj_consume_token(COLON2);
          var = Var();
cst.setVar(var);
          break;
          }
        default:
          jj_la1[181] = jj_gen;
          ;
        }
        break;
        }
      case QNAME_NS:{
        t1 = jj_consume_token(QNAME_NS);
cst = astq.createQName(t1.image);
        break;
        }
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:{
        cst = RDFLiteral();
        break;
        }
      case INTEGER:
      case DECIMAL:
      case DOUBLE:{
        cst = NumericLiteral();
        break;
        }
      case TRUE:
      case FALSE:{
        cst = BooleanLiteral();
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
cst = astq.createQName(RDFS.qrdfNil);
        break;
        }
      default:
        jj_la1[182] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
a = cst;
      break;
      }
    case BLANK_NODE_LABEL:
    case ANON:{
      a = BlankNode(stack);
      break;
      }
    default:
      jj_la1[183] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

// -------- Constraint syntax
  final public 
Expression Expression(Exp stack) throws ParseException {Expression expression1;
    expression1 = ConditionalOrExpression(stack);
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Expression ConditionalOrExpression(Exp stack) throws ParseException {Token t1; Expression expression1, expression2;
    expression1 = ConditionalAndExpression(stack);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_OR:{
        ;
        break;
        }
      default:
        jj_la1[184] = jj_gen;
        break label_42;
      }
      t1 = jj_consume_token(SC_OR);
      expression2 = ConditionalAndExpression(stack);
expression1 = astq.createConditionalOrExpression(t1.image, expression1, expression2);
    }
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Expression ConditionalAndExpression(Exp stack) throws ParseException {Token t1; Expression expression1, expression2;
    expression1 = ValueLogical(stack);
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_AND:{
        ;
        break;
        }
      default:
        jj_la1[185] = jj_gen;
        break label_43;
      }
      t1 = jj_consume_token(SC_AND);
      expression2 = ValueLogical(stack);
expression1 = astq.createConditionalAndExpression(t1.image, expression1, expression2);
    }
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Expression ValueLogical(Exp stack) throws ParseException {Expression expression1;
    expression1 = RelationalExpression(stack);
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Expression RelationalExpression(Exp stack) throws ParseException {Token t1; Expression expression1, expression2; ExpressionList el; boolean not = false;
    expression1 = NumericExpression(stack);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:
    case IN:
    case EQ2:
    case NE2:
    case BEGIN_WITH:
    case EQ:
    case NE:
    case LT:
    case GT:
    case LE:
    case GE:
    case TILDE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ2:
      case NE2:
      case BEGIN_WITH:
      case EQ:
      case NE:
      case LT:
      case GT:
      case LE:
      case GE:
      case TILDE:{
        t1 = Soper();
        expression2 = NumericExpression(stack);
        break;
        }
      case NOT:
      case IN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
not = true;
          break;
          }
        default:
          jj_la1[186] = jj_gen;
          ;
        }
        t1 = jj_consume_token(IN);
        el = ArgList(stack);
expression2 = astq.createList(el);
        break;
        }
      default:
        jj_la1[187] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
expression1 = astq.createRelationalExpression(t1.image, expression1, expression2);
    if (not){
        expression1 = astq.negation(expression1);
        }
      break;
      }
    default:
      jj_la1[188] = jj_gen;
      ;
    }
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Expression NumericExpression(Exp stack) throws ParseException {Expression expression1;
    expression1 = AdditiveExpression(stack);
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Expression AdditiveExpression(Exp stack) throws ParseException {Token t1; Expression expression1, expression2;
    expression1 = MultiplicativeExpression(stack);
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[189] = jj_gen;
        break label_44;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        t1 = jj_consume_token(PLUS);
        expression2 = MultiplicativeExpression(stack);
expression1 = astq.createAdditiveExpression(t1.image, expression1, expression2);
        break;
        }
      case MINUS:{
        t1 = jj_consume_token(MINUS);
        expression2 = MultiplicativeExpression(stack);
expression1 = astq.createAdditiveExpression(t1.image, expression1, expression2);
        break;
        }
      default:
        jj_la1[190] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Expression MultiplicativeExpression(Exp stack) throws ParseException {Token t1; Expression expression1, expression2;
    expression1 = UnaryExpression(stack);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case SLASH:{
        ;
        break;
        }
      default:
        jj_la1[191] = jj_gen;
        break label_45;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        t1 = jj_consume_token(STAR);
        expression2 = UnaryExpression(stack);
        break;
        }
      case SLASH:{
        t1 = jj_consume_token(SLASH);
        expression2 = UnaryExpression(stack);
        break;
        }
      default:
        jj_la1[192] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
expression1 = astq.createMultiplicativeExpression(t1.image, expression1, expression2);
    }
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Expression UnaryExpression(Exp stack) throws ParseException {Token t1; Expression expression1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BANG:{
      t1 = jj_consume_token(BANG);
      expression1 = PrimaryExpression(stack);
expression1 = astq.createUnaryExpression(t1.image, expression1);
      break;
      }
    case PLUS:{
      t1 = jj_consume_token(PLUS);
      expression1 = PrimaryExpression(stack);
expression1 = astq.createUnaryExpression(t1.image, expression1);
      break;
      }
    case MINUS:{
      t1 = jj_consume_token(MINUS);
      expression1 = PrimaryExpression(stack);
expression1 = astq.createUnaryExpression(t1.image, expression1);
      break;
      }
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case NOT:
    case TRY:
    case THROW:
    case STOP:
    case LET:
    case LETDYN:
    case SET:
    case STATIC:
    case FOR:
    case LOOP:
    case IF:
    case EXIST:
    case ERROR:
    case RETURN:
    case AGGREGATE:
    case UNNEST:
    case MAP:
    case MAPLIST:
    case MAPFIND:
    case MAPFINDLIST:
    case MAPMERGE:
    case MAPEVERY:
    case MAPANY:
    case FUNCALL:
    case EVAL:
    case METHOD:
    case APPLY:
    case REDUCE:
    case SELF:
    case BOUND:
    case COALESCE:
    case SAMETERM:
    case STR:
    case STRDT:
    case STRLANG:
    case BNODE:
    case URI:
    case IRI:
    case UUID:
    case STRUUID:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case CONTAINS:
    case STRSTARTS:
    case STRENDS:
    case STRLEN:
    case SUBSTR:
    case UCASE:
    case LCASE:
    case STRBEFORE:
    case STRAFTER:
    case ENCODE_FOR_URI:
    case CONCAT:
    case REPLACE:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case IS_NUMERIC:
    case IS_EXTENSION:
    case IS_SAFE:
    case IS_UNDEFINED:
    case IS_WELLFORMED:
    case REGEX:
    case RAND:
    case ROUND:
    case FLOOR:
    case CEIL:
    case POWER:
    case ABS:
    case NOW:
    case YEAR:
    case MONTH:
    case DAY:
    case HOURS:
    case MINUTES:
    case SECONDS:
    case TIMEZONE:
    case TZ:
    case MD5:
    case SHA1:
    case SHA256:
    case SHA384:
    case SHA512:
    case GROUP_CONCAT:
    case SUM:
    case SAMPLE:
    case AVG:
    case MIN:
    case MAX:
    case TRUE:
    case FALSE:
    case COUNT:
    case TRIPLE:
    case SUBJECT:
    case PREDICATE:
    case OBJECT:
    case IS_TRIPLE:
    case SPARQL_COMPARE:
    case XPATH:
    case FUNCTION:
    case LAMBDA:
    case QUERY:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case ANON:
    case LTLT:
    case VAR3:{
      expression1 = PrimaryExpression(stack);
      break;
      }
    default:
      jj_la1[193] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Expression BuiltInCall(Exp stack) throws ParseException {ExpressionList el; Expression exp1 = null, exp2; Variable var1; Token t1; Term term;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOUND:{
      t1 = jj_consume_token(BOUND);
      jj_consume_token(LPAREN);
      var1 = Var();
      jj_consume_token(RPAREN);
term = astq.createFunction(t1.image, var1);
      break;
      }
    case ERROR:
    case BNODE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BNODE:{
        t1 = jj_consume_token(BNODE);
        break;
        }
      case ERROR:{
        t1 = jj_consume_token(ERROR);
        break;
        }
      default:
        jj_la1[194] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case NOT:
      case TRY:
      case THROW:
      case STOP:
      case LET:
      case LETDYN:
      case SET:
      case STATIC:
      case FOR:
      case LOOP:
      case IF:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case TRUE:
      case FALSE:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:
      case FUNCTION:
      case LAMBDA:
      case QUERY:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case ANON:
      case LTLT:
      case BANG:
      case PLUS:
      case MINUS:
      case VAR3:{
        exp1 = Expression(stack);
        break;
        }
      default:
        jj_la1[195] = jj_gen;
        ;
      }
term = astq.createFunction(t1.image);
          if (exp1 != null) { term.add(exp1); }
      jj_consume_token(RPAREN);
      break;
      }
    case STOP:
    case UUID:
    case STRUUID:
    case RAND:
    case NOW:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UUID:{
        t1 = jj_consume_token(UUID);
        break;
        }
      case STRUUID:{
        t1 = jj_consume_token(STRUUID);
        break;
        }
      case NOW:{
        t1 = jj_consume_token(NOW);
        break;
        }
      case RAND:{
        t1 = jj_consume_token(RAND);
        break;
        }
      case STOP:{
        t1 = jj_consume_token(STOP);
        break;
        }
      default:
        jj_la1[196] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
term = astq.createFunction(t1.image);
      break;
      }
    case RETURN:
    case EVAL:
    case SELF:
    case STR:
    case URI:
    case IRI:
    case DTYPE:
    case LANG:
    case STRLEN:
    case UCASE:
    case LCASE:
    case ENCODE_FOR_URI:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case IS_NUMERIC:
    case IS_EXTENSION:
    case IS_SAFE:
    case IS_UNDEFINED:
    case IS_WELLFORMED:
    case ROUND:
    case FLOOR:
    case CEIL:
    case ABS:
    case YEAR:
    case MONTH:
    case DAY:
    case HOURS:
    case MINUTES:
    case SECONDS:
    case TIMEZONE:
    case TZ:
    case MD5:
    case SHA1:
    case SHA256:
    case SHA384:
    case SHA512:
    case SUBJECT:
    case PREDICATE:
    case OBJECT:
    case IS_TRIPLE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STR:{
        t1 = jj_consume_token(STR);
        break;
        }
      case URI:{
        t1 = jj_consume_token(URI);
        break;
        }
      case IRI:{
        t1 = jj_consume_token(IRI);
        break;
        }
      case DTYPE:{
        t1 = jj_consume_token(DTYPE);
        break;
        }
      case LANG:{
        t1 = jj_consume_token(LANG);
        break;
        }
      case IS_IRI:{
        t1 = jj_consume_token(IS_IRI);
        break;
        }
      case IS_URI:{
        t1 = jj_consume_token(IS_URI);
        break;
        }
      case IS_BLANK:{
        t1 = jj_consume_token(IS_BLANK);
        break;
        }
      case IS_LITERAL:{
        t1 = jj_consume_token(IS_LITERAL);
        break;
        }
      case IS_NUMERIC:{
        t1 = jj_consume_token(IS_NUMERIC);
        break;
        }
      case IS_EXTENSION:{
        t1 = jj_consume_token(IS_EXTENSION);
        break;
        }
      case IS_SAFE:{
        t1 = jj_consume_token(IS_SAFE);
        break;
        }
      case IS_UNDEFINED:{
        t1 = jj_consume_token(IS_UNDEFINED);
        break;
        }
      case IS_WELLFORMED:{
        t1 = jj_consume_token(IS_WELLFORMED);
        break;
        }
      case STRLEN:{
        t1 = jj_consume_token(STRLEN);
        break;
        }
      case UCASE:{
        t1 = jj_consume_token(UCASE);
        break;
        }
      case LCASE:{
        t1 = jj_consume_token(LCASE);
        break;
        }
      case ENCODE_FOR_URI:{
        t1 = jj_consume_token(ENCODE_FOR_URI);
        break;
        }
      case MD5:{
        t1 = jj_consume_token(MD5);
        break;
        }
      case SHA1:{
        t1 = jj_consume_token(SHA1);
        break;
        }
      case SHA256:{
        t1 = jj_consume_token(SHA256);
        break;
        }
      case SHA384:{
        t1 = jj_consume_token(SHA384);
        break;
        }
      case SHA512:{
        t1 = jj_consume_token(SHA512);
        break;
        }
      case ROUND:{
        t1 = jj_consume_token(ROUND);
        break;
        }
      case FLOOR:{
        t1 = jj_consume_token(FLOOR);
        break;
        }
      case CEIL:{
        t1 = jj_consume_token(CEIL);
        break;
        }
      case ABS:{
        t1 = jj_consume_token(ABS);
        break;
        }
      case YEAR:{
        t1 = jj_consume_token(YEAR);
        break;
        }
      case MONTH:{
        t1 = jj_consume_token(MONTH);
        break;
        }
      case DAY:{
        t1 = jj_consume_token(DAY);
        break;
        }
      case HOURS:{
        t1 = jj_consume_token(HOURS);
        break;
        }
      case MINUTES:{
        t1 = jj_consume_token(MINUTES);
        break;
        }
      case SECONDS:{
        t1 = jj_consume_token(SECONDS);
        break;
        }
      case TIMEZONE:{
        t1 = jj_consume_token(TIMEZONE);
        break;
        }
      case TZ:{
        t1 = jj_consume_token(TZ);
        break;
        }
      case RETURN:{
        t1 = jj_consume_token(RETURN);
        break;
        }
      case SELF:{
        t1 = jj_consume_token(SELF);
        break;
        }
      case EVAL:{
        t1 = jj_consume_token(EVAL);
        break;
        }
      case SUBJECT:{
        t1 = jj_consume_token(SUBJECT);
        break;
        }
      case OBJECT:{
        t1 = jj_consume_token(OBJECT);
        break;
        }
      case PREDICATE:{
        t1 = jj_consume_token(PREDICATE);
        break;
        }
      case IS_TRIPLE:{
        t1 = jj_consume_token(IS_TRIPLE);
        break;
        }
      default:
        jj_la1[197] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      exp1 = Expression(stack);
      jj_consume_token(RPAREN);
term = astq.createFunction(t1.image, exp1);
      break;
      }
    case AGGREGATE:
    case GROUP_CONCAT:
    case SUM:
    case SAMPLE:
    case AVG:
    case MIN:
    case MAX:
    case COUNT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AGGREGATE:{
        t1 = jj_consume_token(AGGREGATE);
        break;
        }
      case GROUP_CONCAT:{
        t1 = jj_consume_token(GROUP_CONCAT);
        break;
        }
      case COUNT:{
        t1 = jj_consume_token(COUNT);
        break;
        }
      case SUM:{
        t1 = jj_consume_token(SUM);
        break;
        }
      case SAMPLE:{
        t1 = jj_consume_token(SAMPLE);
        break;
        }
      case AVG:{
        t1 = jj_consume_token(AVG);
        break;
        }
      case MIN:{
        t1 = jj_consume_token(MIN);
        break;
        }
      case MAX:{
        t1 = jj_consume_token(MAX);
        break;
        }
      default:
        jj_la1[198] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      el = ArgList(stack);
term = astq.createFunction( t1.image, el);
      break;
      }
    case APPLY:
    case REDUCE:
    case SAMETERM:
    case STRDT:
    case STRLANG:
    case LANGMATCHES:
    case CONTAINS:
    case STRSTARTS:
    case STRENDS:
    case STRBEFORE:
    case STRAFTER:
    case POWER:
    case SPARQL_COMPARE:
    case XPATH:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LANGMATCHES:{
        t1 = jj_consume_token(LANGMATCHES);
        break;
        }
      case POWER:{
        t1 = jj_consume_token(POWER);
        break;
        }
      case XPATH:{
        t1 = jj_consume_token(XPATH);
        break;
        }
      case SAMETERM:{
        t1 = jj_consume_token(SAMETERM);
        break;
        }
      case STRDT:{
        t1 = jj_consume_token(STRDT);
        break;
        }
      case STRLANG:{
        t1 = jj_consume_token(STRLANG);
        break;
        }
      case CONTAINS:{
        t1 = jj_consume_token(CONTAINS);
        break;
        }
      case STRSTARTS:{
        t1 = jj_consume_token(STRSTARTS);
        break;
        }
      case STRENDS:{
        t1 = jj_consume_token(STRENDS);
        break;
        }
      case STRBEFORE:{
        t1 = jj_consume_token(STRBEFORE);
        break;
        }
      case STRAFTER:{
        t1 = jj_consume_token(STRAFTER);
        break;
        }
      case REDUCE:{
        t1 = jj_consume_token(REDUCE);
        break;
        }
      case APPLY:{
        t1 = jj_consume_token(APPLY);
        break;
        }
      case SPARQL_COMPARE:{
        t1 = jj_consume_token(SPARQL_COMPARE);
        break;
        }
      default:
        jj_la1[199] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      exp1 = Expression(stack);
      jj_consume_token(COMMA);
      exp2 = Expression(stack);
      jj_consume_token(RPAREN);
term =  astq.createFunction(t1.image, exp1); term.add(exp2);
      break;
      }
    case THROW:
    case UNNEST:
    case MAP:
    case MAPLIST:
    case MAPFIND:
    case MAPFINDLIST:
    case MAPMERGE:
    case MAPEVERY:
    case MAPANY:
    case FUNCALL:
    case METHOD:
    case COALESCE:
    case SUBSTR:
    case CONCAT:
    case REPLACE:
    case REGEX:
    case TRIPLE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNNEST:{
        t1 = jj_consume_token(UNNEST);
        break;
        }
      case REGEX:{
        t1 = jj_consume_token(REGEX);
        break;
        }
      case COALESCE:{
        t1 = jj_consume_token(COALESCE);
        break;
        }
      case CONCAT:{
        t1 = jj_consume_token(CONCAT);
        break;
        }
      case SUBSTR:{
        t1 = jj_consume_token(SUBSTR);
        break;
        }
      case REPLACE:{
        t1 = jj_consume_token(REPLACE);
        break;
        }
      case METHOD:{
        t1 = jj_consume_token(METHOD);
        break;
        }
      case FUNCALL:{
        t1 = jj_consume_token(FUNCALL);
        break;
        }
      case MAP:{
        t1 = jj_consume_token(MAP);
        break;
        }
      case MAPLIST:{
        t1 = jj_consume_token(MAPLIST);
        break;
        }
      case MAPMERGE:{
        t1 = jj_consume_token(MAPMERGE);
        break;
        }
      case MAPFINDLIST:{
        t1 = jj_consume_token(MAPFINDLIST);
        break;
        }
      case MAPFIND:{
        t1 = jj_consume_token(MAPFIND);
        break;
        }
      case MAPANY:{
        t1 = jj_consume_token(MAPANY);
        break;
        }
      case MAPEVERY:{
        t1 = jj_consume_token(MAPEVERY);
        break;
        }
      case THROW:{
        t1 = jj_consume_token(THROW);
        break;
        }
      case TRIPLE:{
        t1 = jj_consume_token(TRIPLE);
        break;
        }
      default:
        jj_la1[200] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
term =  astq.createFunction(t1.image);
      exp1 = Expression(stack);
term.add(exp1);
      label_46:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[201] = jj_gen;
          break label_46;
        }
        jj_consume_token(COMMA);
        exp2 = Expression(stack);
term.add(exp2);
      }
      jj_consume_token(RPAREN);
      break;
      }
    case NOT:
    case EXIST:{
      term = exists();
      break;
      }
    default:
      jj_la1[202] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public Term exists() throws ParseException {Exp exp; Term term; boolean neg;
neg = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
neg = true;
      break;
      }
    default:
      jj_la1[203] = jj_gen;
      ;
    }
    jj_consume_token(EXIST);
    exp = GroupGraphPattern();
term = astq.createExist(exp, neg);
                {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public Term FunctionCorese(Exp stack) throws ParseException {Token t; Term term = null; ExpressionList v; Constant cst; Exp sub;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      term = IfThenElse(stack);
      break;
      }
    case TRY:{
      term = TryCatch(stack);
      break;
      }
    case LET:
    case LETDYN:{
      term = Let(stack);
      break;
      }
    case SET:
    case STATIC:{
      term = Set(stack);
      break;
      }
    case FOR:
    case LOOP:{
      term = For(stack);
      break;
      }
    case FUNCTION:
    case LAMBDA:{
      term = Lambda();
      break;
      }
    case QUERY:{
      term = QueryExp();
      break;
      }
    default:
      jj_la1[204] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public Term QueryExp() throws ParseException {Expression exp = null; Exp stack; Term term; Exp sub; Metadata meta = null;
    jj_consume_token(QUERY);
    jj_consume_token(LPAREN);
    meta = Annotate();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECT:{
      sub = SubQueryExp(meta);
      break;
      }
    case CONSTRUCT:
    case RULE:{
      sub = SubConstruct(meta);
sub = BasicGraphPattern.create(sub);
      break;
      }
    case LOAD:
    case CLEAR:
    case DROP:
    case CREATE:
    case ADD:
    case MOVE:
    case COPY:
    case INSERT:
    case DELETE:
    case WITH:{
      sub = SubUpdate(meta);
sub = BasicGraphPattern.create(sub);
      break;
      }
    default:
      jj_la1[205] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
stack = BasicGraphPattern.create();
      exp = Expression(stack);
      break;
      }
    default:
      jj_la1[206] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return astq.term(sub, exp);}
    throw new Error("Missing return statement in function");
}

  final public Term IfThenElse(Exp stack) throws ParseException {Expression test, e1, e2 = null;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    test = Expression(stack);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      e1 = Expression(stack);
      jj_consume_token(COMMA);
      e2 = Expression(stack);
      jj_consume_token(RPAREN);
      break;
      }
    case RPAREN:{
      jj_consume_token(RPAREN);
      e1 = Body(stack);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:{
          e2 = Body(stack);
          break;
          }
        case IF:{
          e2 = IfThenElse(stack);
          break;
          }
        default:
          jj_la1[207] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[208] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[209] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return astq.ifThenElse(test, e1, e2);}
    throw new Error("Missing return statement in function");
}

  final public Term For(Exp stack) throws ParseException {boolean isLoop = false; Exp sub; Term t; Expression exp, body ; Variable var = null;
ExpressionList arg, el = null; Metadata meta = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:{
      jj_consume_token(FOR);
      break;
      }
    case LOOP:{
      jj_consume_token(LOOP);
isLoop = true;
      break;
      }
    default:
      jj_la1[210] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:
    case VAR2:
    case LPAREN:
    case VAR3:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR1:
      case VAR2:
      case VAR3:{
        var = Var();
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
el = new ExpressionList();
        var = Var();
el.add(var);
        label_47:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VAR1:
          case VAR2:
          case COMMA:
          case VAR3:{
            ;
            break;
            }
          default:
            jj_la1[211] = jj_gen;
            break label_47;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            jj_consume_token(COMMA);
            break;
            }
          default:
            jj_la1[212] = jj_gen;
            ;
          }
          var = Var();
el.add(var);
        }
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[213] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case NOT:
      case TRY:
      case THROW:
      case STOP:
      case LET:
      case LETDYN:
      case SET:
      case STATIC:
      case FOR:
      case LOOP:
      case IF:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case TRUE:
      case FALSE:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:
      case FUNCTION:
      case LAMBDA:
      case QUERY:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case ANON:
      case LTLT:
      case BANG:
      case PLUS:
      case MINUS:
      case VAR3:{
        exp = Expression(stack);
        break;
        }
      case ATPATH:
      case LANGTAG:
      case SELECT:
      case CONSTRUCT:
      case RULE:
      case SERVICE:
      case LOAD:
      case CLEAR:
      case DROP:
      case CREATE:
      case ADD:
      case MOVE:
      case COPY:
      case INSERT:
      case DELETE:
      case WITH:
      case AT:{
        exp = LetForExp();
        break;
        }
      default:
        jj_la1[214] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case ATPATH:
    case LANGTAG:
    case SELECT:{
      meta = Annotate();
      sub = SubQueryExp(meta);
el = new ExpressionList(); exp = astq.term(sub);
      break;
      }
    default:
      jj_la1[215] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
    body = Body(stack);
{if ("" != null) return  astq.defineLoop(var, el, exp, body, isLoop);}
    throw new Error("Missing return statement in function");
}

  final public Expression LetForExp() throws ParseException {Exp sub; Expression exp; Metadata meta = null;
    meta = Annotate();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECT:{
      sub = SubQueryExp(meta);
exp = astq.term(sub);
      break;
      }
    case SERVICE:{
      sub = ServiceExp();
exp = astq.term(sub);
      break;
      }
    case CONSTRUCT:
    case RULE:{
      sub = SubConstruct(meta);
exp = astq.term(BasicGraphPattern.create(sub));
      break;
      }
    case LOAD:
    case CLEAR:
    case DROP:
    case CREATE:
    case ADD:
    case MOVE:
    case COPY:
    case INSERT:
    case DELETE:
    case WITH:{
      sub = SubUpdate(meta);
exp = astq.term(BasicGraphPattern.create(sub));
      break;
      }
    case AT:{
      jj_consume_token(AT);
      exp = CstList();
      break;
      }
    default:
      jj_la1[216] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

  final public Constant CstList() throws ParseException {IDatatype dt; Constant list;
    dt = ExpList();
{if ("" != null) return astq.createLDSList(dt);}
    throw new Error("Missing return statement in function");
}

  final public IDatatype ExpList() throws ParseException {IDatatype dt; ArrayList<IDatatype> list;
list = new ArrayList<IDatatype>() ;
    jj_consume_token(LPAREN);
    label_48:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:{
        ;
        break;
        }
      default:
        jj_la1[217] = jj_gen;
        break label_48;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:{
        dt = ListTerm();
        break;
        }
      case LPAREN:{
        dt = ExpList();
        break;
        }
      default:
        jj_la1[218] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
list.add(dt);
    }
    jj_consume_token(RPAREN);
{if ("" != null) return DatatypeMap.createList(list);}
    throw new Error("Missing return statement in function");
}

  final public IDatatype ListTerm() throws ParseException {String s; Token t1;  Atom a;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:{
      s = Q_IRI_ref();
a = astq.createURI(s);
      break;
      }
    case QNAME:{
      t1 = jj_consume_token(QNAME);
a = astq.createQName(t1.image);
      break;
      }
    case QNAME_NS:{
      t1 = jj_consume_token(QNAME_NS);
a = astq.createQName(t1.image);
      break;
      }
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:{
      a = RDFLiteral();
      break;
      }
    case INTEGER:
    case DECIMAL:
    case DOUBLE:{
      a = NumericLiteral();
      break;
      }
    case TRUE:
    case FALSE:{
      a = BooleanLiteral();
      break;
      }
    default:
      jj_la1[219] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return a.getDatatypeValue();}
    throw new Error("Missing return statement in function");
}

  final public Term TryCatch(Exp stack) throws ParseException {Variable var; Expression e1, e2;
    jj_consume_token(TRY);
    e1 = Body(stack);
    jj_consume_token(CATCH);
    jj_consume_token(LPAREN);
    var = Var();
    jj_consume_token(RPAREN);
    e2 = Body(stack);
{if ("" != null) return astq.defTryCatch(e1, var, e2);}
    throw new Error("Missing return statement in function");
}

  final public Term Let(Exp stack) throws ParseException {boolean dynamic = false; Expression exp ; Expression arg; ExpressionList list;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LET:{
      jj_consume_token(LET);
      break;
      }
    case LETDYN:{
      jj_consume_token(LETDYN);
dynamic = true;
      break;
      }
    default:
      jj_la1[220] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
list = new ExpressionList();
    arg = LetDef(stack);
list.add(arg);
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[221] = jj_gen;
        break label_49;
      }
      jj_consume_token(COMMA);
      arg = LetDef(stack);
list.add(arg);
    }
    jj_consume_token(RPAREN);
    exp = Body(stack);
{if ("" != null) return astq.let(list, exp, dynamic);}
    throw new Error("Missing return statement in function");
}

  final public Term Set(Exp stack) throws ParseException {Expression exp ; Variable var; boolean stat = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SET:{
      jj_consume_token(SET);
      break;
      }
    case STATIC:{
      jj_consume_token(STATIC);
stat = true;
      break;
      }
    default:
      jj_la1[222] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    var = Var();
    jj_consume_token(EQ);
    exp = Expression(stack);
    jj_consume_token(RPAREN);
{if ("" != null) return astq.set(var, exp, stat);}
    throw new Error("Missing return statement in function");
}

  final public Expression LetDef(Exp stack) throws ParseException {Variable var = null;   Expression exp ; ExpressionList el = null; Exp sub; Constant type = null; Metadata meta = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case VAR1:
    case VAR2:
    case LPAREN:
    case VAR3:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case VAR1:
      case VAR2:
      case VAR3:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Q_IRIref:
        case QNAME_NS:
        case QNAME:{
          type = IRIrefConst();
          break;
          }
        default:
          jj_la1[223] = jj_gen;
          ;
        }
        var = Var();
        break;
        }
      case LPAREN:{
        el = LetArgList();
        break;
        }
      default:
        jj_la1[224] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case NOT:
      case TRY:
      case THROW:
      case STOP:
      case LET:
      case LETDYN:
      case SET:
      case STATIC:
      case FOR:
      case LOOP:
      case IF:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case TRUE:
      case FALSE:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:
      case FUNCTION:
      case LAMBDA:
      case QUERY:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case ANON:
      case LTLT:
      case BANG:
      case PLUS:
      case MINUS:
      case VAR3:{
        exp = Expression(stack);
        break;
        }
      case ATPATH:
      case LANGTAG:
      case SELECT:
      case CONSTRUCT:
      case RULE:
      case SERVICE:
      case LOAD:
      case CLEAR:
      case DROP:
      case CREATE:
      case ADD:
      case MOVE:
      case COPY:
      case INSERT:
      case DELETE:
      case WITH:
      case AT:{
        exp = LetForExp();
        break;
        }
      default:
        jj_la1[225] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case ATPATH:
    case LANGTAG:
    case SELECT:{
      // let (select where)
        meta = Annotate();
      sub = SubQueryExp(meta);
el = new ExpressionList(); exp = astq.term(sub);
      break;
      }
    default:
      jj_la1[226] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return (el == null) ? astq.defLet(var, type, exp) : astq.defLet(el, exp);}
    throw new Error("Missing return statement in function");
}

  final public Term FunctionCall(Exp stack) throws ParseException {Term term1;   ExpressionList v; Constant cst;
    cst = IRIrefConst();
    v = ArgList(stack);
term1 = astq.createFunction(cst, v);
{if ("" != null) return term1;}
    throw new Error("Missing return statement in function");
}

// The case of "q:name()" or just "q:name"
// by expanding out FunctionCall()
  final public 
Expression IRIrefOrFunction(Exp stack) throws ParseException {Expression exp;
    exp = StdIRIrefOrFunction(stack);
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

  final public Expression StdIRIrefOrFunction(Exp stack) throws ParseException {String s1; ExpressionList v; Term term; Expression expression;  Constant cst;
    cst = IRIrefConst();
expression = cst;
    if (jj_2_18(2)) {
      v = ArgList(stack);
term = astq.createFunction(cst, v);
                expression = term;
    } else {
      ;
    }
{if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

  final public Function Function(Metadata global, Metadata local) throws ParseException {Exp stack; Token t = null; Function term;   ExpressionList v; Constant type, name=null; Expression body;
    jj_consume_token(FUNCTION);
    type = IRIrefConst();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:{
      name = IRIrefConst();
      break;
      }
    default:
      jj_la1[227] = jj_gen;
      ;
    }
stack = BasicGraphPattern.create();
    handler.setMetadata(metadata(global, local)) ;
    handler.setFunction(true);
    v = FunArgList();
    body = Body(stack);
// type  is optional, name is mandatory
        if (name == null) {
            name = type;
            type = null;
        }
        term = astq.defineFunction(name, type, v, body, metadata(global, local) );
        handler.cleanMetadata();
        handler.setFunction(false);
{if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public Function Lambda() throws ParseException {Exp stack; Token t = null; Function term;   ExpressionList v; Constant cst; Expression body;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LAMBDA:{
      jj_consume_token(LAMBDA);
      break;
      }
    case FUNCTION:{
      jj_consume_token(FUNCTION);
      break;
      }
    default:
      jj_la1[228] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
stack = BasicGraphPattern.create();
    v = LambdaArgList();
    body = Body(stack);
term = gast.defineLambda(v, body, handler.getMetadata());
{if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionList FunArgList() throws ParseException {ExpressionList list;  Variable var; Constant type;
list = new ExpressionList();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case VAR1:
    case VAR2:
    case VAR3:{
type = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:{
        type = IRIrefConst();
        break;
        }
      default:
        jj_la1[229] = jj_gen;
        ;
      }
      var = Var();
list.add(var); list.defType(var, type);
      label_50:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[230] = jj_gen;
          break label_50;
        }
        jj_consume_token(COMMA);
type = null;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Q_IRIref:
        case QNAME_NS:
        case QNAME:{
          type = IRIrefConst();
          break;
          }
        default:
          jj_la1[231] = jj_gen;
          ;
        }
        var = Var();
list.add(var); list.defType(var, type);
      }
      break;
      }
    default:
      jj_la1[232] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionList LambdaArgList() throws ParseException {ExpressionList glist, list;  Variable var; Constant type;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
glist = new ExpressionList();
      list = LambdaVarList();
glist.add(list);
      jj_consume_token(RPAREN);
      label_51:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[233] = jj_gen;
          break label_51;
        }
        jj_consume_token(COMMA);
        jj_consume_token(LPAREN);
        list = LambdaVarList();
glist.add(list);
        jj_consume_token(RPAREN);
      }
list = glist;
      break;
      }
    default:
      jj_la1[234] = jj_gen;
      list = LambdaVarList();
    }
    jj_consume_token(RPAREN);
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionList LambdaVarList() throws ParseException {ExpressionList list;  Variable var;
list = new ExpressionList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:
    case VAR2:
    case VAR3:{
      var = Var();
list.add(var);
      label_52:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[235] = jj_gen;
          break label_52;
        }
        jj_consume_token(COMMA);
        var = Var();
list.add(var);
      }
      break;
      }
    default:
      jj_la1[236] = jj_gen;
      ;
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionList LetArgList() throws ParseException {ExpressionList glist, list;  Variable var; Constant type;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:
    case VAR2:
    case DOT:
    case BAR:
    case VAR3:{
      list = VarList();
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
glist = new ExpressionList();
      list = VarList();
glist.add(list);
      jj_consume_token(RPAREN);
      label_53:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[237] = jj_gen;
          break label_53;
        }
        jj_consume_token(COMMA);
        jj_consume_token(LPAREN);
        list = VarList();
glist.add(list);
        jj_consume_token(RPAREN);
      }
list = glist;
      break;
      }
    default:
      jj_la1[238] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionList VarList() throws ParseException {ExpressionList list;
list = new ExpressionList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR1:
    case VAR2:
    case VAR3:{
      FstVar(list);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BAR:{
        RstVar(list);
        break;
        }
      default:
        jj_la1[239] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        LstVar(list);
        break;
        }
      default:
        jj_la1[240] = jj_gen;
        ;
      }
      break;
      }
    case BAR:{
      RstVar(list);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        LstVar(list);
        break;
        }
      default:
        jj_la1[241] = jj_gen;
        ;
      }
      break;
      }
    case DOT:{
      LstVar(list);
      break;
      }
    default:
      jj_la1[242] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionList FstVar(ExpressionList list) throws ParseException {Variable var;
    var = Var();
list.add(var);
    label_54:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR1:
      case VAR2:
      case COMMA:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[243] = jj_gen;
        break label_54;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        break;
        }
      default:
        jj_la1[244] = jj_gen;
        ;
      }
      var = Var();
list.add(var);
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionList RstVar(ExpressionList list) throws ParseException {Variable var;
    jj_consume_token(BAR);
    var = Var();
list.add(var); list.setRest(true);
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionList LstVar(ExpressionList list) throws ParseException {Variable var;
    jj_consume_token(DOT);
    var = Var();
list.add(var); list.setLast(true);
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR1:
      case VAR2:
      case VAR3:{
        ;
        break;
        }
      default:
        jj_la1[245] = jj_gen;
        break label_55;
      }
      var = Var();
list.add(var);
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public Metadata Annotate() throws ParseException {Token t, v; Metadata list = null; Constant s;
    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATPATH:
      case LANGTAG:{
        ;
        break;
        }
      default:
        jj_la1[246] = jj_gen;
        break label_56;
      }
s = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LANGTAG:{
        t = jj_consume_token(LANGTAG);
        break;
        }
      case ATPATH:{
        t = jj_consume_token(ATPATH);
        break;
        }
      default:
        jj_la1[247] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if (list == null) { list = new Metadata(); } ; list.add(t.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        jj_consume_token(STAR);
list.add(t.image, "*");
        break;
        }
      default:
        jj_la1[250] = jj_gen;
        label_57:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case Q_IRIref:
          case QNAME_NS:
          case QNAME:
          case TRUE:
          case FALSE:
          case INTEGER:
          case DECIMAL:
          case DOUBLE:
          case STRING_LITERAL1:
          case STRING_LITERAL2:
          case STRING_LITERAL_LONG1:
          case STRING_LITERAL_LONG2:
          case VAR3:{
            ;
            break;
            }
          default:
            jj_la1[248] = jj_gen;
            break label_57;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case Q_IRIref:
          case QNAME_NS:
          case QNAME:
          case TRUE:
          case FALSE:
          case INTEGER:
          case DECIMAL:
          case DOUBLE:
          case STRING_LITERAL1:
          case STRING_LITERAL2:
          case STRING_LITERAL_LONG1:
          case STRING_LITERAL_LONG2:{
            s = Constant();
list.add(t.image, s);
            break;
            }
          case VAR3:{
            v = jj_consume_token(VAR3);
list.add(t.image, v.image);
            break;
            }
          default:
            jj_la1[249] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public Expression Body(Exp stack) throws ParseException {ExpressionList body = new ExpressionList(); Expression exp = null;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RBRACE:{
      jj_consume_token(RBRACE);
      break;
      }
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case NOT:
    case TRY:
    case THROW:
    case STOP:
    case LET:
    case LETDYN:
    case SET:
    case STATIC:
    case FOR:
    case LOOP:
    case IF:
    case EXIST:
    case ERROR:
    case RETURN:
    case AGGREGATE:
    case UNNEST:
    case MAP:
    case MAPLIST:
    case MAPFIND:
    case MAPFINDLIST:
    case MAPMERGE:
    case MAPEVERY:
    case MAPANY:
    case FUNCALL:
    case EVAL:
    case METHOD:
    case APPLY:
    case REDUCE:
    case SELF:
    case BOUND:
    case COALESCE:
    case SAMETERM:
    case STR:
    case STRDT:
    case STRLANG:
    case BNODE:
    case URI:
    case IRI:
    case UUID:
    case STRUUID:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case CONTAINS:
    case STRSTARTS:
    case STRENDS:
    case STRLEN:
    case SUBSTR:
    case UCASE:
    case LCASE:
    case STRBEFORE:
    case STRAFTER:
    case ENCODE_FOR_URI:
    case CONCAT:
    case REPLACE:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case IS_NUMERIC:
    case IS_EXTENSION:
    case IS_SAFE:
    case IS_UNDEFINED:
    case IS_WELLFORMED:
    case REGEX:
    case RAND:
    case ROUND:
    case FLOOR:
    case CEIL:
    case POWER:
    case ABS:
    case NOW:
    case YEAR:
    case MONTH:
    case DAY:
    case HOURS:
    case MINUTES:
    case SECONDS:
    case TIMEZONE:
    case TZ:
    case MD5:
    case SHA1:
    case SHA256:
    case SHA384:
    case SHA512:
    case GROUP_CONCAT:
    case SUM:
    case SAMPLE:
    case AVG:
    case MIN:
    case MAX:
    case TRUE:
    case FALSE:
    case GROUP:
    case FORMAT:
    case BOX:
    case IBOX:
    case SBOX:
    case COUNT:
    case TRIPLE:
    case SUBJECT:
    case PREDICATE:
    case OBJECT:
    case IS_TRIPLE:
    case SPARQL_COMPARE:
    case XPATH:
    case FUNCTION:
    case LAMBDA:
    case QUERY:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case ANON:
    case LTLT:
    case BANG:
    case PLUS:
    case MINUS:
    case VAR3:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case NOT:
      case TRY:
      case THROW:
      case STOP:
      case LET:
      case LETDYN:
      case SET:
      case STATIC:
      case FOR:
      case LOOP:
      case IF:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case TRUE:
      case FALSE:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:
      case FUNCTION:
      case LAMBDA:
      case QUERY:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case ANON:
      case LTLT:
      case BANG:
      case PLUS:
      case MINUS:
      case VAR3:{
        exp = Expression(stack);
        break;
        }
      case GROUP:
      case FORMAT:
      case BOX:
      case IBOX:
      case SBOX:{
        exp = TemplateExpression(stack);
        break;
        }
      default:
        jj_la1[251] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
body.add(exp);
      label_58:
      while (true) {
        if (jj_2_19(2)) {
          ;
        } else {
          break label_58;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Q_IRIref:
        case QNAME_NS:
        case QNAME:
        case BLANK_NODE_LABEL:
        case VAR1:
        case VAR2:
        case NOT:
        case TRY:
        case THROW:
        case STOP:
        case LET:
        case LETDYN:
        case SET:
        case STATIC:
        case FOR:
        case LOOP:
        case IF:
        case EXIST:
        case ERROR:
        case RETURN:
        case AGGREGATE:
        case UNNEST:
        case MAP:
        case MAPLIST:
        case MAPFIND:
        case MAPFINDLIST:
        case MAPMERGE:
        case MAPEVERY:
        case MAPANY:
        case FUNCALL:
        case EVAL:
        case METHOD:
        case APPLY:
        case REDUCE:
        case SELF:
        case BOUND:
        case COALESCE:
        case SAMETERM:
        case STR:
        case STRDT:
        case STRLANG:
        case BNODE:
        case URI:
        case IRI:
        case UUID:
        case STRUUID:
        case DTYPE:
        case LANG:
        case LANGMATCHES:
        case CONTAINS:
        case STRSTARTS:
        case STRENDS:
        case STRLEN:
        case SUBSTR:
        case UCASE:
        case LCASE:
        case STRBEFORE:
        case STRAFTER:
        case ENCODE_FOR_URI:
        case CONCAT:
        case REPLACE:
        case IS_URI:
        case IS_IRI:
        case IS_BLANK:
        case IS_LITERAL:
        case IS_NUMERIC:
        case IS_EXTENSION:
        case IS_SAFE:
        case IS_UNDEFINED:
        case IS_WELLFORMED:
        case REGEX:
        case RAND:
        case ROUND:
        case FLOOR:
        case CEIL:
        case POWER:
        case ABS:
        case NOW:
        case YEAR:
        case MONTH:
        case DAY:
        case HOURS:
        case MINUTES:
        case SECONDS:
        case TIMEZONE:
        case TZ:
        case MD5:
        case SHA1:
        case SHA256:
        case SHA384:
        case SHA512:
        case GROUP_CONCAT:
        case SUM:
        case SAMPLE:
        case AVG:
        case MIN:
        case MAX:
        case TRUE:
        case FALSE:
        case COUNT:
        case TRIPLE:
        case SUBJECT:
        case PREDICATE:
        case OBJECT:
        case IS_TRIPLE:
        case SPARQL_COMPARE:
        case XPATH:
        case FUNCTION:
        case LAMBDA:
        case QUERY:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERAL_LONG1:
        case STRING_LITERAL_LONG2:
        case LPAREN:
        case ANON:
        case LTLT:
        case BANG:
        case PLUS:
        case MINUS:
        case VAR3:{
          exp = Expression(stack);
          break;
          }
        case GROUP:
        case FORMAT:
        case BOX:
        case IBOX:
        case SBOX:{
          exp = TemplateExpression(stack);
          break;
          }
        default:
          jj_la1[252] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
body.add(exp);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[253] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[254] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return astq.defineBody(body) ;}
    throw new Error("Missing return statement in function");
}

  final public void Package(Metadata global) throws ParseException {Function term; Metadata la;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PACKAGE:{
      jj_consume_token(PACKAGE);
      break;
      }
    default:
      jj_la1[255] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_59:
    while (true) {
      la = Annotate();
      term = Function(global, la);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATPATH:
      case LANGTAG:
      case FUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[256] = jj_gen;
        break label_59;
      }
    }
    jj_consume_token(RBRACE);
}

  final public ExpressionList ArgList(Exp stack) throws ParseException {ExpressionList v; Token t; Expression expression1; String str;
// Vector containing either Expression or Variable
        v = new ExpressionList();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DISTINCT:{
      jj_consume_token(DISTINCT);
v.setDistinct(true);
      break;
      }
    default:
      jj_la1[257] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case NOT:
    case TRY:
    case THROW:
    case STOP:
    case LET:
    case LETDYN:
    case SET:
    case STATIC:
    case FOR:
    case LOOP:
    case IF:
    case EXIST:
    case ERROR:
    case RETURN:
    case AGGREGATE:
    case UNNEST:
    case MAP:
    case MAPLIST:
    case MAPFIND:
    case MAPFINDLIST:
    case MAPMERGE:
    case MAPEVERY:
    case MAPANY:
    case FUNCALL:
    case EVAL:
    case METHOD:
    case APPLY:
    case REDUCE:
    case SELF:
    case BOUND:
    case COALESCE:
    case SAMETERM:
    case STR:
    case STRDT:
    case STRLANG:
    case BNODE:
    case URI:
    case IRI:
    case UUID:
    case STRUUID:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case CONTAINS:
    case STRSTARTS:
    case STRENDS:
    case STRLEN:
    case SUBSTR:
    case UCASE:
    case LCASE:
    case STRBEFORE:
    case STRAFTER:
    case ENCODE_FOR_URI:
    case CONCAT:
    case REPLACE:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case IS_NUMERIC:
    case IS_EXTENSION:
    case IS_SAFE:
    case IS_UNDEFINED:
    case IS_WELLFORMED:
    case REGEX:
    case RAND:
    case ROUND:
    case FLOOR:
    case CEIL:
    case POWER:
    case ABS:
    case NOW:
    case YEAR:
    case MONTH:
    case DAY:
    case HOURS:
    case MINUTES:
    case SECONDS:
    case TIMEZONE:
    case TZ:
    case MD5:
    case SHA1:
    case SHA256:
    case SHA384:
    case SHA512:
    case GROUP_CONCAT:
    case SUM:
    case SAMPLE:
    case AVG:
    case MIN:
    case MAX:
    case TRUE:
    case FALSE:
    case COUNT:
    case TRIPLE:
    case SUBJECT:
    case PREDICATE:
    case OBJECT:
    case IS_TRIPLE:
    case SPARQL_COMPARE:
    case XPATH:
    case FUNCTION:
    case LAMBDA:
    case QUERY:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case ANON:
    case LTLT:
    case BANG:
    case PLUS:
    case MINUS:
    case STAR:
    case VAR3:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        jj_consume_token(STAR);
        break;
        }
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case NOT:
      case TRY:
      case THROW:
      case STOP:
      case LET:
      case LETDYN:
      case SET:
      case STATIC:
      case FOR:
      case LOOP:
      case IF:
      case EXIST:
      case ERROR:
      case RETURN:
      case AGGREGATE:
      case UNNEST:
      case MAP:
      case MAPLIST:
      case MAPFIND:
      case MAPFINDLIST:
      case MAPMERGE:
      case MAPEVERY:
      case MAPANY:
      case FUNCALL:
      case EVAL:
      case METHOD:
      case APPLY:
      case REDUCE:
      case SELF:
      case BOUND:
      case COALESCE:
      case SAMETERM:
      case STR:
      case STRDT:
      case STRLANG:
      case BNODE:
      case URI:
      case IRI:
      case UUID:
      case STRUUID:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case CONTAINS:
      case STRSTARTS:
      case STRENDS:
      case STRLEN:
      case SUBSTR:
      case UCASE:
      case LCASE:
      case STRBEFORE:
      case STRAFTER:
      case ENCODE_FOR_URI:
      case CONCAT:
      case REPLACE:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case IS_EXTENSION:
      case IS_SAFE:
      case IS_UNDEFINED:
      case IS_WELLFORMED:
      case REGEX:
      case RAND:
      case ROUND:
      case FLOOR:
      case CEIL:
      case POWER:
      case ABS:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA256:
      case SHA384:
      case SHA512:
      case GROUP_CONCAT:
      case SUM:
      case SAMPLE:
      case AVG:
      case MIN:
      case MAX:
      case TRUE:
      case FALSE:
      case COUNT:
      case TRIPLE:
      case SUBJECT:
      case PREDICATE:
      case OBJECT:
      case IS_TRIPLE:
      case SPARQL_COMPARE:
      case XPATH:
      case FUNCTION:
      case LAMBDA:
      case QUERY:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case ANON:
      case LTLT:
      case BANG:
      case PLUS:
      case MINUS:
      case VAR3:{
        expression1 = Arg(stack);
v.add(expression1);
        label_60:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[258] = jj_gen;
            break label_60;
          }
          jj_consume_token(COMMA);
          expression1 = Arg(stack);
v.add(expression1);
        }
        break;
        }
      default:
        jj_la1[259] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[260] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      jj_consume_token(SEPARATOR);
      jj_consume_token(EQ);
      str = String();
v.setSeparator(str);
      break;
      }
    default:
      jj_la1[261] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return v;}
    throw new Error("Missing return statement in function");
}

  final public Expression Arg(Exp stack) throws ParseException {Expression exp;
    exp = Expression(stack);
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

  final public Expression BrackettedExpression(Exp stack) throws ParseException {Expression expression1;
    jj_consume_token(LPAREN);
    expression1 = Expression(stack);
    jj_consume_token(RPAREN);
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Expression PrimaryExpression(Exp stack) throws ParseException {Exp exp; Expression expression1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      expression1 = BrackettedExpression(stack);
      break;
      }
    case NOT:
    case THROW:
    case STOP:
    case EXIST:
    case ERROR:
    case RETURN:
    case AGGREGATE:
    case UNNEST:
    case MAP:
    case MAPLIST:
    case MAPFIND:
    case MAPFINDLIST:
    case MAPMERGE:
    case MAPEVERY:
    case MAPANY:
    case FUNCALL:
    case EVAL:
    case METHOD:
    case APPLY:
    case REDUCE:
    case SELF:
    case BOUND:
    case COALESCE:
    case SAMETERM:
    case STR:
    case STRDT:
    case STRLANG:
    case BNODE:
    case URI:
    case IRI:
    case UUID:
    case STRUUID:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case CONTAINS:
    case STRSTARTS:
    case STRENDS:
    case STRLEN:
    case SUBSTR:
    case UCASE:
    case LCASE:
    case STRBEFORE:
    case STRAFTER:
    case ENCODE_FOR_URI:
    case CONCAT:
    case REPLACE:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case IS_NUMERIC:
    case IS_EXTENSION:
    case IS_SAFE:
    case IS_UNDEFINED:
    case IS_WELLFORMED:
    case REGEX:
    case RAND:
    case ROUND:
    case FLOOR:
    case CEIL:
    case POWER:
    case ABS:
    case NOW:
    case YEAR:
    case MONTH:
    case DAY:
    case HOURS:
    case MINUTES:
    case SECONDS:
    case TIMEZONE:
    case TZ:
    case MD5:
    case SHA1:
    case SHA256:
    case SHA384:
    case SHA512:
    case GROUP_CONCAT:
    case SUM:
    case SAMPLE:
    case AVG:
    case MIN:
    case MAX:
    case COUNT:
    case TRIPLE:
    case SUBJECT:
    case PREDICATE:
    case OBJECT:
    case IS_TRIPLE:
    case SPARQL_COMPARE:
    case XPATH:{
      expression1 = BuiltInCall(stack);
      break;
      }
    case TRY:
    case LET:
    case LETDYN:
    case SET:
    case STATIC:
    case FOR:
    case LOOP:
    case IF:
    case FUNCTION:
    case LAMBDA:
    case QUERY:{
      expression1 = FunctionCorese(stack);
      break;
      }
    case VAR1:
    case VAR2:
    case VAR3:{
      expression1 = Var();
      break;
      }
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:{
      expression1 = RDFLiteral();
      break;
      }
    case INTEGER:
    case DECIMAL:
    case DOUBLE:{
      expression1 = NumericLiteral();
      break;
      }
    case TRUE:
    case FALSE:{
      expression1 = BooleanLiteral();
      break;
      }
    case BLANK_NODE_LABEL:
    case ANON:{
      expression1 = BlankNode(stack);
      break;
      }
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:{
      expression1 = IRIrefOrFunction(stack);
      break;
      }
    case LTLT:{
exp = BasicGraphPattern.create() ;
      expression1 = StarTriple(exp);
      break;
      }
    default:
      jj_la1[262] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return expression1;}
    throw new Error("Missing return statement in function");
}

  final public Constant Constant() throws ParseException {Constant c;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:{
      c = StringLiteral();
      break;
      }
    case INTEGER:
    case DECIMAL:
    case DOUBLE:{
      c = NumericLiteral();
      break;
      }
    case TRUE:
    case FALSE:{
      c = BooleanLiteral();
      break;
      }
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:{
      c = IRIrefConst();
      break;
      }
    default:
      jj_la1[263] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
}

  final public Constant NumericLiteral() throws ParseException {Token t; String datatype;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      t = jj_consume_token(INTEGER);
datatype = RDFS.qxsdInteger;
      break;
      }
    case DECIMAL:{
      t = jj_consume_token(DECIMAL);
datatype = RDFS.qxsdDecimal;
      break;
      }
    case DOUBLE:{
      t = jj_consume_token(DOUBLE);
datatype = RDFS.qxsdDouble;
      break;
      }
    default:
      jj_la1[264] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return astq.createConstant(t.image, datatype, null);}
    throw new Error("Missing return statement in function");
}

  final public Constant RDFLiteral() throws ParseException {Constant res; String iriref, s, lang; Token t;
    s = String();
iriref = null; lang=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LANGTAG:
    case DATATYPE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LANGTAG:{
        t = jj_consume_token(LANGTAG);
lang = t.image.substring(1,t.image.length());
        break;
        }
      case DATATYPE:{
        t = jj_consume_token(DATATYPE);
        iriref = IRIref();
        break;
        }
      default:
        jj_la1[265] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[266] = jj_gen;
      ;
    }
res = astq.createConstantWithDatatype(s, iriref, lang);
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public Constant StringLiteral() throws ParseException {String s;
    s = String();
{if ("" != null) return Constant.createString(s);}
    throw new Error("Missing return statement in function");
}

  final public Constant BooleanLiteral() throws ParseException {Token t1, t2; Constant cst; String iriref, lang;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      t1 = jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      t1 = jj_consume_token(FALSE);
      break;
      }
    default:
      jj_la1[267] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
iriref = RDFS.qxsdBoolean; lang=null;
cst = astq.createConstant(t1.image.toLowerCase(), iriref, lang);
        {if ("" != null) return cst;}
    throw new Error("Missing return statement in function");
}

  final public String String() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL1:{
      t = jj_consume_token(STRING_LITERAL1);
      break;
      }
    case STRING_LITERAL2:{
      t = jj_consume_token(STRING_LITERAL2);
      break;
      }
    case STRING_LITERAL_LONG1:{
      t = jj_consume_token(STRING_LITERAL_LONG1);
      break;
      }
    case STRING_LITERAL_LONG2:{
      t = jj_consume_token(STRING_LITERAL_LONG2);
      break;
      }
    default:
      jj_la1[268] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
final String SQ3  = "\"\"\"";
    final String SSQ3 = "'''";

    String str = t.image;

    // remove leading/trailing " or '
    int start = 1, end = str.length() - 1;

    if ((str.startsWith(SQ3) && str.endsWith(SQ3))
      || (str.startsWith(SSQ3) && str.endsWith(SSQ3))) {
        // remove leading/trailing """ or '''
        start = 3;
        end = str.length() - 3;
    }

    str = str.substring(start, end);

    {if ("" != null) return handler.remEscapes(convertUnicodeSequences(str));}
    throw new Error("Missing return statement in function");
}

  final public String IRIref() throws ParseException {String res;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:{
      res = Q_IRI_ref();
      break;
      }
    case QNAME_NS:
    case QNAME:{
      res = QName();
      break;
      }
    default:
      jj_la1[269] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public Constant IRIrefConst() throws ParseException {String res; Constant cst;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Q_IRIref:{
      res = Q_IRI_ref();
cst = astq.createURI(res);
      break;
      }
    case QNAME_NS:
    case QNAME:{
      res = QName();
cst = astq.createQName(res);
      break;
      }
    default:
      jj_la1[270] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return cst;}
    throw new Error("Missing return statement in function");
}

  final public String QName() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QNAME:{
      t = jj_consume_token(QNAME);
      break;
      }
    case QNAME_NS:{
      t = jj_consume_token(QNAME_NS);
      break;
      }
    default:
      jj_la1[271] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public Variable BlankNode(Exp stack) throws ParseException {Token t; Variable v;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BLANK_NODE_LABEL:{
      t = jj_consume_token(BLANK_NODE_LABEL);
// check if the blank node is already in the table
                v = astq.newBlankNode(stack, t.image);
                handler.declareBlankNode(t);
      break;
      }
    case ANON:{
      t = jj_consume_token(ANON);
// create a new blank node
                v = astq.newBlankNode();
                handler.declareBlankNode(t);
      break;
      }
    default:
      jj_la1[272] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return v;}
    throw new Error("Missing return statement in function");
}

  final public String Q_IRI_ref() throws ParseException {Token t; String s;
    t = jj_consume_token(Q_IRIref);
s = t.image;
        s = s.substring(1,s.length()-1); // Remove "<" and ">"
        s = convertUnicodeSequences(s); // Convert Unicode escape sequences
        s = astq.defURI(s);
        {if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_3_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GroupClause_1144_11_68()) {
    jj_scanpos = xsp;
    if (jj_3R_GroupClause_1145_11_69()) {
    jj_scanpos = xsp;
    if (jj_3R_GroupClause_1146_11_70()) {
    jj_scanpos = xsp;
    if (jj_3R_GroupClause_1147_11_71()) {
    jj_scanpos = xsp;
    if (jj_3R_GroupClause_1148_11_72()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_PrimaryRegExp_1896_17_80()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(AT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimaryRegExp_1896_17_80()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryRegExp_1902_19_81()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryRegExp_1915_19_82()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_BuiltInCall_2284_5_135()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(189)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(188)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryRegExp_1887_17_281()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_AddRegExp_1784_5_251()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryRegExp_1883_17_280()
 {
    if (jj_3R_IRIrefConst_2896_4_91()) return true;
    return false;
  }

  private boolean jj_3R_BuiltInCall_2276_5_134()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_ArgList_2738_3_83()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryRegExp_1882_9_277()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimaryRegExp_1883_17_280()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryRegExp_1887_17_281()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_box_729_7_176()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_BuiltInCall_2251_5_133()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(184)) {
    jj_scanpos = xsp;
    if (jj_scan_token(186)) {
    jj_scanpos = xsp;
    if (jj_scan_token(185)) {
    jj_scanpos = xsp;
    if (jj_scan_token(187)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_OpeRegExp_1870_1_285()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(241)) {
    jj_scanpos = xsp;
    if (jj_scan_token(239)) {
    jj_scanpos = xsp;
    if (jj_scan_token(243)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_format_710_7_178()
 {
    if (jj_scan_token(FORMAT)) return true;
    return false;
  }

  private boolean jj_3R_BuiltInCall_2241_5_132()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    }
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_TriplesSameSubject_1548_3_61()) return true;
    return false;
  }

  private boolean jj_3R_UnaryRegExp_1843_17_284()
 {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_Constraint_1471_3_218()
 {
    if (jj_scan_token(FILTER)) return true;
    return false;
  }

  private boolean jj_3R_LambdaArgList_2616_4_170()
 {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_BuiltInCall_2226_5_131()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_GroupOrUnionGraphPattern_1455_9_75()
 {
    if (jj_3R_GroupGraphPattern_1223_3_95()) return true;
    return false;
  }

  private boolean jj_3R_UnaryRegExp_1838_8_283()
 {
    if (jj_3R_OpeRegExp_1870_1_285()) return true;
    return false;
  }

  private boolean jj_3R_UnaryRegExp_1838_8_279()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnaryRegExp_1838_8_283()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryRegExp_1843_17_284()) return true;
    }
    return false;
  }

  private boolean jj_3R_UnaryRegExp_1836_9_266()
 {
    if (jj_3R_PrimaryRegExp_1882_9_277()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnaryRegExp_1838_8_279()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_BuiltInCall_2221_5_130()
 {
    if (jj_scan_token(BOUND)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_BuiltInCall_2219_3_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BuiltInCall_2221_5_130()) {
    jj_scanpos = xsp;
    if (jj_3R_BuiltInCall_2226_5_131()) {
    jj_scanpos = xsp;
    if (jj_3R_BuiltInCall_2241_5_132()) {
    jj_scanpos = xsp;
    if (jj_3R_BuiltInCall_2251_5_133()) {
    jj_scanpos = xsp;
    if (jj_3R_BuiltInCall_2276_5_134()) {
    jj_scanpos = xsp;
    if (jj_3R_BuiltInCall_2284_5_135()) {
    jj_scanpos = xsp;
    if (jj_3R_BuiltInCall_2298_5_136()) {
    jj_scanpos = xsp;
    if (jj_3R_BuiltInCall_2309_7_137()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_UnaryRegExp_1831_5_265()
 {
    if (jj_scan_token(BEGIN_WITH)) return true;
    if (jj_3R_PrimaryRegExp_1882_9_277()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_2212_7_257()
 {
    if (jj_3R_PrimaryExpression_2795_3_260()) return true;
    return false;
  }

  private boolean jj_3R_UnaryRegExp_1826_9_264()
 {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_PrimaryRegExp_1882_9_277()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_2210_7_256()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_group_683_2_177()
 {
    if (jj_scan_token(GROUP)) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_2208_7_255()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_TemplateExpression_674_9_154()
 {
    if (jj_3R_format_710_7_178()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_2206_7_254()
 {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_TemplateExpression_672_9_153()
 {
    if (jj_3R_group_683_2_177()) return true;
    return false;
  }

  private boolean jj_3R_ServicePattern_1436_9_245()
 {
    if (jj_scan_token(SERVICE)) return true;
    return false;
  }

  private boolean jj_3R_TemplateExpression_670_9_152()
 {
    if (jj_3R_box_729_7_176()) return true;
    return false;
  }

  private boolean jj_3R_UnaryRegExp_1825_1_259()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnaryRegExp_1826_9_264()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryRegExp_1831_5_265()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryRegExp_1836_9_266()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_UnaryExpression_2206_3_252()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnaryExpression_2206_7_254()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_2208_7_255()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_2210_7_256()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_2212_7_257()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_TemplateExpression_670_5_119()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TemplateExpression_670_9_152()) {
    jj_scanpos = xsp;
    if (jj_3R_TemplateExpression_672_9_153()) {
    jj_scanpos = xsp;
    if (jj_3R_TemplateExpression_674_9_154()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_Lambda_2587_3_145()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(191)) {
    jj_scanpos = xsp;
    if (jj_scan_token(190)) return true;
    }
    if (jj_3R_LambdaArgList_2616_4_170()) return true;
    return false;
  }

  private boolean jj_3R_MultRegExp_1812_11_261()
 {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_MultRegExp_1808_9_253()
 {
    if (jj_3R_UnaryRegExp_1825_1_259()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MultRegExp_1812_11_261()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_2193_3_250()
 {
    if (jj_3R_UnaryExpression_2206_3_252()) return true;
    return false;
  }

  private boolean jj_3R_AddRegExp_1793_17_263()
 {
    if (jj_scan_token(SC_OR)) return true;
    return false;
  }

  private boolean jj_3R_AdditiveExpression_2181_3_236()
 {
    if (jj_3R_MultiplicativeExpression_2193_3_250()) return true;
    return false;
  }

  private boolean jj_3R_GraphGraphPattern_1407_9_244()
 {
    if (jj_scan_token(GRAPH)) return true;
    return false;
  }

  private boolean jj_3R_AddRegExp_1787_9_262()
 {
    if (jj_scan_token(BAR)) return true;
    return false;
  }

  private boolean jj_3R_AddRegExp_1787_9_258()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AddRegExp_1787_9_262()) {
    jj_scanpos = xsp;
    if (jj_3R_AddRegExp_1793_17_263()) return true;
    }
    return false;
  }

  private boolean jj_3R_NumericExpression_2175_3_220()
 {
    if (jj_3R_AdditiveExpression_2181_3_236()) return true;
    return false;
  }

  private boolean jj_3R_Values_1019_9_249()
 {
    if (jj_scan_token(VALUES)) return true;
    return false;
  }

  private boolean jj_3R_Q_IRI_ref_2935_5_159()
 {
    if (jj_scan_token(Q_IRIref)) return true;
    return false;
  }

  private boolean jj_3R_AddRegExp_1784_5_251()
 {
    if (jj_3R_MultRegExp_1808_9_253()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AddRegExp_1787_9_258()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_ArgList_2738_3_83()) return true;
    return false;
  }

  private boolean jj_3R_ScopeGraphPattern_1394_10_246()
 {
    if (jj_scan_token(SCOPE)) return true;
    return false;
  }

  private boolean jj_3R_StdIRIrefOrFunction_2548_3_282()
 {
    if (jj_3R_IRIrefConst_2896_4_91()) return true;
    return false;
  }

  private boolean jj_3R_RegExp_1774_11_241()
 {
    if (jj_3R_AddRegExp_1784_5_251()) return true;
    return false;
  }

  private boolean jj_3R_RegExp_1770_12_240()
 {
    if (jj_scan_token(XPATH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_BlankNode_2920_11_211()
 {
    if (jj_scan_token(ANON)) return true;
    return false;
  }

  private boolean jj_3R_IRIrefOrFunction_2541_6_278()
 {
    if (jj_3R_StdIRIrefOrFunction_2548_3_282()) return true;
    return false;
  }

  private boolean jj_3R_ExistGraphPattern_1384_10_247()
 {
    if (jj_scan_token(EXIST)) return true;
    return false;
  }

  private boolean jj_3R_BlankNode_2913_9_210()
 {
    if (jj_scan_token(BLANK_NODE_LABEL)) return true;
    return false;
  }

  private boolean jj_3R_RelationalExpression_2153_3_205()
 {
    if (jj_3R_NumericExpression_2175_3_220()) return true;
    return false;
  }

  private boolean jj_3R_DatasetClause_993_13_92()
 {
    if (jj_3R_IRIrefConst_2896_4_91()) return true;
    return false;
  }

  private boolean jj_3R_WhereClause_1000_5_94()
 {
    if (jj_scan_token(WHERE)) return true;
    return false;
  }

  private boolean jj_3R_RegExp_1769_1_227()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RegExp_1770_12_240()) {
    jj_scanpos = xsp;
    if (jj_3R_RegExp_1774_11_241()) return true;
    }
    return false;
  }

  private boolean jj_3R_WhereClause_1000_4_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_WhereClause_1000_5_94()) jj_scanpos = xsp;
    if (jj_3R_GroupGraphPattern_1223_3_95()) return true;
    return false;
  }

  private boolean jj_3R_ValueLogical_2147_3_184()
 {
    if (jj_3R_RelationalExpression_2153_3_205()) return true;
    return false;
  }

  private boolean jj_3R_MinusGraphPattern_1374_9_243()
 {
    if (jj_scan_token(MINUSP)) return true;
    return false;
  }

  private boolean jj_3R_BlankNode_2912_3_193()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BlankNode_2913_9_210()) {
    jj_scanpos = xsp;
    if (jj_3R_BlankNode_2920_11_211()) return true;
    }
    return false;
  }

  private boolean jj_3R_DatasetClause_994_5_93()
 {
    if (jj_scan_token(NAMED)) return true;
    return false;
  }

  private boolean jj_3R_FunctionCall_2528_3_101()
 {
    if (jj_3R_IRIrefConst_2896_4_91()) return true;
    if (jj_3R_ArgList_2738_3_83()) return true;
    return false;
  }

  private boolean jj_3R_StdProperty_1754_9_239()
 {
    if (jj_scan_token(COLON2)) return true;
    return false;
  }

  private boolean jj_3R_DatasetClause_991_3_65()
 {
    if (jj_scan_token(FROM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DatasetClause_993_13_92()) {
    jj_scanpos = xsp;
    if (jj_3R_DatasetClause_994_5_93()) return true;
    }
    return false;
  }

  private boolean jj_3R_QName_2906_3_160()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    return false;
  }

  private boolean jj_3R_StdProperty_1748_11_213()
 {
    if (jj_3R_RegExp_1769_1_227()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StdProperty_1754_9_239()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_OptionalGraphPattern_1364_9_242()
 {
    if (jj_scan_token(OPTIONAL)) return true;
    return false;
  }

  private boolean jj_3R_ConditionalAndExpression_2136_3_163()
 {
    if (jj_3R_ValueLogical_2147_3_184()) return true;
    return false;
  }

  private boolean jj_3R_IRIrefConst_2897_6_126()
 {
    if (jj_3R_QName_2906_3_160()) return true;
    return false;
  }

  private boolean jj_3R_IRIrefConst_2896_6_125()
 {
    if (jj_3R_Q_IRI_ref_2935_5_159()) return true;
    return false;
  }

  private boolean jj_3R_IRIrefConst_2896_4_91()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IRIrefConst_2896_6_125()) {
    jj_scanpos = xsp;
    if (jj_3R_IRIrefConst_2897_6_126()) return true;
    }
    return false;
  }

  private boolean jj_3R_ConditionalOrExpression_2125_3_129()
 {
    if (jj_3R_ConditionalAndExpression_2136_3_163()) return true;
    return false;
  }

  private boolean jj_3R_Set_2491_18_168()
 {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_PropertyVarOrIRIref_1733_7_197()
 {
    if (jj_3R_Var_2082_3_67()) return true;
    return false;
  }

  private boolean jj_3R_Expression_2119_3_99()
 {
    if (jj_3R_ConditionalOrExpression_2125_3_129()) return true;
    return false;
  }

  private boolean jj_3R_PropertyVarOrIRIref_1731_7_196()
 {
    if (jj_3R_StdProperty_1748_11_213()) return true;
    return false;
  }

  private boolean jj_3R_GraphTerm_2110_11_172()
 {
    if (jj_3R_BlankNode_2912_3_193()) return true;
    return false;
  }

  private boolean jj_3R_GraphTerm_2107_11_192()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_GraphTerm_2106_11_191()
 {
    if (jj_3R_BooleanLiteral_2848_3_209()) return true;
    return false;
  }

  private boolean jj_3R_Set_2491_9_143()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_3R_Set_2491_18_168()) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_GraphTerm_2099_17_206()
 {
    if (jj_scan_token(COLON2)) return true;
    return false;
  }

  private boolean jj_3R_GraphTerm_2105_11_190()
 {
    if (jj_3R_NumericLiteral_2822_4_208()) return true;
    return false;
  }

  private boolean jj_3R_PropertyVarOrIRIref_1730_3_174()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PropertyVarOrIRIref_1731_7_196()) {
    jj_scanpos = xsp;
    if (jj_3R_PropertyVarOrIRIref_1733_7_197()) return true;
    }
    return false;
  }

  private boolean jj_3R_GraphTerm_2104_11_189()
 {
    if (jj_3R_RDFLiteral_2830_3_207()) return true;
    return false;
  }

  private boolean jj_3R_GraphTerm_2103_11_188()
 {
    if (jj_scan_token(QNAME_NS)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_Var_2082_3_67()) return true;
    return false;
  }

  private boolean jj_3R_Let_2476_19_167()
 {
    if (jj_scan_token(LETDYN)) return true;
    return false;
  }

  private boolean jj_3R_Verb_1721_7_150()
 {
    if (jj_scan_token(KW_A)) return true;
    return false;
  }

  private boolean jj_3R_Verb_1720_5_149()
 {
    if (jj_3R_PropertyVarOrIRIref_1730_3_174()) return true;
    return false;
  }

  private boolean jj_3R_GraphTerm_2096_11_187()
 {
    if (jj_scan_token(QNAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GraphTerm_2099_17_206()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Bind_1330_9_248()
 {
    if (jj_scan_token(BIND)) return true;
    return false;
  }

  private boolean jj_3R_Verb_1719_3_115()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Verb_1720_5_149()) {
    jj_scanpos = xsp;
    if (jj_3R_Verb_1721_7_150()) return true;
    }
    return false;
  }

  private boolean jj_3R_GraphTerm_2095_9_186()
 {
    if (jj_3R_Q_IRI_ref_2935_5_159()) return true;
    return false;
  }

  private boolean jj_3R_GraphTerm_2094_9_171()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GraphTerm_2095_9_186()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphTerm_2096_11_187()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphTerm_2103_11_188()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphTerm_2104_11_189()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphTerm_2105_11_190()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphTerm_2106_11_191()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphTerm_2107_11_192()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Let_2476_9_142()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_3R_Let_2476_19_167()) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_String_2859_3_221()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(210)) {
    jj_scanpos = xsp;
    if (jj_scan_token(211)) {
    jj_scanpos = xsp;
    if (jj_scan_token(212)) {
    jj_scanpos = xsp;
    if (jj_scan_token(213)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_GraphTerm_2093_3_147()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GraphTerm_2094_9_171()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphTerm_2110_11_172()) return true;
    }
    return false;
  }

  private boolean jj_3R_AssertedAnnotation_1703_5_79()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(BAR)) return true;
    return false;
  }

  private boolean jj_3R_Var_2084_7_98()
 {
    if (jj_scan_token(VAR3)) return true;
    return false;
  }

  private boolean jj_3R_Var_2083_7_97()
 {
    if (jj_scan_token(VAR2)) return true;
    return false;
  }

  private boolean jj_3R_Var_2082_7_96()
 {
    if (jj_scan_token(VAR1)) return true;
    return false;
  }

  private boolean jj_3R_TryCatch_2467_5_141()
 {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_Body_2715_2_166()) return true;
    return false;
  }

  private boolean jj_3R_BooleanLiteral_2848_3_209()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) return true;
    }
    return false;
  }

  private boolean jj_3R_Var_2082_3_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Var_2082_7_96()) {
    jj_scanpos = xsp;
    if (jj_3R_Var_2083_7_97()) {
    jj_scanpos = xsp;
    if (jj_3R_Var_2084_7_98()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_VarOrTerm_2056_27_114()
 {
    if (jj_3R_GraphTerm_2093_3_147()) return true;
    return false;
  }

  private boolean jj_3R_RDFLiteral_2834_7_238()
 {
    if (jj_scan_token(DATATYPE)) return true;
    return false;
  }

  private boolean jj_3R_RDFLiteral_2833_5_237()
 {
    if (jj_scan_token(LANGTAG)) return true;
    return false;
  }

  private boolean jj_3R_RDFLiteral_2833_5_222()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RDFLiteral_2833_5_237()) {
    jj_scanpos = xsp;
    if (jj_3R_RDFLiteral_2834_7_238()) return true;
    }
    return false;
  }

  private boolean jj_3R_PropertyValue_1680_9_195()
 {
    if (jj_3R_StarTriple_1574_5_157()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_AssertedAnnotation_1703_5_79()) return true;
    return false;
  }

  private boolean jj_3R_PropertyValue_1679_9_194()
 {
    if (jj_3R_GraphNode_2046_3_212()) return true;
    return false;
  }

  private boolean jj_3R_RDFLiteral_2830_3_207()
 {
    if (jj_3R_String_2859_3_221()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RDFLiteral_2833_5_222()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_PropertyValue_1678_5_173()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PropertyValue_1679_9_194()) {
    jj_scanpos = xsp;
    if (jj_3R_PropertyValue_1680_9_195()) return true;
    }
    return false;
  }

  private boolean jj_3R_NumericLiteral_2824_6_225()
 {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_NumericLiteral_2823_6_224()
 {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_NumericLiteral_2822_6_223()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_VarOrTerm_2056_5_113()
 {
    if (jj_3R_Var_2082_3_67()) return true;
    return false;
  }

  private boolean jj_3R_GraphPatternNotTriples_1283_11_235()
 {
    if (jj_3R_Values_1019_9_249()) return true;
    return false;
  }

  private boolean jj_3R_GraphNode_2049_11_226()
 {
    if (jj_3R_TriplesNode_1959_3_120()) return true;
    return false;
  }

  private boolean jj_3R_NumericLiteral_2822_4_208()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NumericLiteral_2822_6_223()) {
    jj_scanpos = xsp;
    if (jj_3R_NumericLiteral_2823_6_224()) {
    jj_scanpos = xsp;
    if (jj_3R_NumericLiteral_2824_6_225()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_GraphPatternNotTriples_1282_11_234()
 {
    if (jj_3R_Bind_1330_9_248()) return true;
    return false;
  }

  private boolean jj_3R_VarOrTerm_2056_3_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_VarOrTerm_2056_5_113()) {
    jj_scanpos = xsp;
    if (jj_3R_VarOrTerm_2056_27_114()) return true;
    }
    return false;
  }

  private boolean jj_3R_GraphPatternNotTriples_1281_11_233()
 {
    if (jj_3R_ExistGraphPattern_1384_10_247()) return true;
    return false;
  }

  private boolean jj_3R_GraphPatternNotTriples_1280_11_232()
 {
    if (jj_3R_ScopeGraphPattern_1394_10_246()) return true;
    return false;
  }

  private boolean jj_3R_GraphPatternNotTriples_1279_11_231()
 {
    if (jj_3R_ServicePattern_1436_9_245()) return true;
    return false;
  }

  private boolean jj_3R_SubQuery_1288_2_161()
 {
    if (jj_3R_SelectQuery_793_5_182()) return true;
    return false;
  }

  private boolean jj_3R_GraphPatternNotTriples_1278_11_230()
 {
    if (jj_3R_GraphGraphPattern_1407_9_244()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_GroupOrUnionGraphPattern_1455_9_75()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_VarOrTerm_2056_3_76()) return true;
    return false;
  }

  private boolean jj_3R_GraphPatternNotTriples_1276_7_229()
 {
    if (jj_3R_MinusGraphPattern_1374_9_243()) return true;
    return false;
  }

  private boolean jj_3R_GraphNode_2046_3_212()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphNode_2049_11_226()) return true;
    }
    return false;
  }

  private boolean jj_3R_GraphPatternNotTriples_1275_7_228()
 {
    if (jj_3R_OptionalGraphPattern_1364_9_242()) return true;
    return false;
  }

  private boolean jj_3R_GraphPatternNotTriples_1275_7_219()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GraphPatternNotTriples_1275_7_228()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphPatternNotTriples_1276_7_229()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphPatternNotTriples_1278_11_230()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphPatternNotTriples_1279_11_231()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphPatternNotTriples_1280_11_232()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphPatternNotTriples_1281_11_233()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphPatternNotTriples_1282_11_234()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphPatternNotTriples_1283_11_235()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_ObjectList_1660_3_148()
 {
    if (jj_3R_PropertyValue_1678_5_173()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2805_6_276()
 {
    if (jj_3R_StarTriple_1574_5_157()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2804_6_275()
 {
    if (jj_3R_IRIrefOrFunction_2541_6_278()) return true;
    return false;
  }

  private boolean jj_3R_DeleteInsertData_487_25_124()
 {
    if (jj_scan_token(WHERE)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2803_6_274()
 {
    if (jj_3R_BlankNode_2912_3_193()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2802_6_273()
 {
    if (jj_3R_BooleanLiteral_2848_3_209()) return true;
    return false;
  }

  private boolean jj_3R_Collection_2024_18_217()
 {
    if (jj_3R_StarTriple_1574_5_157()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2801_6_272()
 {
    if (jj_3R_NumericLiteral_2822_4_208()) return true;
    return false;
  }

  private boolean jj_3R_Collection_2023_18_216()
 {
    if (jj_3R_GraphNode_2046_3_212()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2800_6_271()
 {
    if (jj_3R_RDFLiteral_2830_3_207()) return true;
    return false;
  }

  private boolean jj_3R_Collection_2023_17_199()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Collection_2023_18_216()) {
    jj_scanpos = xsp;
    if (jj_3R_Collection_2024_18_217()) return true;
    }
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2799_6_270()
 {
    if (jj_3R_Var_2082_3_67()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2798_6_269()
 {
    if (jj_3R_FunctionCorese_2331_3_74()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2797_6_268()
 {
    if (jj_3R_BuiltInCall_2219_3_100()) return true;
    return false;
  }

  private boolean jj_3R_DeleteInsertData_480_25_123()
 {
    if (jj_scan_token(DATA)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2796_6_267()
 {
    if (jj_3R_BrackettedExpression_2787_9_139()) return true;
    return false;
  }

  private boolean jj_3R_PropertyListNotEmptyElem_1647_5_78()
 {
    if (jj_3R_Verb_1719_3_115()) return true;
    if (jj_3R_ObjectList_1660_3_148()) return true;
    return false;
  }

  private boolean jj_3R_DescribeQuery_858_27_64()
 {
    if (jj_3R_IRIrefConst_2896_4_91()) return true;
    return false;
  }

  private boolean jj_3R_DescribeQuery_857_27_63()
 {
    if (jj_3R_Var_2082_3_67()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2795_3_260()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimaryExpression_2796_6_267()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2797_6_268()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2798_6_269()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2799_6_270()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2800_6_271()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2801_6_272()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2802_6_273()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2803_6_274()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2804_6_275()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2805_6_276()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Collection_2015_17_215()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(246)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    return false;
  }

  private boolean jj_3R_BrackettedExpression_2787_9_139()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_2119_3_99()) return true;
    return false;
  }

  private boolean jj_3R_Collection_2011_17_214()
 {
    if (jj_scan_token(ATLIST)) return true;
    return false;
  }

  private boolean jj_3R_Collection_2011_17_198()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Collection_2011_17_214()) {
    jj_scanpos = xsp;
    if (jj_3R_Collection_2015_17_215()) return true;
    }
    return false;
  }

  private boolean jj_3R_DeleteInsertData_478_17_90()
 {
    if (jj_scan_token(DELETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteInsertData_480_25_123()) {
    jj_scanpos = xsp;
    if (jj_3R_DeleteInsertData_487_25_124()) return true;
    }
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_PropertyListNotEmptyElem_1647_5_78()) return true;
    return false;
  }

  private boolean jj_3R_For_2388_14_169()
 {
    if (jj_scan_token(LOOP)) return true;
    return false;
  }

  private boolean jj_3R_ArgList_2754_31_151()
 {
    if (jj_3R_Arg_2771_9_175()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_WhereClause_1000_4_66()) return true;
    return false;
  }

  private boolean jj_3R_GraphPattern_1242_9_204()
 {
    if (jj_3R_GraphPatternNotTriples_1275_7_219()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_DatasetClause_991_3_65()) return true;
    return false;
  }

  private boolean jj_3R_PropertyListNotEmpty_1631_3_77()
 {
    if (jj_3R_PropertyListNotEmptyElem_1647_5_78()) return true;
    return false;
  }

  private boolean jj_3R_DeleteInsertData_467_17_89()
 {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(DATA)) return true;
    return false;
  }

  private boolean jj_3R_GraphPattern_1240_9_203()
 {
    if (jj_3R_Constraint_1471_3_218()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DescribeQuery_857_27_63()) {
    jj_scanpos = xsp;
    if (jj_3R_DescribeQuery_858_27_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_Arg_2771_9_175()
 {
    if (jj_3R_Expression_2119_3_99()) return true;
    return false;
  }

  private boolean jj_3R_GraphPattern_1238_9_202()
 {
    if (jj_3R_TriplesSameSubject_1548_3_61()) return true;
    return false;
  }

  private boolean jj_3R_GraphPattern_1237_9_183()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GraphPattern_1238_9_202()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphPattern_1240_9_203()) {
    jj_scanpos = xsp;
    if (jj_3R_GraphPattern_1242_9_204()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_PropertyListNotEmpty_1631_3_77()) return true;
    return false;
  }

  private boolean jj_3R_Collection_2003_9_179()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Collection_2011_17_198()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Collection_2023_17_199()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Collection_2023_17_199()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_For_2388_5_144()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_3R_For_2388_14_169()) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_ArgList_2750_25_117()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(241)) {
    jj_scanpos = xsp;
    if (jj_3R_ArgList_2754_31_151()) return true;
    }
    return false;
  }

  private boolean jj_3R_DeleteInsertData_466_9_62()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteInsertData_467_17_89()) {
    jj_scanpos = xsp;
    if (jj_3R_DeleteInsertData_478_17_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_GroupGraphPattern_1227_11_128()
 {
    if (jj_3R_GraphPattern_1236_1_162()) return true;
    return false;
  }

  private boolean jj_3R_GroupGraphPattern_1226_11_127()
 {
    if (jj_3R_SubQuery_1288_2_161()) return true;
    return false;
  }

  private boolean jj_3R_GraphPattern_1236_1_162()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_GraphPattern_1237_9_183()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ArgList_2760_7_118()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_ArgList_2747_18_116()
 {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_DeleteInsertData_466_9_62()) return true;
    return false;
  }

  private boolean jj_3R_tuple_1599_11_158()
 {
    if (jj_scan_token(TUPLE)) return true;
    return false;
  }

  private boolean jj_3R_GroupGraphPattern_1223_3_95()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GroupGraphPattern_1226_11_127()) {
    jj_scanpos = xsp;
    if (jj_3R_GroupGraphPattern_1227_11_128()) return true;
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_tuple_1599_9_122()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_tuple_1599_11_158()) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_Body_2718_36_85()
 {
    if (jj_3R_TemplateExpression_670_5_119()) return true;
    return false;
  }

  private boolean jj_3R_IfThenElse_2365_5_140()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_StarTerm_1589_9_201()
 {
    if (jj_3R_StarTriple_1574_5_157()) return true;
    return false;
  }

  private boolean jj_3R_OrderCondition_1188_27_165()
 {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3R_StarTerm_1588_9_200()
 {
    if (jj_3R_VarOrTerm_2056_3_76()) return true;
    return false;
  }

  private boolean jj_3R_ArgList_2738_3_83()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArgList_2747_18_116()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArgList_2750_25_117()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArgList_2760_7_118()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_StarTerm_1586_5_181()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StarTerm_1588_9_200()) {
    jj_scanpos = xsp;
    if (jj_3R_StarTerm_1589_9_201()) return true;
    }
    return false;
  }

  private boolean jj_3R_OrderCondition_1188_19_138()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_3R_OrderCondition_1188_27_165()) return true;
    }
    return false;
  }

  private boolean jj_3R_TriplesNode_1961_11_156()
 {
    if (jj_3R_BlankNodePropertyList_1968_3_180()) return true;
    return false;
  }

  private boolean jj_3R_TriplesNode_1960_11_155()
 {
    if (jj_3R_Collection_2003_9_179()) return true;
    return false;
  }

  private boolean jj_3R_BlankNodePropertyList_1968_3_180()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_PropertyListNotEmpty_1631_3_77()) return true;
    return false;
  }

  private boolean jj_3R_QueryExp_2346_4_146()
 {
    if (jj_scan_token(QUERY)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_FunctionCorese_2331_3_74()) return true;
    return false;
  }

  private boolean jj_3R_OrderCondition_1184_15_104()
 {
    if (jj_3R_FunctionCall_2528_3_101()) return true;
    return false;
  }

  private boolean jj_3R_OrderCondition_1182_17_102()
 {
    if (jj_3R_Var_2082_3_67()) return true;
    return false;
  }

  private boolean jj_3R_OrderCondition_1183_15_103()
 {
    if (jj_3R_BuiltInCall_2219_3_100()) return true;
    return false;
  }

  private boolean jj_3R_OrderCondition_1187_9_105()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderCondition_1188_19_138()) jj_scanpos = xsp;
    if (jj_3R_BrackettedExpression_2787_9_139()) return true;
    return false;
  }

  private boolean jj_3R_StarTriple_1574_5_157()
 {
    if (jj_scan_token(LTLT)) return true;
    if (jj_3R_StarTerm_1586_5_181()) return true;
    return false;
  }

  private boolean jj_3R_TriplesNode_1959_3_120()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TriplesNode_1960_11_155()) {
    jj_scanpos = xsp;
    if (jj_3R_TriplesNode_1961_11_156()) return true;
    }
    return false;
  }

  private boolean jj_3R_Body_2718_10_84()
 {
    if (jj_3R_Expression_2119_3_99()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Body_2718_10_84()) {
    jj_scanpos = xsp;
    if (jj_3R_Body_2718_36_85()) return true;
    }
    return false;
  }

  private boolean jj_3R_FunctionCorese_2338_5_112()
 {
    if (jj_3R_QueryExp_2346_4_146()) return true;
    return false;
  }

  private boolean jj_3R_FunctionCorese_2337_5_111()
 {
    if (jj_3R_Lambda_2587_3_145()) return true;
    return false;
  }

  private boolean jj_3R_FunctionCorese_2336_5_110()
 {
    if (jj_3R_For_2388_5_144()) return true;
    return false;
  }

  private boolean jj_3R_FunctionCorese_2335_5_109()
 {
    if (jj_3R_Set_2491_9_143()) return true;
    return false;
  }

  private boolean jj_3R_FunctionCorese_2334_5_108()
 {
    if (jj_3R_Let_2476_9_142()) return true;
    return false;
  }

  private boolean jj_3R_FunctionCorese_2333_5_107()
 {
    if (jj_3R_TryCatch_2467_5_141()) return true;
    return false;
  }

  private boolean jj_3R_FunctionCorese_2332_5_106()
 {
    if (jj_3R_IfThenElse_2365_5_140()) return true;
    return false;
  }

  private boolean jj_3R_OrderCondition_1177_9_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderCondition_1182_17_102()) {
    jj_scanpos = xsp;
    if (jj_3R_OrderCondition_1183_15_103()) {
    jj_scanpos = xsp;
    if (jj_3R_OrderCondition_1184_15_104()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_OrderCondition_1187_9_105()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_FunctionCorese_2331_3_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FunctionCorese_2332_5_106()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionCorese_2333_5_107()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionCorese_2334_5_108()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionCorese_2335_5_109()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionCorese_2336_5_110()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionCorese_2337_5_111()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionCorese_2338_5_112()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Body_2715_2_166()
 {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_RDFstar_1562_5_121()
 {
    if (jj_3R_StarTriple_1574_5_157()) return true;
    return false;
  }

  private boolean jj_3R_exists_2319_11_185()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_SelectQuery_793_5_182()
 {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3R_TriplesSameSubject_1552_9_86()
 {
    if (jj_3R_TriplesNode_1959_3_120()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_OrderCondition_1177_9_73()) return true;
    return false;
  }

  private boolean jj_3R_TriplesSameSubject_1555_5_88()
 {
    if (jj_3R_tuple_1599_9_122()) return true;
    return false;
  }

  private boolean jj_3R_exists_2317_9_164()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_exists_2319_11_185()) jj_scanpos = xsp;
    if (jj_scan_token(EXIST)) return true;
    if (jj_3R_GroupGraphPattern_1223_3_95()) return true;
    return false;
  }

  private boolean jj_3R_TriplesSameSubject_1554_5_87()
 {
    if (jj_3R_RDFstar_1562_5_121()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_VarOrTerm_2056_3_76()) return true;
    if (jj_3R_PropertyListNotEmpty_1631_3_77()) return true;
    return false;
  }

  private boolean jj_3R_TriplesSameSubject_1548_3_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_TriplesSameSubject_1552_9_86()) {
    jj_scanpos = xsp;
    if (jj_3R_TriplesSameSubject_1554_5_87()) {
    jj_scanpos = xsp;
    if (jj_3R_TriplesSameSubject_1555_5_88()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_PrimaryRegExp_1915_19_82()
 {
    if (jj_3R_GroupGraphPattern_1223_3_95()) return true;
    return false;
  }

  private boolean jj_3R_BuiltInCall_2309_7_137()
 {
    if (jj_3R_exists_2317_9_164()) return true;
    return false;
  }

  private boolean jj_3R_GroupClause_1148_11_72()
 {
    if (jj_3R_FunctionCorese_2331_3_74()) return true;
    return false;
  }

  private boolean jj_3R_GroupClause_1147_11_71()
 {
    if (jj_3R_FunctionCall_2528_3_101()) return true;
    return false;
  }

  private boolean jj_3R_GroupClause_1146_11_70()
 {
    if (jj_3R_BuiltInCall_2219_3_100()) return true;
    return false;
  }

  private boolean jj_3R_GroupClause_1145_11_69()
 {
    if (jj_3R_Var_2082_3_67()) return true;
    return false;
  }

  private boolean jj_3R_GroupClause_1144_11_68()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_2119_3_99()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryRegExp_1902_19_81()
 {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_BuiltInCall_2298_5_136()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SparqlCoreseTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[273];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	   jj_la1_init_5();
	   jj_la1_init_6();
	   jj_la1_init_7();
	   jj_la1_init_8();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x3f000000,0x0,0x3f000000,0x3f060000,0x60000,0x0,0x404000,0x808000,0xf00,0xf00,0xf00,0xc3ff00,0x0,0x0,0xc0c000,0x3f00,0xc0c000,0xc0c000,0x404000,0x0,0x808000,0x0,0x0,0xc0c000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x700,0x0,0x700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x700,0x0,0x33f00,0x0,0x33f00,0x0,0x700,0x0,0x0,0x0,0x3f00,0x0,0x3f00,0x0,0x40000000,0x3f00,0x0,0x3f00,0x0,0x3f00,0x0,0x0,0x0,0x3f00,0x0,0x8000000,0x3000,0x1000000,0x0,0x0,0x0,0x3700,0x3700,0x0,0x0,0x0,0x40000000,0x0,0x40000000,0x3000,0x0,0x3000,0x0,0x3000,0x0,0x3000,0x700,0x0,0x0,0x0,0x0,0x0,0x0,0x3000,0x0,0x700,0x0,0x700,0x0,0x3000,0x700,0x700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3700,0x0,0x0,0x3700,0x0,0x1000000,0x33f00,0x33f00,0x0,0x33f00,0x0,0x0,0x0,0x33f00,0x0,0x0,0x0,0x3000,0x0,0x3700,0x0,0x700,0x33f00,0x0,0x33f00,0x0,0x33f00,0x30000,0x3f00,0x0,0x33f00,0x0,0x0,0x0,0x0,0x33f00,0x203700,0x3700,0x0,0x700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x700,0x0,0x700,0x0,0x0,0x0,0x30000,0x20000,0x30000,0x30000,0x33f00,0x33f00,0x30000,0x3f00,0x3f00,0x3700,0x3000,0x0,0x700,0xf00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f00,0x0,0x3f00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd000000,0x0,0x0,0x0,0x0,0x0,0x3000,0x0,0x3000,0xd063f00,0x1063000,0xd000000,0x700,0x700,0x700,0x0,0x0,0x0,0x700,0x3700,0xd063f00,0x1063700,0x700,0x0,0x700,0x0,0x700,0x3700,0x0,0x0,0x0,0x3000,0x0,0x3000,0x0,0x0,0x0,0x3000,0x3000,0x0,0x3000,0x60000,0x60000,0x700,0x700,0x0,0x3f00,0x3f00,0x0,0x3f00,0x0,0x60000,0x40000000,0x0,0x3f00,0x3f00,0x0,0x3f00,0x700,0x0,0x40000,0x40000,0x0,0x0,0x700,0x700,0x600,0x800,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x800,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x900,0x0,0x0,0x0,0x800,0x800,0x800,0x800,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x800,0x0,0x200,0x0,0x0,0x0,0x0,0x9ff50000,0x0,0x9ff50000,0x0,0x0,0x9ff50000,0x0,0x9ff50000,0x0,0x9ff50000,0x0,0x0,0x0,0x9ff50000,0x200,0x0,0x0,0x0,0x200,0x200,0x600,0x0,0x0,0x200,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x400,0x20,0x8,0x6,0x0,0x0,0x0,0x0,0x0,0x80310000,0x0,0x80310000,0x0,0x0,0x0,0x4,0x2,0x6,0x8,0x0,0x0,0x0,0x8,0x0,0x9ff50000,0xc0,0xc0,0x80310000,0xc0,0x0,0x8002b800,0x8002b800,0x0,0x0,0x0,0x0,0x0,0x0,0xa000,0x80021800,0x0,0x0,0x0,0x0,0x4000,0x9ff50000,0x800,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x10000,0x0,0x0,0x0,0x0,0x9ff50000,0x0,0x9ff50000,0x200000,0x0,0x0,0x0,0x100000,0x0,0x80310000,0x10000,0x1fc40000,0x0,0x0,0x10000000,0x40000000,0x0,0xc000000,0x0,0x0,0x0,0x9ff51000,0x0,0x1000,0x0,0x0,0x0,0xc00000,0x0,0x3000000,0x0,0x0,0x9ff51000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9ff50000,0x9ff50000,0x0,0x9ff50000,0x0,0x0,0x0,0x0,0x9ff50000,0x9ff50000,0x0,0x9ff50000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0xfbe,0x0,0xfbe,0xfbe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfbe,0x0,0x10000,0x8000,0xc,0x10000,0x6000,0x10000,0x1a0,0x10000,0x0,0x2000,0x0,0x2000,0x1be,0xe00,0x20000,0x600,0x800,0x200,0x600,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffc0000,0x0,0xfffc0000,0x0,0x0,0xfffc0000,0x0,0xfffc0000,0x0,0xfffc0000,0x0,0x0,0x0,0xfffc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffc0000,0x0,0xfffc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffc0000,0x0,0x0,0xfffc0000,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0xfffc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffc0000,0x40000,0xfffc0000,0x0,0x40080000,0x100000,0x0,0xbfe00000,0x0,0xfffc0000,0x0,0x0,0xfbe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffc0fbe,0x0,0xfbe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffc0fbe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffc0000,0xfffc0000,0x0,0xfffc0000,0x0,0x0,0x0,0x0,0xfffc0000,0xfffc0000,0x0,0xfffc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x200,0xffffffff,0x3000,0xe4d0cc44,0x0,0x30f01a3,0x18200010,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x2080,0x7ffd73f,0xf8000000,0x800,0x40,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_5() {
	   jj_la1_5 = new int[] {0x0,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x0,0x0,0x6,0x6,0x6,0xc00006,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0xc00006,0x0,0xc00006,0x0,0x0,0x0,0x0,0x0,0xff8043e7,0x0,0xff8043e7,0x3e0,0x0,0xff8043e7,0x0,0xff8043e7,0x380,0xff8043e7,0x0,0x0,0x0,0xff8043e7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x8,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x420,0x0,0x800,0x10,0x0,0x0,0x2006,0x3f804001,0x2006,0x3f804001,0x0,0x2006,0x0,0x0,0x0,0x0,0x0,0x400,0x20,0x400,0x420,0x10000,0xff804001,0x0,0x0,0x3f804001,0x0,0x0,0xc01806,0xc01806,0x0,0xc00006,0x0,0x0,0x0,0xc00006,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0xff804001,0xc00006,0x0,0xc00006,0x0,0xc00006,0xc00000,0x6,0xc00000,0x6,0x0,0x0,0x0,0x0,0x6,0x20000000,0x20000000,0x200000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0x6,0x0,0x0,0x0,0x200000,0x6,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff804007,0x0,0xff804007,0x0,0xf000000,0x4001,0x30000000,0x800000,0x0,0x3f804001,0x0,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff804007,0x0,0x0,0x6,0x6,0x6,0x0,0x0,0x0,0x0,0x0,0xff804007,0x0,0x0,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0xff8043e7,0xff8043e7,0x0,0xff8043e7,0x0,0x40000000,0x0,0x0,0xff804007,0xff804007,0x0,0xff804007,0x6,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_6() {
	   jj_la1_6 = new int[] {0x0,0x4000002,0x4000002,0x4000002,0x4000002,0x4000002,0x0,0x0,0x413c3800,0x413c3800,0x413c3800,0x513c3800,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x513c3800,0x0,0x513c3800,0x0,0x0,0x0,0x1000000,0x10000000,0x413c3801,0x80000000,0x413c3801,0x0,0x0,0x413c3801,0x80000000,0x413c3801,0x0,0x413c3801,0x1000000,0x13c0000,0x1000000,0x413c3801,0x0,0x0,0x1000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x1000000,0x1000000,0x1000000,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x3c3800,0x0,0x3c3800,0x0,0x1000000,0x3c3800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000001,0x0,0x0,0x0,0x1000000,0x0,0x553c3800,0x553c3800,0x0,0x513c3800,0x0,0x0,0x0,0x513c3800,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x1000001,0x513c3800,0x0,0x513c3800,0x0,0x513c3800,0x11000000,0x413c3800,0x0,0x513c3800,0x0,0x0,0x0,0x0,0x513c3800,0x1000020,0x1000020,0x0,0x1000020,0x0,0x0,0x0,0x800,0x0,0x800,0x4000000,0x4000000,0x1000020,0x0,0x1000000,0x14000800,0x38,0x3c0,0x11000000,0x0,0x0,0x0,0x513c3800,0x513c3800,0x11000000,0x413c3800,0x40000000,0x0,0x0,0x0,0x13c3800,0x413c3800,0x0,0x0,0x0,0x3c,0x3c,0x0,0x0,0x0,0x0,0x413c3801,0x0,0x413c3801,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x4000000,0x0,0x2000000,0x0,0x0,0x0,0x1000000,0x413c3801,0x1000000,0x0,0x13c3800,0x13c3800,0x3c3800,0x0,0x0,0x0,0x0,0x1000000,0x413c3801,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c3800,0x3c3800,0x0,0x413c3801,0x413c3801,0x80000000,0x493c3801,0x2,0x0,0x0,0x0,0x413c3801,0x413c3801,0x80000000,0x413c3801,0x3c3800,0x3800,0x0,0x0,0x0,0x3c0000,0x0,0x0,0x0,0x40000000,};
	}
	private static void jj_la1_init_7() {
	   jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x10,0xc00010,0x2,0x0,0x0,0x800000,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00010,0x0,0xc00010,0x0,0x0,0x1,0x0,0x0,0xc00010,0x0,0xc00010,0x0,0x0,0xc00010,0x0,0xc00010,0x0,0xc00010,0x0,0x0,0x0,0xc00010,0x0,0x0,0x820000,0x0,0x0,0x0,0x0,0x800000,0x820000,0x0,0x0,0x0,0x0,0x0,0x0,0x820000,0x0,0x800000,0x0,0x820000,0x1,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x10,0x0,0x10,0x0,0x800000,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x800000,0x0,0x0,0xc00010,0xc00010,0x2,0xc00010,0x2,0x0,0x2,0xc00010,0x0,0x0,0x1,0x800000,0x0,0x800000,0x0,0x0,0xc00010,0x2,0xc00010,0x2,0xc00010,0x400010,0x800010,0x0,0xc00000,0x100000,0x100000,0x2,0x1,0xc00010,0x800400,0x800400,0x0,0x400,0x102000,0x102000,0x40000,0x0,0x1,0x1,0xa8000,0xa8000,0x400,0xa8000,0x0,0x0,0xbcc,0x0,0x400000,0x400000,0x400000,0x400000,0xc00010,0xc00010,0x400000,0x800000,0x800000,0x800000,0x800000,0x0,0x0,0x0,0x2000,0x4000,0x0,0xbcc,0xbcc,0x18000,0x18000,0x60000,0x60000,0x818410,0x0,0x818410,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x800001,0x1,0x800000,0xc18410,0x800000,0x400000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x800000,0xc18410,0x800000,0x0,0x0,0x0,0x1,0x0,0x800000,0x1,0x0,0x1,0x800000,0x1,0x900002,0x100000,0x2,0x2,0x900002,0x800001,0x1,0x800000,0x0,0x0,0x800000,0x800000,0x20000,0x818410,0x818410,0x0,0x818410,0x0,0x0,0x0,0x1,0x838410,0x838410,0x0,0x800010,0x0,0x0,0x200000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_8() {
	   jj_la1_8 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[19];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SparqlCorese(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SparqlCorese(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SparqlCoreseTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 273; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 273; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SparqlCorese(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SparqlCoreseTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 273; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SparqlCoreseTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 273; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SparqlCorese(SparqlCoreseTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 273; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SparqlCoreseTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 273; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[257];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 273; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		   if ((jj_la1_5[i] & (1<<j)) != 0) {
			 la1tokens[160+j] = true;
		   }
		   if ((jj_la1_6[i] & (1<<j)) != 0) {
			 la1tokens[192+j] = true;
		   }
		   if ((jj_la1_7[i] & (1<<j)) != 0) {
			 la1tokens[224+j] = true;
		   }
		   if ((jj_la1_8[i] & (1<<j)) != 0) {
			 la1tokens[256+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 257; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 19; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
